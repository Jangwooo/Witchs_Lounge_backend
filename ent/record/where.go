// Code generated by ent, DO NOT EDIT.

package record

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldUserID, v))
}

// MusicID applies equality check predicate on the "music_id" field. It's identical to MusicIDEQ.
func MusicID(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldMusicID, v))
}

// StageID applies equality check predicate on the "stage_id" field. It's identical to StageIDEQ.
func StageID(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldStageID, v))
}

// CharacterID applies equality check predicate on the "character_id" field. It's identical to CharacterIDEQ.
func CharacterID(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCharacterID, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldScore, v))
}

// PerfectCount applies equality check predicate on the "perfect_count" field. It's identical to PerfectCountEQ.
func PerfectCount(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldPerfectCount, v))
}

// GoodCount applies equality check predicate on the "good_count" field. It's identical to GoodCountEQ.
func GoodCount(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldGoodCount, v))
}

// BadCount applies equality check predicate on the "bad_count" field. It's identical to BadCountEQ.
func BadCount(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldBadCount, v))
}

// MissCount applies equality check predicate on the "miss_count" field. It's identical to MissCountEQ.
func MissCount(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldMissCount, v))
}

// PlayedAt applies equality check predicate on the "played_at" field. It's identical to PlayedAtEQ.
func PlayedAt(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldPlayedAt, v))
}

// Accuracy applies equality check predicate on the "accuracy" field. It's identical to AccuracyEQ.
func Accuracy(v float64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldAccuracy, v))
}

// AdditionalInfo applies equality check predicate on the "additional_info" field. It's identical to AdditionalInfoEQ.
func AdditionalInfo(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldAdditionalInfo, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldUserID, vs...))
}

// MusicIDEQ applies the EQ predicate on the "music_id" field.
func MusicIDEQ(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldMusicID, v))
}

// MusicIDNEQ applies the NEQ predicate on the "music_id" field.
func MusicIDNEQ(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldMusicID, v))
}

// MusicIDIn applies the In predicate on the "music_id" field.
func MusicIDIn(vs ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldMusicID, vs...))
}

// MusicIDNotIn applies the NotIn predicate on the "music_id" field.
func MusicIDNotIn(vs ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldMusicID, vs...))
}

// StageIDEQ applies the EQ predicate on the "stage_id" field.
func StageIDEQ(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldStageID, v))
}

// StageIDNEQ applies the NEQ predicate on the "stage_id" field.
func StageIDNEQ(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldStageID, v))
}

// StageIDIn applies the In predicate on the "stage_id" field.
func StageIDIn(vs ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldStageID, vs...))
}

// StageIDNotIn applies the NotIn predicate on the "stage_id" field.
func StageIDNotIn(vs ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldStageID, vs...))
}

// CharacterIDEQ applies the EQ predicate on the "character_id" field.
func CharacterIDEQ(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCharacterID, v))
}

// CharacterIDNEQ applies the NEQ predicate on the "character_id" field.
func CharacterIDNEQ(v uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldCharacterID, v))
}

// CharacterIDIn applies the In predicate on the "character_id" field.
func CharacterIDIn(vs ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldCharacterID, vs...))
}

// CharacterIDNotIn applies the NotIn predicate on the "character_id" field.
func CharacterIDNotIn(vs ...uuid.UUID) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldCharacterID, vs...))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldScore, v))
}

// PerfectCountEQ applies the EQ predicate on the "perfect_count" field.
func PerfectCountEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldPerfectCount, v))
}

// PerfectCountNEQ applies the NEQ predicate on the "perfect_count" field.
func PerfectCountNEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldPerfectCount, v))
}

// PerfectCountIn applies the In predicate on the "perfect_count" field.
func PerfectCountIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldPerfectCount, vs...))
}

// PerfectCountNotIn applies the NotIn predicate on the "perfect_count" field.
func PerfectCountNotIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldPerfectCount, vs...))
}

// PerfectCountGT applies the GT predicate on the "perfect_count" field.
func PerfectCountGT(v int) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldPerfectCount, v))
}

// PerfectCountGTE applies the GTE predicate on the "perfect_count" field.
func PerfectCountGTE(v int) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldPerfectCount, v))
}

// PerfectCountLT applies the LT predicate on the "perfect_count" field.
func PerfectCountLT(v int) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldPerfectCount, v))
}

// PerfectCountLTE applies the LTE predicate on the "perfect_count" field.
func PerfectCountLTE(v int) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldPerfectCount, v))
}

// GoodCountEQ applies the EQ predicate on the "good_count" field.
func GoodCountEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldGoodCount, v))
}

// GoodCountNEQ applies the NEQ predicate on the "good_count" field.
func GoodCountNEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldGoodCount, v))
}

// GoodCountIn applies the In predicate on the "good_count" field.
func GoodCountIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldGoodCount, vs...))
}

// GoodCountNotIn applies the NotIn predicate on the "good_count" field.
func GoodCountNotIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldGoodCount, vs...))
}

// GoodCountGT applies the GT predicate on the "good_count" field.
func GoodCountGT(v int) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldGoodCount, v))
}

// GoodCountGTE applies the GTE predicate on the "good_count" field.
func GoodCountGTE(v int) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldGoodCount, v))
}

// GoodCountLT applies the LT predicate on the "good_count" field.
func GoodCountLT(v int) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldGoodCount, v))
}

// GoodCountLTE applies the LTE predicate on the "good_count" field.
func GoodCountLTE(v int) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldGoodCount, v))
}

// BadCountEQ applies the EQ predicate on the "bad_count" field.
func BadCountEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldBadCount, v))
}

// BadCountNEQ applies the NEQ predicate on the "bad_count" field.
func BadCountNEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldBadCount, v))
}

// BadCountIn applies the In predicate on the "bad_count" field.
func BadCountIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldBadCount, vs...))
}

// BadCountNotIn applies the NotIn predicate on the "bad_count" field.
func BadCountNotIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldBadCount, vs...))
}

// BadCountGT applies the GT predicate on the "bad_count" field.
func BadCountGT(v int) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldBadCount, v))
}

// BadCountGTE applies the GTE predicate on the "bad_count" field.
func BadCountGTE(v int) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldBadCount, v))
}

// BadCountLT applies the LT predicate on the "bad_count" field.
func BadCountLT(v int) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldBadCount, v))
}

// BadCountLTE applies the LTE predicate on the "bad_count" field.
func BadCountLTE(v int) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldBadCount, v))
}

// MissCountEQ applies the EQ predicate on the "miss_count" field.
func MissCountEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldMissCount, v))
}

// MissCountNEQ applies the NEQ predicate on the "miss_count" field.
func MissCountNEQ(v int) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldMissCount, v))
}

// MissCountIn applies the In predicate on the "miss_count" field.
func MissCountIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldMissCount, vs...))
}

// MissCountNotIn applies the NotIn predicate on the "miss_count" field.
func MissCountNotIn(vs ...int) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldMissCount, vs...))
}

// MissCountGT applies the GT predicate on the "miss_count" field.
func MissCountGT(v int) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldMissCount, v))
}

// MissCountGTE applies the GTE predicate on the "miss_count" field.
func MissCountGTE(v int) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldMissCount, v))
}

// MissCountLT applies the LT predicate on the "miss_count" field.
func MissCountLT(v int) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldMissCount, v))
}

// MissCountLTE applies the LTE predicate on the "miss_count" field.
func MissCountLTE(v int) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldMissCount, v))
}

// PlayedAtEQ applies the EQ predicate on the "played_at" field.
func PlayedAtEQ(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldPlayedAt, v))
}

// PlayedAtNEQ applies the NEQ predicate on the "played_at" field.
func PlayedAtNEQ(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldPlayedAt, v))
}

// PlayedAtIn applies the In predicate on the "played_at" field.
func PlayedAtIn(vs ...time.Time) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldPlayedAt, vs...))
}

// PlayedAtNotIn applies the NotIn predicate on the "played_at" field.
func PlayedAtNotIn(vs ...time.Time) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldPlayedAt, vs...))
}

// PlayedAtGT applies the GT predicate on the "played_at" field.
func PlayedAtGT(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldPlayedAt, v))
}

// PlayedAtGTE applies the GTE predicate on the "played_at" field.
func PlayedAtGTE(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldPlayedAt, v))
}

// PlayedAtLT applies the LT predicate on the "played_at" field.
func PlayedAtLT(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldPlayedAt, v))
}

// PlayedAtLTE applies the LTE predicate on the "played_at" field.
func PlayedAtLTE(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldPlayedAt, v))
}

// AccuracyEQ applies the EQ predicate on the "accuracy" field.
func AccuracyEQ(v float64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldAccuracy, v))
}

// AccuracyNEQ applies the NEQ predicate on the "accuracy" field.
func AccuracyNEQ(v float64) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldAccuracy, v))
}

// AccuracyIn applies the In predicate on the "accuracy" field.
func AccuracyIn(vs ...float64) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldAccuracy, vs...))
}

// AccuracyNotIn applies the NotIn predicate on the "accuracy" field.
func AccuracyNotIn(vs ...float64) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldAccuracy, vs...))
}

// AccuracyGT applies the GT predicate on the "accuracy" field.
func AccuracyGT(v float64) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldAccuracy, v))
}

// AccuracyGTE applies the GTE predicate on the "accuracy" field.
func AccuracyGTE(v float64) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldAccuracy, v))
}

// AccuracyLT applies the LT predicate on the "accuracy" field.
func AccuracyLT(v float64) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldAccuracy, v))
}

// AccuracyLTE applies the LTE predicate on the "accuracy" field.
func AccuracyLTE(v float64) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldAccuracy, v))
}

// AdditionalInfoEQ applies the EQ predicate on the "additional_info" field.
func AdditionalInfoEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldAdditionalInfo, v))
}

// AdditionalInfoNEQ applies the NEQ predicate on the "additional_info" field.
func AdditionalInfoNEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldAdditionalInfo, v))
}

// AdditionalInfoIn applies the In predicate on the "additional_info" field.
func AdditionalInfoIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldAdditionalInfo, vs...))
}

// AdditionalInfoNotIn applies the NotIn predicate on the "additional_info" field.
func AdditionalInfoNotIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldAdditionalInfo, vs...))
}

// AdditionalInfoGT applies the GT predicate on the "additional_info" field.
func AdditionalInfoGT(v string) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldAdditionalInfo, v))
}

// AdditionalInfoGTE applies the GTE predicate on the "additional_info" field.
func AdditionalInfoGTE(v string) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldAdditionalInfo, v))
}

// AdditionalInfoLT applies the LT predicate on the "additional_info" field.
func AdditionalInfoLT(v string) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldAdditionalInfo, v))
}

// AdditionalInfoLTE applies the LTE predicate on the "additional_info" field.
func AdditionalInfoLTE(v string) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldAdditionalInfo, v))
}

// AdditionalInfoContains applies the Contains predicate on the "additional_info" field.
func AdditionalInfoContains(v string) predicate.Record {
	return predicate.Record(sql.FieldContains(FieldAdditionalInfo, v))
}

// AdditionalInfoHasPrefix applies the HasPrefix predicate on the "additional_info" field.
func AdditionalInfoHasPrefix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasPrefix(FieldAdditionalInfo, v))
}

// AdditionalInfoHasSuffix applies the HasSuffix predicate on the "additional_info" field.
func AdditionalInfoHasSuffix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasSuffix(FieldAdditionalInfo, v))
}

// AdditionalInfoIsNil applies the IsNil predicate on the "additional_info" field.
func AdditionalInfoIsNil() predicate.Record {
	return predicate.Record(sql.FieldIsNull(FieldAdditionalInfo))
}

// AdditionalInfoNotNil applies the NotNil predicate on the "additional_info" field.
func AdditionalInfoNotNil() predicate.Record {
	return predicate.Record(sql.FieldNotNull(FieldAdditionalInfo))
}

// AdditionalInfoEqualFold applies the EqualFold predicate on the "additional_info" field.
func AdditionalInfoEqualFold(v string) predicate.Record {
	return predicate.Record(sql.FieldEqualFold(FieldAdditionalInfo, v))
}

// AdditionalInfoContainsFold applies the ContainsFold predicate on the "additional_info" field.
func AdditionalInfoContainsFold(v string) predicate.Record {
	return predicate.Record(sql.FieldContainsFold(FieldAdditionalInfo, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMusic applies the HasEdge predicate on the "music" edge.
func HasMusic() predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MusicTable, MusicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMusicWith applies the HasEdge predicate on the "music" edge with a given conditions (other predicates).
func HasMusicWith(preds ...predicate.Music) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := newMusicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStage applies the HasEdge predicate on the "stage" edge.
func HasStage() predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StageTable, StageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStageWith applies the HasEdge predicate on the "stage" edge with a given conditions (other predicates).
func HasStageWith(preds ...predicate.Stage) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := newStageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCharacter applies the HasEdge predicate on the "character" edge.
func HasCharacter() predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CharacterTable, CharacterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharacterWith applies the HasEdge predicate on the "character" edge with a given conditions (other predicates).
func HasCharacterWith(preds ...predicate.Character) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := newCharacterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Record) predicate.Record {
	return predicate.Record(sql.NotPredicates(p))
}
