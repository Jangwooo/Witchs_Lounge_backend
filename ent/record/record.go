// Code generated by ent, DO NOT EDIT.

package record

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the record type in the database.
	Label = "record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldMusicID holds the string denoting the music_id field in the database.
	FieldMusicID = "music_id"
	// FieldStageID holds the string denoting the stage_id field in the database.
	FieldStageID = "stage_id"
	// FieldCharacterID holds the string denoting the character_id field in the database.
	FieldCharacterID = "character_id"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldPerfectCount holds the string denoting the perfect_count field in the database.
	FieldPerfectCount = "perfect_count"
	// FieldGoodCount holds the string denoting the good_count field in the database.
	FieldGoodCount = "good_count"
	// FieldBadCount holds the string denoting the bad_count field in the database.
	FieldBadCount = "bad_count"
	// FieldMissCount holds the string denoting the miss_count field in the database.
	FieldMissCount = "miss_count"
	// FieldPlayedAt holds the string denoting the played_at field in the database.
	FieldPlayedAt = "played_at"
	// FieldAccuracy holds the string denoting the accuracy field in the database.
	FieldAccuracy = "accuracy"
	// FieldAdditionalInfo holds the string denoting the additional_info field in the database.
	FieldAdditionalInfo = "additional_info"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeMusic holds the string denoting the music edge name in mutations.
	EdgeMusic = "music"
	// EdgeStage holds the string denoting the stage edge name in mutations.
	EdgeStage = "stage"
	// EdgeCharacter holds the string denoting the character edge name in mutations.
	EdgeCharacter = "character"
	// Table holds the table name of the record in the database.
	Table = "records"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// MusicTable is the table that holds the music relation/edge.
	MusicTable = "records"
	// MusicInverseTable is the table name for the Music entity.
	// It exists in this package in order to avoid circular dependency with the "music" package.
	MusicInverseTable = "musics"
	// MusicColumn is the table column denoting the music relation/edge.
	MusicColumn = "music_id"
	// StageTable is the table that holds the stage relation/edge.
	StageTable = "records"
	// StageInverseTable is the table name for the Stage entity.
	// It exists in this package in order to avoid circular dependency with the "stage" package.
	StageInverseTable = "stages"
	// StageColumn is the table column denoting the stage relation/edge.
	StageColumn = "stage_id"
	// CharacterTable is the table that holds the character relation/edge.
	CharacterTable = "records"
	// CharacterInverseTable is the table name for the Character entity.
	// It exists in this package in order to avoid circular dependency with the "character" package.
	CharacterInverseTable = "characters"
	// CharacterColumn is the table column denoting the character relation/edge.
	CharacterColumn = "character_id"
)

// Columns holds all SQL columns for record fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldMusicID,
	FieldStageID,
	FieldCharacterID,
	FieldScore,
	FieldPerfectCount,
	FieldGoodCount,
	FieldBadCount,
	FieldMissCount,
	FieldPlayedAt,
	FieldAccuracy,
	FieldAdditionalInfo,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultPerfectCount holds the default value on creation for the "perfect_count" field.
	DefaultPerfectCount int
	// DefaultGoodCount holds the default value on creation for the "good_count" field.
	DefaultGoodCount int
	// DefaultBadCount holds the default value on creation for the "bad_count" field.
	DefaultBadCount int
	// DefaultMissCount holds the default value on creation for the "miss_count" field.
	DefaultMissCount int
	// DefaultPlayedAt holds the default value on creation for the "played_at" field.
	DefaultPlayedAt func() time.Time
	// DefaultAccuracy holds the default value on creation for the "accuracy" field.
	DefaultAccuracy float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Record queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByMusicID orders the results by the music_id field.
func ByMusicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMusicID, opts...).ToFunc()
}

// ByStageID orders the results by the stage_id field.
func ByStageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStageID, opts...).ToFunc()
}

// ByCharacterID orders the results by the character_id field.
func ByCharacterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacterID, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByPerfectCount orders the results by the perfect_count field.
func ByPerfectCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPerfectCount, opts...).ToFunc()
}

// ByGoodCount orders the results by the good_count field.
func ByGoodCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodCount, opts...).ToFunc()
}

// ByBadCount orders the results by the bad_count field.
func ByBadCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBadCount, opts...).ToFunc()
}

// ByMissCount orders the results by the miss_count field.
func ByMissCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissCount, opts...).ToFunc()
}

// ByPlayedAt orders the results by the played_at field.
func ByPlayedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayedAt, opts...).ToFunc()
}

// ByAccuracy orders the results by the accuracy field.
func ByAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccuracy, opts...).ToFunc()
}

// ByAdditionalInfo orders the results by the additional_info field.
func ByAdditionalInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdditionalInfo, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByMusicField orders the results by music field.
func ByMusicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMusicStep(), sql.OrderByField(field, opts...))
	}
}

// ByStageField orders the results by stage field.
func ByStageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStageStep(), sql.OrderByField(field, opts...))
	}
}

// ByCharacterField orders the results by character field.
func ByCharacterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newMusicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MusicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MusicTable, MusicColumn),
	)
}
func newStageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StageTable, StageColumn),
	)
}
func newCharacterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharacterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CharacterTable, CharacterColumn),
	)
}
