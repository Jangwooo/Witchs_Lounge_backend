// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/achievement"
)

// Achievement is the model entity for the Achievement schema.
type Achievement struct {
	config `json:"-"`
	// ID of the ent.
	// Global custom UUID ID
	ID uuid.UUID `json:"id,omitempty"`
	// Created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Updated time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 업적 이름
	Name string `json:"name,omitempty"`
	// 업적 설명
	Description string `json:"description,omitempty"`
	// 업적 아이콘 URL
	IconURL string `json:"icon_url,omitempty"`
	// 업적 타입
	Type achievement.Type `json:"type,omitempty"`
	// 달성 조건
	Conditions map[string]interface{} `json:"conditions,omitempty"`
	// 보상
	Rewards map[string]interface{} `json:"rewards,omitempty"`
	// 업적 포인트
	Points int `json:"points,omitempty"`
	// 숨김 업적 여부
	IsHidden bool `json:"is_hidden,omitempty"`
	// 활성 여부
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AchievementQuery when eager-loading is set.
	Edges        AchievementEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AchievementEdges holds the relations/edges for other nodes in the graph.
type AchievementEdges struct {
	// UserAchievements holds the value of the user_achievements edge.
	UserAchievements []*UserAchievement `json:"user_achievements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserAchievementsOrErr returns the UserAchievements value or an error if the edge
// was not loaded in eager-loading.
func (e AchievementEdges) UserAchievementsOrErr() ([]*UserAchievement, error) {
	if e.loadedTypes[0] {
		return e.UserAchievements, nil
	}
	return nil, &NotLoadedError{edge: "user_achievements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Achievement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case achievement.FieldConditions, achievement.FieldRewards:
			values[i] = new([]byte)
		case achievement.FieldIsHidden, achievement.FieldIsActive:
			values[i] = new(sql.NullBool)
		case achievement.FieldPoints:
			values[i] = new(sql.NullInt64)
		case achievement.FieldName, achievement.FieldDescription, achievement.FieldIconURL, achievement.FieldType:
			values[i] = new(sql.NullString)
		case achievement.FieldCreatedAt, achievement.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case achievement.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Achievement fields.
func (a *Achievement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case achievement.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case achievement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case achievement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case achievement.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case achievement.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case achievement.FieldIconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_url", values[i])
			} else if value.Valid {
				a.IconURL = value.String
			}
		case achievement.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = achievement.Type(value.String)
			}
		case achievement.FieldConditions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field conditions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Conditions); err != nil {
					return fmt.Errorf("unmarshal field conditions: %w", err)
				}
			}
		case achievement.FieldRewards:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rewards", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Rewards); err != nil {
					return fmt.Errorf("unmarshal field rewards: %w", err)
				}
			}
		case achievement.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				a.Points = int(value.Int64)
			}
		case achievement.FieldIsHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_hidden", values[i])
			} else if value.Valid {
				a.IsHidden = value.Bool
			}
		case achievement.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				a.IsActive = value.Bool
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Achievement.
// This includes values selected through modifiers, order, etc.
func (a *Achievement) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUserAchievements queries the "user_achievements" edge of the Achievement entity.
func (a *Achievement) QueryUserAchievements() *UserAchievementQuery {
	return NewAchievementClient(a.config).QueryUserAchievements(a)
}

// Update returns a builder for updating this Achievement.
// Note that you need to call Achievement.Unwrap() before calling this method if this Achievement
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Achievement) Update() *AchievementUpdateOne {
	return NewAchievementClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Achievement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Achievement) Unwrap() *Achievement {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Achievement is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Achievement) String() string {
	var builder strings.Builder
	builder.WriteString("Achievement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("icon_url=")
	builder.WriteString(a.IconURL)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", ")
	builder.WriteString("conditions=")
	builder.WriteString(fmt.Sprintf("%v", a.Conditions))
	builder.WriteString(", ")
	builder.WriteString("rewards=")
	builder.WriteString(fmt.Sprintf("%v", a.Rewards))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", a.Points))
	builder.WriteString(", ")
	builder.WriteString("is_hidden=")
	builder.WriteString(fmt.Sprintf("%v", a.IsHidden))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", a.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// Achievements is a parsable slice of Achievement.
type Achievements []*Achievement
