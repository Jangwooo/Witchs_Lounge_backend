// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/music"
	"github.com/witchs-lounge_backend/ent/stage"
)

// Stage is the model entity for the Stage schema.
type Stage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MusicID holds the value of the "music_id" field.
	MusicID uuid.UUID `json:"music_id,omitempty"`
	// LevelName holds the value of the "level_name" field.
	LevelName string `json:"level_name,omitempty"`
	// LevelAddress holds the value of the "level_address" field.
	LevelAddress string `json:"level_address,omitempty"`
	// JacketAddress holds the value of the "jacket_address" field.
	JacketAddress string `json:"jacket_address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StageQuery when eager-loading is set.
	Edges        StageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StageEdges holds the relations/edges for other nodes in the graph.
type StageEdges struct {
	// Music holds the value of the music edge.
	Music *Music `json:"music,omitempty"`
	// Records holds the value of the records edge.
	Records []*Record `json:"records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MusicOrErr returns the Music value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StageEdges) MusicOrErr() (*Music, error) {
	if e.Music != nil {
		return e.Music, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: music.Label}
	}
	return nil, &NotLoadedError{edge: "music"}
}

// RecordsOrErr returns the Records value or an error if the edge
// was not loaded in eager-loading.
func (e StageEdges) RecordsOrErr() ([]*Record, error) {
	if e.loadedTypes[1] {
		return e.Records, nil
	}
	return nil, &NotLoadedError{edge: "records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stage.FieldLevelName, stage.FieldLevelAddress, stage.FieldJacketAddress:
			values[i] = new(sql.NullString)
		case stage.FieldID, stage.FieldMusicID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stage fields.
func (s *Stage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case stage.FieldMusicID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field music_id", values[i])
			} else if value != nil {
				s.MusicID = *value
			}
		case stage.FieldLevelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level_name", values[i])
			} else if value.Valid {
				s.LevelName = value.String
			}
		case stage.FieldLevelAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level_address", values[i])
			} else if value.Valid {
				s.LevelAddress = value.String
			}
		case stage.FieldJacketAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jacket_address", values[i])
			} else if value.Valid {
				s.JacketAddress = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Stage.
// This includes values selected through modifiers, order, etc.
func (s *Stage) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryMusic queries the "music" edge of the Stage entity.
func (s *Stage) QueryMusic() *MusicQuery {
	return NewStageClient(s.config).QueryMusic(s)
}

// QueryRecords queries the "records" edge of the Stage entity.
func (s *Stage) QueryRecords() *RecordQuery {
	return NewStageClient(s.config).QueryRecords(s)
}

// Update returns a builder for updating this Stage.
// Note that you need to call Stage.Unwrap() before calling this method if this Stage
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stage) Update() *StageUpdateOne {
	return NewStageClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Stage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stage) Unwrap() *Stage {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stage is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stage) String() string {
	var builder strings.Builder
	builder.WriteString("Stage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("music_id=")
	builder.WriteString(fmt.Sprintf("%v", s.MusicID))
	builder.WriteString(", ")
	builder.WriteString("level_name=")
	builder.WriteString(s.LevelName)
	builder.WriteString(", ")
	builder.WriteString("level_address=")
	builder.WriteString(s.LevelAddress)
	builder.WriteString(", ")
	builder.WriteString("jacket_address=")
	builder.WriteString(s.JacketAddress)
	builder.WriteByte(')')
	return builder.String()
}

// Stages is a parsable slice of Stage.
type Stages []*Stage
