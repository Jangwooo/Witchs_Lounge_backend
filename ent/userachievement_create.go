// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/achievement"
	"github.com/witchs-lounge_backend/ent/user"
	"github.com/witchs-lounge_backend/ent/userachievement"
)

// UserAchievementCreate is the builder for creating a UserAchievement entity.
type UserAchievementCreate struct {
	config
	mutation *UserAchievementMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uac *UserAchievementCreate) SetCreatedAt(t time.Time) *UserAchievementCreate {
	uac.mutation.SetCreatedAt(t)
	return uac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uac *UserAchievementCreate) SetNillableCreatedAt(t *time.Time) *UserAchievementCreate {
	if t != nil {
		uac.SetCreatedAt(*t)
	}
	return uac
}

// SetUpdatedAt sets the "updated_at" field.
func (uac *UserAchievementCreate) SetUpdatedAt(t time.Time) *UserAchievementCreate {
	uac.mutation.SetUpdatedAt(t)
	return uac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uac *UserAchievementCreate) SetNillableUpdatedAt(t *time.Time) *UserAchievementCreate {
	if t != nil {
		uac.SetUpdatedAt(*t)
	}
	return uac
}

// SetUserID sets the "user_id" field.
func (uac *UserAchievementCreate) SetUserID(u uuid.UUID) *UserAchievementCreate {
	uac.mutation.SetUserID(u)
	return uac
}

// SetAchievementID sets the "achievement_id" field.
func (uac *UserAchievementCreate) SetAchievementID(u uuid.UUID) *UserAchievementCreate {
	uac.mutation.SetAchievementID(u)
	return uac
}

// SetUnlockedAt sets the "unlocked_at" field.
func (uac *UserAchievementCreate) SetUnlockedAt(t time.Time) *UserAchievementCreate {
	uac.mutation.SetUnlockedAt(t)
	return uac
}

// SetNillableUnlockedAt sets the "unlocked_at" field if the given value is not nil.
func (uac *UserAchievementCreate) SetNillableUnlockedAt(t *time.Time) *UserAchievementCreate {
	if t != nil {
		uac.SetUnlockedAt(*t)
	}
	return uac
}

// SetProgressData sets the "progress_data" field.
func (uac *UserAchievementCreate) SetProgressData(m map[string]interface{}) *UserAchievementCreate {
	uac.mutation.SetProgressData(m)
	return uac
}

// SetID sets the "id" field.
func (uac *UserAchievementCreate) SetID(u uuid.UUID) *UserAchievementCreate {
	uac.mutation.SetID(u)
	return uac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uac *UserAchievementCreate) SetNillableID(u *uuid.UUID) *UserAchievementCreate {
	if u != nil {
		uac.SetID(*u)
	}
	return uac
}

// SetUser sets the "user" edge to the User entity.
func (uac *UserAchievementCreate) SetUser(u *User) *UserAchievementCreate {
	return uac.SetUserID(u.ID)
}

// SetAchievement sets the "achievement" edge to the Achievement entity.
func (uac *UserAchievementCreate) SetAchievement(a *Achievement) *UserAchievementCreate {
	return uac.SetAchievementID(a.ID)
}

// Mutation returns the UserAchievementMutation object of the builder.
func (uac *UserAchievementCreate) Mutation() *UserAchievementMutation {
	return uac.mutation
}

// Save creates the UserAchievement in the database.
func (uac *UserAchievementCreate) Save(ctx context.Context) (*UserAchievement, error) {
	uac.defaults()
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAchievementCreate) SaveX(ctx context.Context) *UserAchievement {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserAchievementCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserAchievementCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UserAchievementCreate) defaults() {
	if _, ok := uac.mutation.CreatedAt(); !ok {
		v := userachievement.DefaultCreatedAt()
		uac.mutation.SetCreatedAt(v)
	}
	if _, ok := uac.mutation.UpdatedAt(); !ok {
		v := userachievement.DefaultUpdatedAt()
		uac.mutation.SetUpdatedAt(v)
	}
	if _, ok := uac.mutation.UnlockedAt(); !ok {
		v := userachievement.DefaultUnlockedAt()
		uac.mutation.SetUnlockedAt(v)
	}
	if _, ok := uac.mutation.ID(); !ok {
		v := userachievement.DefaultID()
		uac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAchievementCreate) check() error {
	if _, ok := uac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserAchievement.created_at"`)}
	}
	if _, ok := uac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserAchievement.updated_at"`)}
	}
	if _, ok := uac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserAchievement.user_id"`)}
	}
	if _, ok := uac.mutation.AchievementID(); !ok {
		return &ValidationError{Name: "achievement_id", err: errors.New(`ent: missing required field "UserAchievement.achievement_id"`)}
	}
	if _, ok := uac.mutation.UnlockedAt(); !ok {
		return &ValidationError{Name: "unlocked_at", err: errors.New(`ent: missing required field "UserAchievement.unlocked_at"`)}
	}
	if len(uac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserAchievement.user"`)}
	}
	if len(uac.mutation.AchievementIDs()) == 0 {
		return &ValidationError{Name: "achievement", err: errors.New(`ent: missing required edge "UserAchievement.achievement"`)}
	}
	return nil
}

func (uac *UserAchievementCreate) sqlSave(ctx context.Context) (*UserAchievement, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UserAchievementCreate) createSpec() (*UserAchievement, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAchievement{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(userachievement.Table, sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID))
	)
	if id, ok := uac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uac.mutation.CreatedAt(); ok {
		_spec.SetField(userachievement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uac.mutation.UpdatedAt(); ok {
		_spec.SetField(userachievement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uac.mutation.UnlockedAt(); ok {
		_spec.SetField(userachievement.FieldUnlockedAt, field.TypeTime, value)
		_node.UnlockedAt = value
	}
	if value, ok := uac.mutation.ProgressData(); ok {
		_spec.SetField(userachievement.FieldProgressData, field.TypeJSON, value)
		_node.ProgressData = value
	}
	if nodes := uac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userachievement.UserTable,
			Columns: []string{userachievement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.mutation.AchievementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userachievement.AchievementTable,
			Columns: []string{userachievement.AchievementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(achievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AchievementID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserAchievementCreateBulk is the builder for creating many UserAchievement entities in bulk.
type UserAchievementCreateBulk struct {
	config
	err      error
	builders []*UserAchievementCreate
}

// Save creates the UserAchievement entities in the database.
func (uacb *UserAchievementCreateBulk) Save(ctx context.Context) ([]*UserAchievement, error) {
	if uacb.err != nil {
		return nil, uacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserAchievement, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAchievementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserAchievementCreateBulk) SaveX(ctx context.Context) []*UserAchievement {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserAchievementCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserAchievementCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}
