// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/music"
	"github.com/witchs-lounge_backend/ent/predicate"
	"github.com/witchs-lounge_backend/ent/record"
	"github.com/witchs-lounge_backend/ent/stage"
)

// StageUpdate is the builder for updating Stage entities.
type StageUpdate struct {
	config
	hooks    []Hook
	mutation *StageMutation
}

// Where appends a list predicates to the StageUpdate builder.
func (su *StageUpdate) Where(ps ...predicate.Stage) *StageUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetMusicID sets the "music_id" field.
func (su *StageUpdate) SetMusicID(u uuid.UUID) *StageUpdate {
	su.mutation.SetMusicID(u)
	return su
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (su *StageUpdate) SetNillableMusicID(u *uuid.UUID) *StageUpdate {
	if u != nil {
		su.SetMusicID(*u)
	}
	return su
}

// SetLevelName sets the "level_name" field.
func (su *StageUpdate) SetLevelName(s string) *StageUpdate {
	su.mutation.SetLevelName(s)
	return su
}

// SetNillableLevelName sets the "level_name" field if the given value is not nil.
func (su *StageUpdate) SetNillableLevelName(s *string) *StageUpdate {
	if s != nil {
		su.SetLevelName(*s)
	}
	return su
}

// SetLevelAddress sets the "level_address" field.
func (su *StageUpdate) SetLevelAddress(s string) *StageUpdate {
	su.mutation.SetLevelAddress(s)
	return su
}

// SetNillableLevelAddress sets the "level_address" field if the given value is not nil.
func (su *StageUpdate) SetNillableLevelAddress(s *string) *StageUpdate {
	if s != nil {
		su.SetLevelAddress(*s)
	}
	return su
}

// SetJacketAddress sets the "jacket_address" field.
func (su *StageUpdate) SetJacketAddress(s string) *StageUpdate {
	su.mutation.SetJacketAddress(s)
	return su
}

// SetNillableJacketAddress sets the "jacket_address" field if the given value is not nil.
func (su *StageUpdate) SetNillableJacketAddress(s *string) *StageUpdate {
	if s != nil {
		su.SetJacketAddress(*s)
	}
	return su
}

// SetMusic sets the "music" edge to the Music entity.
func (su *StageUpdate) SetMusic(m *Music) *StageUpdate {
	return su.SetMusicID(m.ID)
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (su *StageUpdate) AddRecordIDs(ids ...uuid.UUID) *StageUpdate {
	su.mutation.AddRecordIDs(ids...)
	return su
}

// AddRecords adds the "records" edges to the Record entity.
func (su *StageUpdate) AddRecords(r ...*Record) *StageUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRecordIDs(ids...)
}

// Mutation returns the StageMutation object of the builder.
func (su *StageUpdate) Mutation() *StageMutation {
	return su.mutation
}

// ClearMusic clears the "music" edge to the Music entity.
func (su *StageUpdate) ClearMusic() *StageUpdate {
	su.mutation.ClearMusic()
	return su
}

// ClearRecords clears all "records" edges to the Record entity.
func (su *StageUpdate) ClearRecords() *StageUpdate {
	su.mutation.ClearRecords()
	return su
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (su *StageUpdate) RemoveRecordIDs(ids ...uuid.UUID) *StageUpdate {
	su.mutation.RemoveRecordIDs(ids...)
	return su
}

// RemoveRecords removes "records" edges to Record entities.
func (su *StageUpdate) RemoveRecords(r ...*Record) *StageUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StageUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StageUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StageUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StageUpdate) check() error {
	if v, ok := su.mutation.LevelName(); ok {
		if err := stage.LevelNameValidator(v); err != nil {
			return &ValidationError{Name: "level_name", err: fmt.Errorf(`ent: validator failed for field "Stage.level_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.LevelAddress(); ok {
		if err := stage.LevelAddressValidator(v); err != nil {
			return &ValidationError{Name: "level_address", err: fmt.Errorf(`ent: validator failed for field "Stage.level_address": %w`, err)}
		}
	}
	if v, ok := su.mutation.JacketAddress(); ok {
		if err := stage.JacketAddressValidator(v); err != nil {
			return &ValidationError{Name: "jacket_address", err: fmt.Errorf(`ent: validator failed for field "Stage.jacket_address": %w`, err)}
		}
	}
	if su.mutation.MusicCleared() && len(su.mutation.MusicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stage.music"`)
	}
	return nil
}

func (su *StageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stage.Table, stage.Columns, sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.LevelName(); ok {
		_spec.SetField(stage.FieldLevelName, field.TypeString, value)
	}
	if value, ok := su.mutation.LevelAddress(); ok {
		_spec.SetField(stage.FieldLevelAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.JacketAddress(); ok {
		_spec.SetField(stage.FieldJacketAddress, field.TypeString, value)
	}
	if su.mutation.MusicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.MusicTable,
			Columns: []string{stage.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MusicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.MusicTable,
			Columns: []string{stage.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.RecordsTable,
			Columns: []string{stage.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !su.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.RecordsTable,
			Columns: []string{stage.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.RecordsTable,
			Columns: []string{stage.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StageUpdateOne is the builder for updating a single Stage entity.
type StageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StageMutation
}

// SetMusicID sets the "music_id" field.
func (suo *StageUpdateOne) SetMusicID(u uuid.UUID) *StageUpdateOne {
	suo.mutation.SetMusicID(u)
	return suo
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (suo *StageUpdateOne) SetNillableMusicID(u *uuid.UUID) *StageUpdateOne {
	if u != nil {
		suo.SetMusicID(*u)
	}
	return suo
}

// SetLevelName sets the "level_name" field.
func (suo *StageUpdateOne) SetLevelName(s string) *StageUpdateOne {
	suo.mutation.SetLevelName(s)
	return suo
}

// SetNillableLevelName sets the "level_name" field if the given value is not nil.
func (suo *StageUpdateOne) SetNillableLevelName(s *string) *StageUpdateOne {
	if s != nil {
		suo.SetLevelName(*s)
	}
	return suo
}

// SetLevelAddress sets the "level_address" field.
func (suo *StageUpdateOne) SetLevelAddress(s string) *StageUpdateOne {
	suo.mutation.SetLevelAddress(s)
	return suo
}

// SetNillableLevelAddress sets the "level_address" field if the given value is not nil.
func (suo *StageUpdateOne) SetNillableLevelAddress(s *string) *StageUpdateOne {
	if s != nil {
		suo.SetLevelAddress(*s)
	}
	return suo
}

// SetJacketAddress sets the "jacket_address" field.
func (suo *StageUpdateOne) SetJacketAddress(s string) *StageUpdateOne {
	suo.mutation.SetJacketAddress(s)
	return suo
}

// SetNillableJacketAddress sets the "jacket_address" field if the given value is not nil.
func (suo *StageUpdateOne) SetNillableJacketAddress(s *string) *StageUpdateOne {
	if s != nil {
		suo.SetJacketAddress(*s)
	}
	return suo
}

// SetMusic sets the "music" edge to the Music entity.
func (suo *StageUpdateOne) SetMusic(m *Music) *StageUpdateOne {
	return suo.SetMusicID(m.ID)
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (suo *StageUpdateOne) AddRecordIDs(ids ...uuid.UUID) *StageUpdateOne {
	suo.mutation.AddRecordIDs(ids...)
	return suo
}

// AddRecords adds the "records" edges to the Record entity.
func (suo *StageUpdateOne) AddRecords(r ...*Record) *StageUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRecordIDs(ids...)
}

// Mutation returns the StageMutation object of the builder.
func (suo *StageUpdateOne) Mutation() *StageMutation {
	return suo.mutation
}

// ClearMusic clears the "music" edge to the Music entity.
func (suo *StageUpdateOne) ClearMusic() *StageUpdateOne {
	suo.mutation.ClearMusic()
	return suo
}

// ClearRecords clears all "records" edges to the Record entity.
func (suo *StageUpdateOne) ClearRecords() *StageUpdateOne {
	suo.mutation.ClearRecords()
	return suo
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (suo *StageUpdateOne) RemoveRecordIDs(ids ...uuid.UUID) *StageUpdateOne {
	suo.mutation.RemoveRecordIDs(ids...)
	return suo
}

// RemoveRecords removes "records" edges to Record entities.
func (suo *StageUpdateOne) RemoveRecords(r ...*Record) *StageUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRecordIDs(ids...)
}

// Where appends a list predicates to the StageUpdate builder.
func (suo *StageUpdateOne) Where(ps ...predicate.Stage) *StageUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StageUpdateOne) Select(field string, fields ...string) *StageUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stage entity.
func (suo *StageUpdateOne) Save(ctx context.Context) (*Stage, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StageUpdateOne) SaveX(ctx context.Context) *Stage {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StageUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StageUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StageUpdateOne) check() error {
	if v, ok := suo.mutation.LevelName(); ok {
		if err := stage.LevelNameValidator(v); err != nil {
			return &ValidationError{Name: "level_name", err: fmt.Errorf(`ent: validator failed for field "Stage.level_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.LevelAddress(); ok {
		if err := stage.LevelAddressValidator(v); err != nil {
			return &ValidationError{Name: "level_address", err: fmt.Errorf(`ent: validator failed for field "Stage.level_address": %w`, err)}
		}
	}
	if v, ok := suo.mutation.JacketAddress(); ok {
		if err := stage.JacketAddressValidator(v); err != nil {
			return &ValidationError{Name: "jacket_address", err: fmt.Errorf(`ent: validator failed for field "Stage.jacket_address": %w`, err)}
		}
	}
	if suo.mutation.MusicCleared() && len(suo.mutation.MusicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stage.music"`)
	}
	return nil
}

func (suo *StageUpdateOne) sqlSave(ctx context.Context) (_node *Stage, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stage.Table, stage.Columns, sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stage.FieldID)
		for _, f := range fields {
			if !stage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.LevelName(); ok {
		_spec.SetField(stage.FieldLevelName, field.TypeString, value)
	}
	if value, ok := suo.mutation.LevelAddress(); ok {
		_spec.SetField(stage.FieldLevelAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.JacketAddress(); ok {
		_spec.SetField(stage.FieldJacketAddress, field.TypeString, value)
	}
	if suo.mutation.MusicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.MusicTable,
			Columns: []string{stage.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MusicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.MusicTable,
			Columns: []string{stage.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.RecordsTable,
			Columns: []string{stage.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !suo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.RecordsTable,
			Columns: []string{stage.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.RecordsTable,
			Columns: []string{stage.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stage{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
