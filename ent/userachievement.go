// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/achievement"
	"github.com/witchs-lounge_backend/ent/user"
	"github.com/witchs-lounge_backend/ent/userachievement"
)

// UserAchievement is the model entity for the UserAchievement schema.
type UserAchievement struct {
	config `json:"-"`
	// ID of the ent.
	// Global custom UUID ID
	ID uuid.UUID `json:"id,omitempty"`
	// Created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Updated time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 유저 ID
	UserID uuid.UUID `json:"user_id,omitempty"`
	// 업적 ID
	AchievementID uuid.UUID `json:"achievement_id,omitempty"`
	// 업적 달성 시간
	UnlockedAt time.Time `json:"unlocked_at,omitempty"`
	// 진행도 데이터
	ProgressData map[string]interface{} `json:"progress_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAchievementQuery when eager-loading is set.
	Edges        UserAchievementEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserAchievementEdges holds the relations/edges for other nodes in the graph.
type UserAchievementEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Achievement holds the value of the achievement edge.
	Achievement *Achievement `json:"achievement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAchievementEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AchievementOrErr returns the Achievement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAchievementEdges) AchievementOrErr() (*Achievement, error) {
	if e.Achievement != nil {
		return e.Achievement, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: achievement.Label}
	}
	return nil, &NotLoadedError{edge: "achievement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAchievement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userachievement.FieldProgressData:
			values[i] = new([]byte)
		case userachievement.FieldCreatedAt, userachievement.FieldUpdatedAt, userachievement.FieldUnlockedAt:
			values[i] = new(sql.NullTime)
		case userachievement.FieldID, userachievement.FieldUserID, userachievement.FieldAchievementID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAchievement fields.
func (ua *UserAchievement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userachievement.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ua.ID = *value
			}
		case userachievement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ua.CreatedAt = value.Time
			}
		case userachievement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ua.UpdatedAt = value.Time
			}
		case userachievement.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ua.UserID = *value
			}
		case userachievement.FieldAchievementID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field achievement_id", values[i])
			} else if value != nil {
				ua.AchievementID = *value
			}
		case userachievement.FieldUnlockedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field unlocked_at", values[i])
			} else if value.Valid {
				ua.UnlockedAt = value.Time
			}
		case userachievement.FieldProgressData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field progress_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ua.ProgressData); err != nil {
					return fmt.Errorf("unmarshal field progress_data: %w", err)
				}
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAchievement.
// This includes values selected through modifiers, order, etc.
func (ua *UserAchievement) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserAchievement entity.
func (ua *UserAchievement) QueryUser() *UserQuery {
	return NewUserAchievementClient(ua.config).QueryUser(ua)
}

// QueryAchievement queries the "achievement" edge of the UserAchievement entity.
func (ua *UserAchievement) QueryAchievement() *AchievementQuery {
	return NewUserAchievementClient(ua.config).QueryAchievement(ua)
}

// Update returns a builder for updating this UserAchievement.
// Note that you need to call UserAchievement.Unwrap() before calling this method if this UserAchievement
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserAchievement) Update() *UserAchievementUpdateOne {
	return NewUserAchievementClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UserAchievement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UserAchievement) Unwrap() *UserAchievement {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAchievement is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserAchievement) String() string {
	var builder strings.Builder
	builder.WriteString("UserAchievement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ua.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ua.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.UserID))
	builder.WriteString(", ")
	builder.WriteString("achievement_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.AchievementID))
	builder.WriteString(", ")
	builder.WriteString("unlocked_at=")
	builder.WriteString(ua.UnlockedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("progress_data=")
	builder.WriteString(fmt.Sprintf("%v", ua.ProgressData))
	builder.WriteByte(')')
	return builder.String()
}

// UserAchievements is a parsable slice of UserAchievement.
type UserAchievements []*UserAchievement
