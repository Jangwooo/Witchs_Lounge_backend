// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// PlatformUserID applies equality check predicate on the "platform_user_id" field. It's identical to PlatformUserIDEQ.
func PlatformUserID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformUserID, v))
}

// PlatformEmail applies equality check predicate on the "platform_email" field. It's identical to PlatformEmailEQ.
func PlatformEmail(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformEmail, v))
}

// PlatformAvatarURL applies equality check predicate on the "platform_avatar_url" field. It's identical to PlatformAvatarURLEQ.
func PlatformAvatarURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformAvatarURL, v))
}

// PlatformDisplayName applies equality check predicate on the "platform_display_name" field. It's identical to PlatformDisplayNameEQ.
func PlatformDisplayName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformDisplayName, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLanguage, v))
}

// IsVerified applies equality check predicate on the "is_verified" field. It's identical to IsVerifiedEQ.
func IsVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsVerified, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisplayName, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLevel, v))
}

// Exp applies equality check predicate on the "exp" field. It's identical to ExpEQ.
func Exp(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExp, v))
}

// Coin applies equality check predicate on the "coin" field. It's identical to CoinEQ.
func Coin(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCoin, v))
}

// Gem applies equality check predicate on the "gem" field. It's identical to GemEQ.
func Gem(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGem, v))
}

// IsBanned applies equality check predicate on the "is_banned" field. It's identical to IsBannedEQ.
func IsBanned(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsBanned, v))
}

// BannedUntil applies equality check predicate on the "banned_until" field. It's identical to BannedUntilEQ.
func BannedUntil(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBannedUntil, v))
}

// BanReason applies equality check predicate on the "ban_reason" field. It's identical to BanReasonEQ.
func BanReason(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBanReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// PlatformTypeEQ applies the EQ predicate on the "platform_type" field.
func PlatformTypeEQ(v PlatformType) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformType, v))
}

// PlatformTypeNEQ applies the NEQ predicate on the "platform_type" field.
func PlatformTypeNEQ(v PlatformType) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPlatformType, v))
}

// PlatformTypeIn applies the In predicate on the "platform_type" field.
func PlatformTypeIn(vs ...PlatformType) predicate.User {
	return predicate.User(sql.FieldIn(FieldPlatformType, vs...))
}

// PlatformTypeNotIn applies the NotIn predicate on the "platform_type" field.
func PlatformTypeNotIn(vs ...PlatformType) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPlatformType, vs...))
}

// PlatformUserIDEQ applies the EQ predicate on the "platform_user_id" field.
func PlatformUserIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformUserID, v))
}

// PlatformUserIDNEQ applies the NEQ predicate on the "platform_user_id" field.
func PlatformUserIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPlatformUserID, v))
}

// PlatformUserIDIn applies the In predicate on the "platform_user_id" field.
func PlatformUserIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPlatformUserID, vs...))
}

// PlatformUserIDNotIn applies the NotIn predicate on the "platform_user_id" field.
func PlatformUserIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPlatformUserID, vs...))
}

// PlatformUserIDGT applies the GT predicate on the "platform_user_id" field.
func PlatformUserIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPlatformUserID, v))
}

// PlatformUserIDGTE applies the GTE predicate on the "platform_user_id" field.
func PlatformUserIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPlatformUserID, v))
}

// PlatformUserIDLT applies the LT predicate on the "platform_user_id" field.
func PlatformUserIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPlatformUserID, v))
}

// PlatformUserIDLTE applies the LTE predicate on the "platform_user_id" field.
func PlatformUserIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPlatformUserID, v))
}

// PlatformUserIDContains applies the Contains predicate on the "platform_user_id" field.
func PlatformUserIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPlatformUserID, v))
}

// PlatformUserIDHasPrefix applies the HasPrefix predicate on the "platform_user_id" field.
func PlatformUserIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPlatformUserID, v))
}

// PlatformUserIDHasSuffix applies the HasSuffix predicate on the "platform_user_id" field.
func PlatformUserIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPlatformUserID, v))
}

// PlatformUserIDEqualFold applies the EqualFold predicate on the "platform_user_id" field.
func PlatformUserIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPlatformUserID, v))
}

// PlatformUserIDContainsFold applies the ContainsFold predicate on the "platform_user_id" field.
func PlatformUserIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPlatformUserID, v))
}

// PlatformEmailEQ applies the EQ predicate on the "platform_email" field.
func PlatformEmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformEmail, v))
}

// PlatformEmailNEQ applies the NEQ predicate on the "platform_email" field.
func PlatformEmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPlatformEmail, v))
}

// PlatformEmailIn applies the In predicate on the "platform_email" field.
func PlatformEmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPlatformEmail, vs...))
}

// PlatformEmailNotIn applies the NotIn predicate on the "platform_email" field.
func PlatformEmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPlatformEmail, vs...))
}

// PlatformEmailGT applies the GT predicate on the "platform_email" field.
func PlatformEmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPlatformEmail, v))
}

// PlatformEmailGTE applies the GTE predicate on the "platform_email" field.
func PlatformEmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPlatformEmail, v))
}

// PlatformEmailLT applies the LT predicate on the "platform_email" field.
func PlatformEmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPlatformEmail, v))
}

// PlatformEmailLTE applies the LTE predicate on the "platform_email" field.
func PlatformEmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPlatformEmail, v))
}

// PlatformEmailContains applies the Contains predicate on the "platform_email" field.
func PlatformEmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPlatformEmail, v))
}

// PlatformEmailHasPrefix applies the HasPrefix predicate on the "platform_email" field.
func PlatformEmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPlatformEmail, v))
}

// PlatformEmailHasSuffix applies the HasSuffix predicate on the "platform_email" field.
func PlatformEmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPlatformEmail, v))
}

// PlatformEmailIsNil applies the IsNil predicate on the "platform_email" field.
func PlatformEmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPlatformEmail))
}

// PlatformEmailNotNil applies the NotNil predicate on the "platform_email" field.
func PlatformEmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPlatformEmail))
}

// PlatformEmailEqualFold applies the EqualFold predicate on the "platform_email" field.
func PlatformEmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPlatformEmail, v))
}

// PlatformEmailContainsFold applies the ContainsFold predicate on the "platform_email" field.
func PlatformEmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPlatformEmail, v))
}

// PlatformAvatarURLEQ applies the EQ predicate on the "platform_avatar_url" field.
func PlatformAvatarURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLNEQ applies the NEQ predicate on the "platform_avatar_url" field.
func PlatformAvatarURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLIn applies the In predicate on the "platform_avatar_url" field.
func PlatformAvatarURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPlatformAvatarURL, vs...))
}

// PlatformAvatarURLNotIn applies the NotIn predicate on the "platform_avatar_url" field.
func PlatformAvatarURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPlatformAvatarURL, vs...))
}

// PlatformAvatarURLGT applies the GT predicate on the "platform_avatar_url" field.
func PlatformAvatarURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLGTE applies the GTE predicate on the "platform_avatar_url" field.
func PlatformAvatarURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLLT applies the LT predicate on the "platform_avatar_url" field.
func PlatformAvatarURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLLTE applies the LTE predicate on the "platform_avatar_url" field.
func PlatformAvatarURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLContains applies the Contains predicate on the "platform_avatar_url" field.
func PlatformAvatarURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLHasPrefix applies the HasPrefix predicate on the "platform_avatar_url" field.
func PlatformAvatarURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLHasSuffix applies the HasSuffix predicate on the "platform_avatar_url" field.
func PlatformAvatarURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLIsNil applies the IsNil predicate on the "platform_avatar_url" field.
func PlatformAvatarURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPlatformAvatarURL))
}

// PlatformAvatarURLNotNil applies the NotNil predicate on the "platform_avatar_url" field.
func PlatformAvatarURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPlatformAvatarURL))
}

// PlatformAvatarURLEqualFold applies the EqualFold predicate on the "platform_avatar_url" field.
func PlatformAvatarURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPlatformAvatarURL, v))
}

// PlatformAvatarURLContainsFold applies the ContainsFold predicate on the "platform_avatar_url" field.
func PlatformAvatarURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPlatformAvatarURL, v))
}

// PlatformDisplayNameEQ applies the EQ predicate on the "platform_display_name" field.
func PlatformDisplayNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameNEQ applies the NEQ predicate on the "platform_display_name" field.
func PlatformDisplayNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameIn applies the In predicate on the "platform_display_name" field.
func PlatformDisplayNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPlatformDisplayName, vs...))
}

// PlatformDisplayNameNotIn applies the NotIn predicate on the "platform_display_name" field.
func PlatformDisplayNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPlatformDisplayName, vs...))
}

// PlatformDisplayNameGT applies the GT predicate on the "platform_display_name" field.
func PlatformDisplayNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameGTE applies the GTE predicate on the "platform_display_name" field.
func PlatformDisplayNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameLT applies the LT predicate on the "platform_display_name" field.
func PlatformDisplayNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameLTE applies the LTE predicate on the "platform_display_name" field.
func PlatformDisplayNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameContains applies the Contains predicate on the "platform_display_name" field.
func PlatformDisplayNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameHasPrefix applies the HasPrefix predicate on the "platform_display_name" field.
func PlatformDisplayNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameHasSuffix applies the HasSuffix predicate on the "platform_display_name" field.
func PlatformDisplayNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameIsNil applies the IsNil predicate on the "platform_display_name" field.
func PlatformDisplayNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPlatformDisplayName))
}

// PlatformDisplayNameNotNil applies the NotNil predicate on the "platform_display_name" field.
func PlatformDisplayNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPlatformDisplayName))
}

// PlatformDisplayNameEqualFold applies the EqualFold predicate on the "platform_display_name" field.
func PlatformDisplayNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPlatformDisplayName, v))
}

// PlatformDisplayNameContainsFold applies the ContainsFold predicate on the "platform_display_name" field.
func PlatformDisplayNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPlatformDisplayName, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLanguage, v))
}

// PlatformDataIsNil applies the IsNil predicate on the "platform_data" field.
func PlatformDataIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPlatformData))
}

// PlatformDataNotNil applies the NotNil predicate on the "platform_data" field.
func PlatformDataNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPlatformData))
}

// IsVerifiedEQ applies the EQ predicate on the "is_verified" field.
func IsVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsVerified, v))
}

// IsVerifiedNEQ applies the NEQ predicate on the "is_verified" field.
func IsVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsVerified, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickname, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDisplayName, v))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginAt, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLevel, v))
}

// ExpEQ applies the EQ predicate on the "exp" field.
func ExpEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExp, v))
}

// ExpNEQ applies the NEQ predicate on the "exp" field.
func ExpNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldExp, v))
}

// ExpIn applies the In predicate on the "exp" field.
func ExpIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldExp, vs...))
}

// ExpNotIn applies the NotIn predicate on the "exp" field.
func ExpNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldExp, vs...))
}

// ExpGT applies the GT predicate on the "exp" field.
func ExpGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldExp, v))
}

// ExpGTE applies the GTE predicate on the "exp" field.
func ExpGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldExp, v))
}

// ExpLT applies the LT predicate on the "exp" field.
func ExpLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldExp, v))
}

// ExpLTE applies the LTE predicate on the "exp" field.
func ExpLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldExp, v))
}

// CoinEQ applies the EQ predicate on the "coin" field.
func CoinEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCoin, v))
}

// CoinNEQ applies the NEQ predicate on the "coin" field.
func CoinNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCoin, v))
}

// CoinIn applies the In predicate on the "coin" field.
func CoinIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldCoin, vs...))
}

// CoinNotIn applies the NotIn predicate on the "coin" field.
func CoinNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCoin, vs...))
}

// CoinGT applies the GT predicate on the "coin" field.
func CoinGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldCoin, v))
}

// CoinGTE applies the GTE predicate on the "coin" field.
func CoinGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCoin, v))
}

// CoinLT applies the LT predicate on the "coin" field.
func CoinLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldCoin, v))
}

// CoinLTE applies the LTE predicate on the "coin" field.
func CoinLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCoin, v))
}

// GemEQ applies the EQ predicate on the "gem" field.
func GemEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGem, v))
}

// GemNEQ applies the NEQ predicate on the "gem" field.
func GemNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGem, v))
}

// GemIn applies the In predicate on the "gem" field.
func GemIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldGem, vs...))
}

// GemNotIn applies the NotIn predicate on the "gem" field.
func GemNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGem, vs...))
}

// GemGT applies the GT predicate on the "gem" field.
func GemGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldGem, v))
}

// GemGTE applies the GTE predicate on the "gem" field.
func GemGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGem, v))
}

// GemLT applies the LT predicate on the "gem" field.
func GemLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldGem, v))
}

// GemLTE applies the LTE predicate on the "gem" field.
func GemLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGem, v))
}

// IsBannedEQ applies the EQ predicate on the "is_banned" field.
func IsBannedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsBanned, v))
}

// IsBannedNEQ applies the NEQ predicate on the "is_banned" field.
func IsBannedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsBanned, v))
}

// BannedUntilEQ applies the EQ predicate on the "banned_until" field.
func BannedUntilEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBannedUntil, v))
}

// BannedUntilNEQ applies the NEQ predicate on the "banned_until" field.
func BannedUntilNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBannedUntil, v))
}

// BannedUntilIn applies the In predicate on the "banned_until" field.
func BannedUntilIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldBannedUntil, vs...))
}

// BannedUntilNotIn applies the NotIn predicate on the "banned_until" field.
func BannedUntilNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBannedUntil, vs...))
}

// BannedUntilGT applies the GT predicate on the "banned_until" field.
func BannedUntilGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldBannedUntil, v))
}

// BannedUntilGTE applies the GTE predicate on the "banned_until" field.
func BannedUntilGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBannedUntil, v))
}

// BannedUntilLT applies the LT predicate on the "banned_until" field.
func BannedUntilLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldBannedUntil, v))
}

// BannedUntilLTE applies the LTE predicate on the "banned_until" field.
func BannedUntilLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBannedUntil, v))
}

// BannedUntilIsNil applies the IsNil predicate on the "banned_until" field.
func BannedUntilIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBannedUntil))
}

// BannedUntilNotNil applies the NotNil predicate on the "banned_until" field.
func BannedUntilNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBannedUntil))
}

// BanReasonEQ applies the EQ predicate on the "ban_reason" field.
func BanReasonEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBanReason, v))
}

// BanReasonNEQ applies the NEQ predicate on the "ban_reason" field.
func BanReasonNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBanReason, v))
}

// BanReasonIn applies the In predicate on the "ban_reason" field.
func BanReasonIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBanReason, vs...))
}

// BanReasonNotIn applies the NotIn predicate on the "ban_reason" field.
func BanReasonNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBanReason, vs...))
}

// BanReasonGT applies the GT predicate on the "ban_reason" field.
func BanReasonGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBanReason, v))
}

// BanReasonGTE applies the GTE predicate on the "ban_reason" field.
func BanReasonGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBanReason, v))
}

// BanReasonLT applies the LT predicate on the "ban_reason" field.
func BanReasonLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBanReason, v))
}

// BanReasonLTE applies the LTE predicate on the "ban_reason" field.
func BanReasonLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBanReason, v))
}

// BanReasonContains applies the Contains predicate on the "ban_reason" field.
func BanReasonContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBanReason, v))
}

// BanReasonHasPrefix applies the HasPrefix predicate on the "ban_reason" field.
func BanReasonHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBanReason, v))
}

// BanReasonHasSuffix applies the HasSuffix predicate on the "ban_reason" field.
func BanReasonHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBanReason, v))
}

// BanReasonIsNil applies the IsNil predicate on the "ban_reason" field.
func BanReasonIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBanReason))
}

// BanReasonNotNil applies the NotNil predicate on the "ban_reason" field.
func BanReasonNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBanReason))
}

// BanReasonEqualFold applies the EqualFold predicate on the "ban_reason" field.
func BanReasonEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBanReason, v))
}

// BanReasonContainsFold applies the ContainsFold predicate on the "ban_reason" field.
func BanReasonContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBanReason, v))
}

// HasPurchasedProducts applies the HasEdge predicate on the "purchased_products" edge.
func HasPurchasedProducts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PurchasedProductsTable, PurchasedProductsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPurchasedProductsWith applies the HasEdge predicate on the "purchased_products" edge with a given conditions (other predicates).
func HasPurchasedProductsWith(preds ...predicate.Product) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPurchasedProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecords applies the HasEdge predicate on the "records" edge.
func HasRecords() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordsWith applies the HasEdge predicate on the "records" edge with a given conditions (other predicates).
func HasRecordsWith(preds ...predicate.Record) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserAchievements applies the HasEdge predicate on the "user_achievements" edge.
func HasUserAchievements() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserAchievementsTable, UserAchievementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAchievementsWith applies the HasEdge predicate on the "user_achievements" edge with a given conditions (other predicates).
func HasUserAchievementsWith(preds ...predicate.UserAchievement) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserAchievementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserPurchases applies the HasEdge predicate on the "user_purchases" edge.
func HasUserPurchases() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserPurchasesTable, UserPurchasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserPurchasesWith applies the HasEdge predicate on the "user_purchases" edge with a given conditions (other predicates).
func HasUserPurchasesWith(preds ...predicate.UserPurchase) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserPurchasesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
