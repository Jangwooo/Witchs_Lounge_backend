// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// SteamID applies equality check predicate on the "steam_id" field. It's identical to SteamIDEQ.
func SteamID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSteamID, v))
}

// SteamAvatarURL applies equality check predicate on the "steam_avatar_url" field. It's identical to SteamAvatarURLEQ.
func SteamAvatarURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSteamAvatarURL, v))
}

// SteamDefaultLanguage applies equality check predicate on the "steam_default_language" field. It's identical to SteamDefaultLanguageEQ.
func SteamDefaultLanguage(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSteamDefaultLanguage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickname, v))
}

// SteamIDEQ applies the EQ predicate on the "steam_id" field.
func SteamIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSteamID, v))
}

// SteamIDNEQ applies the NEQ predicate on the "steam_id" field.
func SteamIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSteamID, v))
}

// SteamIDIn applies the In predicate on the "steam_id" field.
func SteamIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSteamID, vs...))
}

// SteamIDNotIn applies the NotIn predicate on the "steam_id" field.
func SteamIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSteamID, vs...))
}

// SteamIDGT applies the GT predicate on the "steam_id" field.
func SteamIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSteamID, v))
}

// SteamIDGTE applies the GTE predicate on the "steam_id" field.
func SteamIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSteamID, v))
}

// SteamIDLT applies the LT predicate on the "steam_id" field.
func SteamIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSteamID, v))
}

// SteamIDLTE applies the LTE predicate on the "steam_id" field.
func SteamIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSteamID, v))
}

// SteamIDContains applies the Contains predicate on the "steam_id" field.
func SteamIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSteamID, v))
}

// SteamIDHasPrefix applies the HasPrefix predicate on the "steam_id" field.
func SteamIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSteamID, v))
}

// SteamIDHasSuffix applies the HasSuffix predicate on the "steam_id" field.
func SteamIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSteamID, v))
}

// SteamIDEqualFold applies the EqualFold predicate on the "steam_id" field.
func SteamIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSteamID, v))
}

// SteamIDContainsFold applies the ContainsFold predicate on the "steam_id" field.
func SteamIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSteamID, v))
}

// SteamAvatarURLEQ applies the EQ predicate on the "steam_avatar_url" field.
func SteamAvatarURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSteamAvatarURL, v))
}

// SteamAvatarURLNEQ applies the NEQ predicate on the "steam_avatar_url" field.
func SteamAvatarURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSteamAvatarURL, v))
}

// SteamAvatarURLIn applies the In predicate on the "steam_avatar_url" field.
func SteamAvatarURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSteamAvatarURL, vs...))
}

// SteamAvatarURLNotIn applies the NotIn predicate on the "steam_avatar_url" field.
func SteamAvatarURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSteamAvatarURL, vs...))
}

// SteamAvatarURLGT applies the GT predicate on the "steam_avatar_url" field.
func SteamAvatarURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSteamAvatarURL, v))
}

// SteamAvatarURLGTE applies the GTE predicate on the "steam_avatar_url" field.
func SteamAvatarURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSteamAvatarURL, v))
}

// SteamAvatarURLLT applies the LT predicate on the "steam_avatar_url" field.
func SteamAvatarURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSteamAvatarURL, v))
}

// SteamAvatarURLLTE applies the LTE predicate on the "steam_avatar_url" field.
func SteamAvatarURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSteamAvatarURL, v))
}

// SteamAvatarURLContains applies the Contains predicate on the "steam_avatar_url" field.
func SteamAvatarURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSteamAvatarURL, v))
}

// SteamAvatarURLHasPrefix applies the HasPrefix predicate on the "steam_avatar_url" field.
func SteamAvatarURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSteamAvatarURL, v))
}

// SteamAvatarURLHasSuffix applies the HasSuffix predicate on the "steam_avatar_url" field.
func SteamAvatarURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSteamAvatarURL, v))
}

// SteamAvatarURLIsNil applies the IsNil predicate on the "steam_avatar_url" field.
func SteamAvatarURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldSteamAvatarURL))
}

// SteamAvatarURLNotNil applies the NotNil predicate on the "steam_avatar_url" field.
func SteamAvatarURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldSteamAvatarURL))
}

// SteamAvatarURLEqualFold applies the EqualFold predicate on the "steam_avatar_url" field.
func SteamAvatarURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSteamAvatarURL, v))
}

// SteamAvatarURLContainsFold applies the ContainsFold predicate on the "steam_avatar_url" field.
func SteamAvatarURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSteamAvatarURL, v))
}

// SteamDefaultLanguageEQ applies the EQ predicate on the "steam_default_language" field.
func SteamDefaultLanguageEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageNEQ applies the NEQ predicate on the "steam_default_language" field.
func SteamDefaultLanguageNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageIn applies the In predicate on the "steam_default_language" field.
func SteamDefaultLanguageIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSteamDefaultLanguage, vs...))
}

// SteamDefaultLanguageNotIn applies the NotIn predicate on the "steam_default_language" field.
func SteamDefaultLanguageNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSteamDefaultLanguage, vs...))
}

// SteamDefaultLanguageGT applies the GT predicate on the "steam_default_language" field.
func SteamDefaultLanguageGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageGTE applies the GTE predicate on the "steam_default_language" field.
func SteamDefaultLanguageGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageLT applies the LT predicate on the "steam_default_language" field.
func SteamDefaultLanguageLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageLTE applies the LTE predicate on the "steam_default_language" field.
func SteamDefaultLanguageLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageContains applies the Contains predicate on the "steam_default_language" field.
func SteamDefaultLanguageContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageHasPrefix applies the HasPrefix predicate on the "steam_default_language" field.
func SteamDefaultLanguageHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageHasSuffix applies the HasSuffix predicate on the "steam_default_language" field.
func SteamDefaultLanguageHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageEqualFold applies the EqualFold predicate on the "steam_default_language" field.
func SteamDefaultLanguageEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSteamDefaultLanguage, v))
}

// SteamDefaultLanguageContainsFold applies the ContainsFold predicate on the "steam_default_language" field.
func SteamDefaultLanguageContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSteamDefaultLanguage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
