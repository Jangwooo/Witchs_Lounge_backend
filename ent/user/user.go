// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldSteamID holds the string denoting the steam_id field in the database.
	FieldSteamID = "steam_id"
	// FieldSteamAvatarURL holds the string denoting the steam_avatar_url field in the database.
	FieldSteamAvatarURL = "steam_avatar_url"
	// FieldSteamDefaultLanguage holds the string denoting the steam_default_language field in the database.
	FieldSteamDefaultLanguage = "steam_default_language"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldCustomizeData holds the string denoting the customize_data field in the database.
	FieldCustomizeData = "customize_data"
	// FieldSaveData holds the string denoting the save_data field in the database.
	FieldSaveData = "save_data"
	// EdgePurchasedProducts holds the string denoting the purchased_products edge name in mutations.
	EdgePurchasedProducts = "purchased_products"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// EdgeUserPurchases holds the string denoting the user_purchases edge name in mutations.
	EdgeUserPurchases = "user_purchases"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PurchasedProductsTable is the table that holds the purchased_products relation/edge. The primary key declared below.
	PurchasedProductsTable = "user_purchases"
	// PurchasedProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	PurchasedProductsInverseTable = "products"
	// RecordsTable is the table that holds the records relation/edge.
	RecordsTable = "records"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
	// RecordsColumn is the table column denoting the records relation/edge.
	RecordsColumn = "user_id"
	// UserPurchasesTable is the table that holds the user_purchases relation/edge.
	UserPurchasesTable = "user_purchases"
	// UserPurchasesInverseTable is the table name for the UserPurchase entity.
	// It exists in this package in order to avoid circular dependency with the "userpurchase" package.
	UserPurchasesInverseTable = "user_purchases"
	// UserPurchasesColumn is the table column denoting the user_purchases relation/edge.
	UserPurchasesColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldNickname,
	FieldSteamID,
	FieldSteamAvatarURL,
	FieldSteamDefaultLanguage,
	FieldLastLoginAt,
	FieldCustomizeData,
	FieldSaveData,
}

var (
	// PurchasedProductsPrimaryKey and PurchasedProductsColumn2 are the table columns denoting the
	// primary key for the purchased_products relation (M2M).
	PurchasedProductsPrimaryKey = []string{"user_id", "product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSteamDefaultLanguage holds the default value on creation for the "steam_default_language" field.
	DefaultSteamDefaultLanguage string
	// DefaultLastLoginAt holds the default value on creation for the "last_login_at" field.
	DefaultLastLoginAt func() time.Time
	// DefaultCustomizeData holds the default value on creation for the "customize_data" field.
	DefaultCustomizeData string
	// DefaultSaveData holds the default value on creation for the "save_data" field.
	DefaultSaveData string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// BySteamID orders the results by the steam_id field.
func BySteamID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSteamID, opts...).ToFunc()
}

// BySteamAvatarURL orders the results by the steam_avatar_url field.
func BySteamAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSteamAvatarURL, opts...).ToFunc()
}

// BySteamDefaultLanguage orders the results by the steam_default_language field.
func BySteamDefaultLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSteamDefaultLanguage, opts...).ToFunc()
}

// ByLastLoginAt orders the results by the last_login_at field.
func ByLastLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginAt, opts...).ToFunc()
}

// ByCustomizeData orders the results by the customize_data field.
func ByCustomizeData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomizeData, opts...).ToFunc()
}

// BySaveData orders the results by the save_data field.
func BySaveData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSaveData, opts...).ToFunc()
}

// ByPurchasedProductsCount orders the results by purchased_products count.
func ByPurchasedProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPurchasedProductsStep(), opts...)
	}
}

// ByPurchasedProducts orders the results by purchased_products terms.
func ByPurchasedProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPurchasedProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserPurchasesCount orders the results by user_purchases count.
func ByUserPurchasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserPurchasesStep(), opts...)
	}
}

// ByUserPurchases orders the results by user_purchases terms.
func ByUserPurchases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserPurchasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPurchasedProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PurchasedProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PurchasedProductsTable, PurchasedProductsPrimaryKey...),
	)
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
	)
}
func newUserPurchasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserPurchasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserPurchasesTable, UserPurchasesColumn),
	)
}
