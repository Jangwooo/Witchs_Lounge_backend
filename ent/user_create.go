// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/product"
	"github.com/witchs-lounge_backend/ent/record"
	"github.com/witchs-lounge_backend/ent/user"
	"github.com/witchs-lounge_backend/ent/userachievement"
	"github.com/witchs-lounge_backend/ent/userpurchase"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetPlatformType sets the "platform_type" field.
func (uc *UserCreate) SetPlatformType(ut user.PlatformType) *UserCreate {
	uc.mutation.SetPlatformType(ut)
	return uc
}

// SetPlatformUserID sets the "platform_user_id" field.
func (uc *UserCreate) SetPlatformUserID(s string) *UserCreate {
	uc.mutation.SetPlatformUserID(s)
	return uc
}

// SetPlatformEmail sets the "platform_email" field.
func (uc *UserCreate) SetPlatformEmail(s string) *UserCreate {
	uc.mutation.SetPlatformEmail(s)
	return uc
}

// SetNillablePlatformEmail sets the "platform_email" field if the given value is not nil.
func (uc *UserCreate) SetNillablePlatformEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetPlatformEmail(*s)
	}
	return uc
}

// SetPlatformAvatarURL sets the "platform_avatar_url" field.
func (uc *UserCreate) SetPlatformAvatarURL(s string) *UserCreate {
	uc.mutation.SetPlatformAvatarURL(s)
	return uc
}

// SetNillablePlatformAvatarURL sets the "platform_avatar_url" field if the given value is not nil.
func (uc *UserCreate) SetNillablePlatformAvatarURL(s *string) *UserCreate {
	if s != nil {
		uc.SetPlatformAvatarURL(*s)
	}
	return uc
}

// SetPlatformDisplayName sets the "platform_display_name" field.
func (uc *UserCreate) SetPlatformDisplayName(s string) *UserCreate {
	uc.mutation.SetPlatformDisplayName(s)
	return uc
}

// SetNillablePlatformDisplayName sets the "platform_display_name" field if the given value is not nil.
func (uc *UserCreate) SetNillablePlatformDisplayName(s *string) *UserCreate {
	if s != nil {
		uc.SetPlatformDisplayName(*s)
	}
	return uc
}

// SetLanguage sets the "language" field.
func (uc *UserCreate) SetLanguage(s string) *UserCreate {
	uc.mutation.SetLanguage(s)
	return uc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uc *UserCreate) SetNillableLanguage(s *string) *UserCreate {
	if s != nil {
		uc.SetLanguage(*s)
	}
	return uc
}

// SetPlatformData sets the "platform_data" field.
func (uc *UserCreate) SetPlatformData(m map[string]interface{}) *UserCreate {
	uc.mutation.SetPlatformData(m)
	return uc
}

// SetIsVerified sets the "is_verified" field.
func (uc *UserCreate) SetIsVerified(b bool) *UserCreate {
	uc.mutation.SetIsVerified(b)
	return uc
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsVerified(*b)
	}
	return uc
}

// SetNickname sets the "nickname" field.
func (uc *UserCreate) SetNickname(s string) *UserCreate {
	uc.mutation.SetNickname(s)
	return uc
}

// SetDisplayName sets the "display_name" field.
func (uc *UserCreate) SetDisplayName(s string) *UserCreate {
	uc.mutation.SetDisplayName(s)
	return uc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableDisplayName(s *string) *UserCreate {
	if s != nil {
		uc.SetDisplayName(*s)
	}
	return uc
}

// SetLastLoginAt sets the "last_login_at" field.
func (uc *UserCreate) SetLastLoginAt(t time.Time) *UserCreate {
	uc.mutation.SetLastLoginAt(t)
	return uc
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLoginAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLoginAt(*t)
	}
	return uc
}

// SetLevel sets the "level" field.
func (uc *UserCreate) SetLevel(i int) *UserCreate {
	uc.mutation.SetLevel(i)
	return uc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (uc *UserCreate) SetNillableLevel(i *int) *UserCreate {
	if i != nil {
		uc.SetLevel(*i)
	}
	return uc
}

// SetExp sets the "exp" field.
func (uc *UserCreate) SetExp(i int) *UserCreate {
	uc.mutation.SetExp(i)
	return uc
}

// SetNillableExp sets the "exp" field if the given value is not nil.
func (uc *UserCreate) SetNillableExp(i *int) *UserCreate {
	if i != nil {
		uc.SetExp(*i)
	}
	return uc
}

// SetCoin sets the "coin" field.
func (uc *UserCreate) SetCoin(i int) *UserCreate {
	uc.mutation.SetCoin(i)
	return uc
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (uc *UserCreate) SetNillableCoin(i *int) *UserCreate {
	if i != nil {
		uc.SetCoin(*i)
	}
	return uc
}

// SetGem sets the "gem" field.
func (uc *UserCreate) SetGem(i int) *UserCreate {
	uc.mutation.SetGem(i)
	return uc
}

// SetNillableGem sets the "gem" field if the given value is not nil.
func (uc *UserCreate) SetNillableGem(i *int) *UserCreate {
	if i != nil {
		uc.SetGem(*i)
	}
	return uc
}

// SetSettings sets the "settings" field.
func (uc *UserCreate) SetSettings(m map[string]interface{}) *UserCreate {
	uc.mutation.SetSettings(m)
	return uc
}

// SetCustomizeData sets the "customize_data" field.
func (uc *UserCreate) SetCustomizeData(m map[string]interface{}) *UserCreate {
	uc.mutation.SetCustomizeData(m)
	return uc
}

// SetSaveData sets the "save_data" field.
func (uc *UserCreate) SetSaveData(m map[string]interface{}) *UserCreate {
	uc.mutation.SetSaveData(m)
	return uc
}

// SetIsBanned sets the "is_banned" field.
func (uc *UserCreate) SetIsBanned(b bool) *UserCreate {
	uc.mutation.SetIsBanned(b)
	return uc
}

// SetNillableIsBanned sets the "is_banned" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsBanned(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsBanned(*b)
	}
	return uc
}

// SetBannedUntil sets the "banned_until" field.
func (uc *UserCreate) SetBannedUntil(t time.Time) *UserCreate {
	uc.mutation.SetBannedUntil(t)
	return uc
}

// SetNillableBannedUntil sets the "banned_until" field if the given value is not nil.
func (uc *UserCreate) SetNillableBannedUntil(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetBannedUntil(*t)
	}
	return uc
}

// SetBanReason sets the "ban_reason" field.
func (uc *UserCreate) SetBanReason(s string) *UserCreate {
	uc.mutation.SetBanReason(s)
	return uc
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (uc *UserCreate) SetNillableBanReason(s *string) *UserCreate {
	if s != nil {
		uc.SetBanReason(*s)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// AddPurchasedProductIDs adds the "purchased_products" edge to the Product entity by IDs.
func (uc *UserCreate) AddPurchasedProductIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddPurchasedProductIDs(ids...)
	return uc
}

// AddPurchasedProducts adds the "purchased_products" edges to the Product entity.
func (uc *UserCreate) AddPurchasedProducts(p ...*Product) *UserCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPurchasedProductIDs(ids...)
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (uc *UserCreate) AddRecordIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddRecordIDs(ids...)
	return uc
}

// AddRecords adds the "records" edges to the Record entity.
func (uc *UserCreate) AddRecords(r ...*Record) *UserCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRecordIDs(ids...)
}

// AddUserAchievementIDs adds the "user_achievements" edge to the UserAchievement entity by IDs.
func (uc *UserCreate) AddUserAchievementIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddUserAchievementIDs(ids...)
	return uc
}

// AddUserAchievements adds the "user_achievements" edges to the UserAchievement entity.
func (uc *UserCreate) AddUserAchievements(u ...*UserAchievement) *UserCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserAchievementIDs(ids...)
}

// AddUserPurchaseIDs adds the "user_purchases" edge to the UserPurchase entity by IDs.
func (uc *UserCreate) AddUserPurchaseIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddUserPurchaseIDs(ids...)
	return uc
}

// AddUserPurchases adds the "user_purchases" edges to the UserPurchase entity.
func (uc *UserCreate) AddUserPurchases(u ...*UserPurchase) *UserCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserPurchaseIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Language(); !ok {
		v := user.DefaultLanguage
		uc.mutation.SetLanguage(v)
	}
	if _, ok := uc.mutation.IsVerified(); !ok {
		v := user.DefaultIsVerified
		uc.mutation.SetIsVerified(v)
	}
	if _, ok := uc.mutation.LastLoginAt(); !ok {
		v := user.DefaultLastLoginAt()
		uc.mutation.SetLastLoginAt(v)
	}
	if _, ok := uc.mutation.Level(); !ok {
		v := user.DefaultLevel
		uc.mutation.SetLevel(v)
	}
	if _, ok := uc.mutation.Exp(); !ok {
		v := user.DefaultExp
		uc.mutation.SetExp(v)
	}
	if _, ok := uc.mutation.Coin(); !ok {
		v := user.DefaultCoin
		uc.mutation.SetCoin(v)
	}
	if _, ok := uc.mutation.Gem(); !ok {
		v := user.DefaultGem
		uc.mutation.SetGem(v)
	}
	if _, ok := uc.mutation.Settings(); !ok {
		v := user.DefaultSettings
		uc.mutation.SetSettings(v)
	}
	if _, ok := uc.mutation.CustomizeData(); !ok {
		v := user.DefaultCustomizeData
		uc.mutation.SetCustomizeData(v)
	}
	if _, ok := uc.mutation.SaveData(); !ok {
		v := user.DefaultSaveData
		uc.mutation.SetSaveData(v)
	}
	if _, ok := uc.mutation.IsBanned(); !ok {
		v := user.DefaultIsBanned
		uc.mutation.SetIsBanned(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.PlatformType(); !ok {
		return &ValidationError{Name: "platform_type", err: errors.New(`ent: missing required field "User.platform_type"`)}
	}
	if v, ok := uc.mutation.PlatformType(); ok {
		if err := user.PlatformTypeValidator(v); err != nil {
			return &ValidationError{Name: "platform_type", err: fmt.Errorf(`ent: validator failed for field "User.platform_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.PlatformUserID(); !ok {
		return &ValidationError{Name: "platform_user_id", err: errors.New(`ent: missing required field "User.platform_user_id"`)}
	}
	if _, ok := uc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "User.language"`)}
	}
	if _, ok := uc.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "User.is_verified"`)}
	}
	if _, ok := uc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "User.nickname"`)}
	}
	if _, ok := uc.mutation.LastLoginAt(); !ok {
		return &ValidationError{Name: "last_login_at", err: errors.New(`ent: missing required field "User.last_login_at"`)}
	}
	if _, ok := uc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "User.level"`)}
	}
	if _, ok := uc.mutation.Exp(); !ok {
		return &ValidationError{Name: "exp", err: errors.New(`ent: missing required field "User.exp"`)}
	}
	if _, ok := uc.mutation.Coin(); !ok {
		return &ValidationError{Name: "coin", err: errors.New(`ent: missing required field "User.coin"`)}
	}
	if _, ok := uc.mutation.Gem(); !ok {
		return &ValidationError{Name: "gem", err: errors.New(`ent: missing required field "User.gem"`)}
	}
	if _, ok := uc.mutation.Settings(); !ok {
		return &ValidationError{Name: "settings", err: errors.New(`ent: missing required field "User.settings"`)}
	}
	if _, ok := uc.mutation.CustomizeData(); !ok {
		return &ValidationError{Name: "customize_data", err: errors.New(`ent: missing required field "User.customize_data"`)}
	}
	if _, ok := uc.mutation.SaveData(); !ok {
		return &ValidationError{Name: "save_data", err: errors.New(`ent: missing required field "User.save_data"`)}
	}
	if _, ok := uc.mutation.IsBanned(); !ok {
		return &ValidationError{Name: "is_banned", err: errors.New(`ent: missing required field "User.is_banned"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.PlatformType(); ok {
		_spec.SetField(user.FieldPlatformType, field.TypeEnum, value)
		_node.PlatformType = value
	}
	if value, ok := uc.mutation.PlatformUserID(); ok {
		_spec.SetField(user.FieldPlatformUserID, field.TypeString, value)
		_node.PlatformUserID = value
	}
	if value, ok := uc.mutation.PlatformEmail(); ok {
		_spec.SetField(user.FieldPlatformEmail, field.TypeString, value)
		_node.PlatformEmail = value
	}
	if value, ok := uc.mutation.PlatformAvatarURL(); ok {
		_spec.SetField(user.FieldPlatformAvatarURL, field.TypeString, value)
		_node.PlatformAvatarURL = value
	}
	if value, ok := uc.mutation.PlatformDisplayName(); ok {
		_spec.SetField(user.FieldPlatformDisplayName, field.TypeString, value)
		_node.PlatformDisplayName = value
	}
	if value, ok := uc.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := uc.mutation.PlatformData(); ok {
		_spec.SetField(user.FieldPlatformData, field.TypeJSON, value)
		_node.PlatformData = value
	}
	if value, ok := uc.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := uc.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := uc.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := uc.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = value
	}
	if value, ok := uc.mutation.Level(); ok {
		_spec.SetField(user.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := uc.mutation.Exp(); ok {
		_spec.SetField(user.FieldExp, field.TypeInt, value)
		_node.Exp = value
	}
	if value, ok := uc.mutation.Coin(); ok {
		_spec.SetField(user.FieldCoin, field.TypeInt, value)
		_node.Coin = value
	}
	if value, ok := uc.mutation.Gem(); ok {
		_spec.SetField(user.FieldGem, field.TypeInt, value)
		_node.Gem = value
	}
	if value, ok := uc.mutation.Settings(); ok {
		_spec.SetField(user.FieldSettings, field.TypeJSON, value)
		_node.Settings = value
	}
	if value, ok := uc.mutation.CustomizeData(); ok {
		_spec.SetField(user.FieldCustomizeData, field.TypeJSON, value)
		_node.CustomizeData = value
	}
	if value, ok := uc.mutation.SaveData(); ok {
		_spec.SetField(user.FieldSaveData, field.TypeJSON, value)
		_node.SaveData = value
	}
	if value, ok := uc.mutation.IsBanned(); ok {
		_spec.SetField(user.FieldIsBanned, field.TypeBool, value)
		_node.IsBanned = value
	}
	if value, ok := uc.mutation.BannedUntil(); ok {
		_spec.SetField(user.FieldBannedUntil, field.TypeTime, value)
		_node.BannedUntil = &value
	}
	if value, ok := uc.mutation.BanReason(); ok {
		_spec.SetField(user.FieldBanReason, field.TypeString, value)
		_node.BanReason = value
	}
	if nodes := uc.mutation.PurchasedProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PurchasedProductsTable,
			Columns: user.PurchasedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPurchaseCreate{config: uc.config, mutation: newUserPurchaseMutation(uc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecordsTable,
			Columns: []string{user.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserAchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAchievementsTable,
			Columns: []string{user.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPurchasesTable,
			Columns: []string{user.UserPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpurchase.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
