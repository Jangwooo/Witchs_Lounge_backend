// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/character"
	"github.com/witchs-lounge_backend/ent/music"
	"github.com/witchs-lounge_backend/ent/record"
	"github.com/witchs-lounge_backend/ent/stage"
	"github.com/witchs-lounge_backend/ent/user"
)

// RecordCreate is the builder for creating a Record entity.
type RecordCreate struct {
	config
	mutation *RecordMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RecordCreate) SetCreatedAt(t time.Time) *RecordCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RecordCreate) SetNillableCreatedAt(t *time.Time) *RecordCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RecordCreate) SetUpdatedAt(t time.Time) *RecordCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RecordCreate) SetNillableUpdatedAt(t *time.Time) *RecordCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *RecordCreate) SetUserID(u uuid.UUID) *RecordCreate {
	rc.mutation.SetUserID(u)
	return rc
}

// SetMusicID sets the "music_id" field.
func (rc *RecordCreate) SetMusicID(u uuid.UUID) *RecordCreate {
	rc.mutation.SetMusicID(u)
	return rc
}

// SetStageID sets the "stage_id" field.
func (rc *RecordCreate) SetStageID(u uuid.UUID) *RecordCreate {
	rc.mutation.SetStageID(u)
	return rc
}

// SetCharacterID sets the "character_id" field.
func (rc *RecordCreate) SetCharacterID(u uuid.UUID) *RecordCreate {
	rc.mutation.SetCharacterID(u)
	return rc
}

// SetScore sets the "score" field.
func (rc *RecordCreate) SetScore(i int) *RecordCreate {
	rc.mutation.SetScore(i)
	return rc
}

// SetPerfectCount sets the "perfect_count" field.
func (rc *RecordCreate) SetPerfectCount(i int) *RecordCreate {
	rc.mutation.SetPerfectCount(i)
	return rc
}

// SetNillablePerfectCount sets the "perfect_count" field if the given value is not nil.
func (rc *RecordCreate) SetNillablePerfectCount(i *int) *RecordCreate {
	if i != nil {
		rc.SetPerfectCount(*i)
	}
	return rc
}

// SetGoodCount sets the "good_count" field.
func (rc *RecordCreate) SetGoodCount(i int) *RecordCreate {
	rc.mutation.SetGoodCount(i)
	return rc
}

// SetNillableGoodCount sets the "good_count" field if the given value is not nil.
func (rc *RecordCreate) SetNillableGoodCount(i *int) *RecordCreate {
	if i != nil {
		rc.SetGoodCount(*i)
	}
	return rc
}

// SetBadCount sets the "bad_count" field.
func (rc *RecordCreate) SetBadCount(i int) *RecordCreate {
	rc.mutation.SetBadCount(i)
	return rc
}

// SetNillableBadCount sets the "bad_count" field if the given value is not nil.
func (rc *RecordCreate) SetNillableBadCount(i *int) *RecordCreate {
	if i != nil {
		rc.SetBadCount(*i)
	}
	return rc
}

// SetMissCount sets the "miss_count" field.
func (rc *RecordCreate) SetMissCount(i int) *RecordCreate {
	rc.mutation.SetMissCount(i)
	return rc
}

// SetNillableMissCount sets the "miss_count" field if the given value is not nil.
func (rc *RecordCreate) SetNillableMissCount(i *int) *RecordCreate {
	if i != nil {
		rc.SetMissCount(*i)
	}
	return rc
}

// SetMaxCombo sets the "max_combo" field.
func (rc *RecordCreate) SetMaxCombo(i int) *RecordCreate {
	rc.mutation.SetMaxCombo(i)
	return rc
}

// SetNillableMaxCombo sets the "max_combo" field if the given value is not nil.
func (rc *RecordCreate) SetNillableMaxCombo(i *int) *RecordCreate {
	if i != nil {
		rc.SetMaxCombo(*i)
	}
	return rc
}

// SetAccuracy sets the "accuracy" field.
func (rc *RecordCreate) SetAccuracy(f float64) *RecordCreate {
	rc.mutation.SetAccuracy(f)
	return rc
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (rc *RecordCreate) SetNillableAccuracy(f *float64) *RecordCreate {
	if f != nil {
		rc.SetAccuracy(*f)
	}
	return rc
}

// SetRank sets the "rank" field.
func (rc *RecordCreate) SetRank(r record.Rank) *RecordCreate {
	rc.mutation.SetRank(r)
	return rc
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (rc *RecordCreate) SetNillableRank(r *record.Rank) *RecordCreate {
	if r != nil {
		rc.SetRank(*r)
	}
	return rc
}

// SetIsFullCombo sets the "is_full_combo" field.
func (rc *RecordCreate) SetIsFullCombo(b bool) *RecordCreate {
	rc.mutation.SetIsFullCombo(b)
	return rc
}

// SetNillableIsFullCombo sets the "is_full_combo" field if the given value is not nil.
func (rc *RecordCreate) SetNillableIsFullCombo(b *bool) *RecordCreate {
	if b != nil {
		rc.SetIsFullCombo(*b)
	}
	return rc
}

// SetIsPerfectPlay sets the "is_perfect_play" field.
func (rc *RecordCreate) SetIsPerfectPlay(b bool) *RecordCreate {
	rc.mutation.SetIsPerfectPlay(b)
	return rc
}

// SetNillableIsPerfectPlay sets the "is_perfect_play" field if the given value is not nil.
func (rc *RecordCreate) SetNillableIsPerfectPlay(b *bool) *RecordCreate {
	if b != nil {
		rc.SetIsPerfectPlay(*b)
	}
	return rc
}

// SetPlayedAt sets the "played_at" field.
func (rc *RecordCreate) SetPlayedAt(t time.Time) *RecordCreate {
	rc.mutation.SetPlayedAt(t)
	return rc
}

// SetNillablePlayedAt sets the "played_at" field if the given value is not nil.
func (rc *RecordCreate) SetNillablePlayedAt(t *time.Time) *RecordCreate {
	if t != nil {
		rc.SetPlayedAt(*t)
	}
	return rc
}

// SetPlayDuration sets the "play_duration" field.
func (rc *RecordCreate) SetPlayDuration(i int) *RecordCreate {
	rc.mutation.SetPlayDuration(i)
	return rc
}

// SetNillablePlayDuration sets the "play_duration" field if the given value is not nil.
func (rc *RecordCreate) SetNillablePlayDuration(i *int) *RecordCreate {
	if i != nil {
		rc.SetPlayDuration(*i)
	}
	return rc
}

// SetAdditionalInfo sets the "additional_info" field.
func (rc *RecordCreate) SetAdditionalInfo(m map[string]interface{}) *RecordCreate {
	rc.mutation.SetAdditionalInfo(m)
	return rc
}

// SetIsValid sets the "is_valid" field.
func (rc *RecordCreate) SetIsValid(b bool) *RecordCreate {
	rc.mutation.SetIsValid(b)
	return rc
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (rc *RecordCreate) SetNillableIsValid(b *bool) *RecordCreate {
	if b != nil {
		rc.SetIsValid(*b)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RecordCreate) SetID(u uuid.UUID) *RecordCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RecordCreate) SetNillableID(u *uuid.UUID) *RecordCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *RecordCreate) SetUser(u *User) *RecordCreate {
	return rc.SetUserID(u.ID)
}

// SetMusic sets the "music" edge to the Music entity.
func (rc *RecordCreate) SetMusic(m *Music) *RecordCreate {
	return rc.SetMusicID(m.ID)
}

// SetStage sets the "stage" edge to the Stage entity.
func (rc *RecordCreate) SetStage(s *Stage) *RecordCreate {
	return rc.SetStageID(s.ID)
}

// SetCharacter sets the "character" edge to the Character entity.
func (rc *RecordCreate) SetCharacter(c *Character) *RecordCreate {
	return rc.SetCharacterID(c.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (rc *RecordCreate) Mutation() *RecordMutation {
	return rc.mutation
}

// Save creates the Record in the database.
func (rc *RecordCreate) Save(ctx context.Context) (*Record, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordCreate) SaveX(ctx context.Context) *Record {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecordCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecordCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecordCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := record.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := record.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.PerfectCount(); !ok {
		v := record.DefaultPerfectCount
		rc.mutation.SetPerfectCount(v)
	}
	if _, ok := rc.mutation.GoodCount(); !ok {
		v := record.DefaultGoodCount
		rc.mutation.SetGoodCount(v)
	}
	if _, ok := rc.mutation.BadCount(); !ok {
		v := record.DefaultBadCount
		rc.mutation.SetBadCount(v)
	}
	if _, ok := rc.mutation.MissCount(); !ok {
		v := record.DefaultMissCount
		rc.mutation.SetMissCount(v)
	}
	if _, ok := rc.mutation.MaxCombo(); !ok {
		v := record.DefaultMaxCombo
		rc.mutation.SetMaxCombo(v)
	}
	if _, ok := rc.mutation.Accuracy(); !ok {
		v := record.DefaultAccuracy
		rc.mutation.SetAccuracy(v)
	}
	if _, ok := rc.mutation.IsFullCombo(); !ok {
		v := record.DefaultIsFullCombo
		rc.mutation.SetIsFullCombo(v)
	}
	if _, ok := rc.mutation.IsPerfectPlay(); !ok {
		v := record.DefaultIsPerfectPlay
		rc.mutation.SetIsPerfectPlay(v)
	}
	if _, ok := rc.mutation.PlayedAt(); !ok {
		v := record.DefaultPlayedAt()
		rc.mutation.SetPlayedAt(v)
	}
	if _, ok := rc.mutation.IsValid(); !ok {
		v := record.DefaultIsValid
		rc.mutation.SetIsValid(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := record.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecordCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Record.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Record.updated_at"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Record.user_id"`)}
	}
	if _, ok := rc.mutation.MusicID(); !ok {
		return &ValidationError{Name: "music_id", err: errors.New(`ent: missing required field "Record.music_id"`)}
	}
	if _, ok := rc.mutation.StageID(); !ok {
		return &ValidationError{Name: "stage_id", err: errors.New(`ent: missing required field "Record.stage_id"`)}
	}
	if _, ok := rc.mutation.CharacterID(); !ok {
		return &ValidationError{Name: "character_id", err: errors.New(`ent: missing required field "Record.character_id"`)}
	}
	if _, ok := rc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "Record.score"`)}
	}
	if _, ok := rc.mutation.PerfectCount(); !ok {
		return &ValidationError{Name: "perfect_count", err: errors.New(`ent: missing required field "Record.perfect_count"`)}
	}
	if _, ok := rc.mutation.GoodCount(); !ok {
		return &ValidationError{Name: "good_count", err: errors.New(`ent: missing required field "Record.good_count"`)}
	}
	if _, ok := rc.mutation.BadCount(); !ok {
		return &ValidationError{Name: "bad_count", err: errors.New(`ent: missing required field "Record.bad_count"`)}
	}
	if _, ok := rc.mutation.MissCount(); !ok {
		return &ValidationError{Name: "miss_count", err: errors.New(`ent: missing required field "Record.miss_count"`)}
	}
	if _, ok := rc.mutation.MaxCombo(); !ok {
		return &ValidationError{Name: "max_combo", err: errors.New(`ent: missing required field "Record.max_combo"`)}
	}
	if _, ok := rc.mutation.Accuracy(); !ok {
		return &ValidationError{Name: "accuracy", err: errors.New(`ent: missing required field "Record.accuracy"`)}
	}
	if v, ok := rc.mutation.Rank(); ok {
		if err := record.RankValidator(v); err != nil {
			return &ValidationError{Name: "rank", err: fmt.Errorf(`ent: validator failed for field "Record.rank": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IsFullCombo(); !ok {
		return &ValidationError{Name: "is_full_combo", err: errors.New(`ent: missing required field "Record.is_full_combo"`)}
	}
	if _, ok := rc.mutation.IsPerfectPlay(); !ok {
		return &ValidationError{Name: "is_perfect_play", err: errors.New(`ent: missing required field "Record.is_perfect_play"`)}
	}
	if _, ok := rc.mutation.PlayedAt(); !ok {
		return &ValidationError{Name: "played_at", err: errors.New(`ent: missing required field "Record.played_at"`)}
	}
	if _, ok := rc.mutation.IsValid(); !ok {
		return &ValidationError{Name: "is_valid", err: errors.New(`ent: missing required field "Record.is_valid"`)}
	}
	if len(rc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Record.user"`)}
	}
	if len(rc.mutation.MusicIDs()) == 0 {
		return &ValidationError{Name: "music", err: errors.New(`ent: missing required edge "Record.music"`)}
	}
	if len(rc.mutation.StageIDs()) == 0 {
		return &ValidationError{Name: "stage", err: errors.New(`ent: missing required edge "Record.stage"`)}
	}
	if len(rc.mutation.CharacterIDs()) == 0 {
		return &ValidationError{Name: "character", err: errors.New(`ent: missing required edge "Record.character"`)}
	}
	return nil
}

func (rc *RecordCreate) sqlSave(ctx context.Context) (*Record, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RecordCreate) createSpec() (*Record, *sqlgraph.CreateSpec) {
	var (
		_node = &Record{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(record.Table, sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(record.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(record.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Score(); ok {
		_spec.SetField(record.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if value, ok := rc.mutation.PerfectCount(); ok {
		_spec.SetField(record.FieldPerfectCount, field.TypeInt, value)
		_node.PerfectCount = value
	}
	if value, ok := rc.mutation.GoodCount(); ok {
		_spec.SetField(record.FieldGoodCount, field.TypeInt, value)
		_node.GoodCount = value
	}
	if value, ok := rc.mutation.BadCount(); ok {
		_spec.SetField(record.FieldBadCount, field.TypeInt, value)
		_node.BadCount = value
	}
	if value, ok := rc.mutation.MissCount(); ok {
		_spec.SetField(record.FieldMissCount, field.TypeInt, value)
		_node.MissCount = value
	}
	if value, ok := rc.mutation.MaxCombo(); ok {
		_spec.SetField(record.FieldMaxCombo, field.TypeInt, value)
		_node.MaxCombo = value
	}
	if value, ok := rc.mutation.Accuracy(); ok {
		_spec.SetField(record.FieldAccuracy, field.TypeFloat64, value)
		_node.Accuracy = value
	}
	if value, ok := rc.mutation.Rank(); ok {
		_spec.SetField(record.FieldRank, field.TypeEnum, value)
		_node.Rank = value
	}
	if value, ok := rc.mutation.IsFullCombo(); ok {
		_spec.SetField(record.FieldIsFullCombo, field.TypeBool, value)
		_node.IsFullCombo = value
	}
	if value, ok := rc.mutation.IsPerfectPlay(); ok {
		_spec.SetField(record.FieldIsPerfectPlay, field.TypeBool, value)
		_node.IsPerfectPlay = value
	}
	if value, ok := rc.mutation.PlayedAt(); ok {
		_spec.SetField(record.FieldPlayedAt, field.TypeTime, value)
		_node.PlayedAt = value
	}
	if value, ok := rc.mutation.PlayDuration(); ok {
		_spec.SetField(record.FieldPlayDuration, field.TypeInt, value)
		_node.PlayDuration = value
	}
	if value, ok := rc.mutation.AdditionalInfo(); ok {
		_spec.SetField(record.FieldAdditionalInfo, field.TypeJSON, value)
		_node.AdditionalInfo = value
	}
	if value, ok := rc.mutation.IsValid(); ok {
		_spec.SetField(record.FieldIsValid, field.TypeBool, value)
		_node.IsValid = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.UserTable,
			Columns: []string{record.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.MusicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MusicTable,
			Columns: []string{record.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MusicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.StageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.StageTable,
			Columns: []string{record.StageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.CharacterTable,
			Columns: []string{record.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CharacterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecordCreateBulk is the builder for creating many Record entities in bulk.
type RecordCreateBulk struct {
	config
	err      error
	builders []*RecordCreate
}

// Save creates the Record entities in the database.
func (rcb *RecordCreateBulk) Save(ctx context.Context) ([]*Record, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Record, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecordCreateBulk) SaveX(ctx context.Context) []*Record {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecordCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecordCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
