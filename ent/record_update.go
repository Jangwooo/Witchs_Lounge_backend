// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/character"
	"github.com/witchs-lounge_backend/ent/music"
	"github.com/witchs-lounge_backend/ent/predicate"
	"github.com/witchs-lounge_backend/ent/record"
	"github.com/witchs-lounge_backend/ent/stage"
	"github.com/witchs-lounge_backend/ent/user"
)

// RecordUpdate is the builder for updating Record entities.
type RecordUpdate struct {
	config
	hooks    []Hook
	mutation *RecordMutation
}

// Where appends a list predicates to the RecordUpdate builder.
func (ru *RecordUpdate) Where(ps ...predicate.Record) *RecordUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RecordUpdate) SetUpdatedAt(t time.Time) *RecordUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetUserID sets the "user_id" field.
func (ru *RecordUpdate) SetUserID(u uuid.UUID) *RecordUpdate {
	ru.mutation.SetUserID(u)
	return ru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableUserID(u *uuid.UUID) *RecordUpdate {
	if u != nil {
		ru.SetUserID(*u)
	}
	return ru
}

// SetMusicID sets the "music_id" field.
func (ru *RecordUpdate) SetMusicID(u uuid.UUID) *RecordUpdate {
	ru.mutation.SetMusicID(u)
	return ru
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableMusicID(u *uuid.UUID) *RecordUpdate {
	if u != nil {
		ru.SetMusicID(*u)
	}
	return ru
}

// SetStageID sets the "stage_id" field.
func (ru *RecordUpdate) SetStageID(u uuid.UUID) *RecordUpdate {
	ru.mutation.SetStageID(u)
	return ru
}

// SetNillableStageID sets the "stage_id" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableStageID(u *uuid.UUID) *RecordUpdate {
	if u != nil {
		ru.SetStageID(*u)
	}
	return ru
}

// SetCharacterID sets the "character_id" field.
func (ru *RecordUpdate) SetCharacterID(u uuid.UUID) *RecordUpdate {
	ru.mutation.SetCharacterID(u)
	return ru
}

// SetNillableCharacterID sets the "character_id" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableCharacterID(u *uuid.UUID) *RecordUpdate {
	if u != nil {
		ru.SetCharacterID(*u)
	}
	return ru
}

// SetScore sets the "score" field.
func (ru *RecordUpdate) SetScore(i int) *RecordUpdate {
	ru.mutation.ResetScore()
	ru.mutation.SetScore(i)
	return ru
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableScore(i *int) *RecordUpdate {
	if i != nil {
		ru.SetScore(*i)
	}
	return ru
}

// AddScore adds i to the "score" field.
func (ru *RecordUpdate) AddScore(i int) *RecordUpdate {
	ru.mutation.AddScore(i)
	return ru
}

// SetPerfectCount sets the "perfect_count" field.
func (ru *RecordUpdate) SetPerfectCount(i int) *RecordUpdate {
	ru.mutation.ResetPerfectCount()
	ru.mutation.SetPerfectCount(i)
	return ru
}

// SetNillablePerfectCount sets the "perfect_count" field if the given value is not nil.
func (ru *RecordUpdate) SetNillablePerfectCount(i *int) *RecordUpdate {
	if i != nil {
		ru.SetPerfectCount(*i)
	}
	return ru
}

// AddPerfectCount adds i to the "perfect_count" field.
func (ru *RecordUpdate) AddPerfectCount(i int) *RecordUpdate {
	ru.mutation.AddPerfectCount(i)
	return ru
}

// SetGoodCount sets the "good_count" field.
func (ru *RecordUpdate) SetGoodCount(i int) *RecordUpdate {
	ru.mutation.ResetGoodCount()
	ru.mutation.SetGoodCount(i)
	return ru
}

// SetNillableGoodCount sets the "good_count" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableGoodCount(i *int) *RecordUpdate {
	if i != nil {
		ru.SetGoodCount(*i)
	}
	return ru
}

// AddGoodCount adds i to the "good_count" field.
func (ru *RecordUpdate) AddGoodCount(i int) *RecordUpdate {
	ru.mutation.AddGoodCount(i)
	return ru
}

// SetBadCount sets the "bad_count" field.
func (ru *RecordUpdate) SetBadCount(i int) *RecordUpdate {
	ru.mutation.ResetBadCount()
	ru.mutation.SetBadCount(i)
	return ru
}

// SetNillableBadCount sets the "bad_count" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableBadCount(i *int) *RecordUpdate {
	if i != nil {
		ru.SetBadCount(*i)
	}
	return ru
}

// AddBadCount adds i to the "bad_count" field.
func (ru *RecordUpdate) AddBadCount(i int) *RecordUpdate {
	ru.mutation.AddBadCount(i)
	return ru
}

// SetMissCount sets the "miss_count" field.
func (ru *RecordUpdate) SetMissCount(i int) *RecordUpdate {
	ru.mutation.ResetMissCount()
	ru.mutation.SetMissCount(i)
	return ru
}

// SetNillableMissCount sets the "miss_count" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableMissCount(i *int) *RecordUpdate {
	if i != nil {
		ru.SetMissCount(*i)
	}
	return ru
}

// AddMissCount adds i to the "miss_count" field.
func (ru *RecordUpdate) AddMissCount(i int) *RecordUpdate {
	ru.mutation.AddMissCount(i)
	return ru
}

// SetPlayedAt sets the "played_at" field.
func (ru *RecordUpdate) SetPlayedAt(t time.Time) *RecordUpdate {
	ru.mutation.SetPlayedAt(t)
	return ru
}

// SetNillablePlayedAt sets the "played_at" field if the given value is not nil.
func (ru *RecordUpdate) SetNillablePlayedAt(t *time.Time) *RecordUpdate {
	if t != nil {
		ru.SetPlayedAt(*t)
	}
	return ru
}

// SetAccuracy sets the "accuracy" field.
func (ru *RecordUpdate) SetAccuracy(f float64) *RecordUpdate {
	ru.mutation.ResetAccuracy()
	ru.mutation.SetAccuracy(f)
	return ru
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableAccuracy(f *float64) *RecordUpdate {
	if f != nil {
		ru.SetAccuracy(*f)
	}
	return ru
}

// AddAccuracy adds f to the "accuracy" field.
func (ru *RecordUpdate) AddAccuracy(f float64) *RecordUpdate {
	ru.mutation.AddAccuracy(f)
	return ru
}

// SetAdditionalInfo sets the "additional_info" field.
func (ru *RecordUpdate) SetAdditionalInfo(s string) *RecordUpdate {
	ru.mutation.SetAdditionalInfo(s)
	return ru
}

// SetNillableAdditionalInfo sets the "additional_info" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableAdditionalInfo(s *string) *RecordUpdate {
	if s != nil {
		ru.SetAdditionalInfo(*s)
	}
	return ru
}

// ClearAdditionalInfo clears the value of the "additional_info" field.
func (ru *RecordUpdate) ClearAdditionalInfo() *RecordUpdate {
	ru.mutation.ClearAdditionalInfo()
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *RecordUpdate) SetUser(u *User) *RecordUpdate {
	return ru.SetUserID(u.ID)
}

// SetMusic sets the "music" edge to the Music entity.
func (ru *RecordUpdate) SetMusic(m *Music) *RecordUpdate {
	return ru.SetMusicID(m.ID)
}

// SetStage sets the "stage" edge to the Stage entity.
func (ru *RecordUpdate) SetStage(s *Stage) *RecordUpdate {
	return ru.SetStageID(s.ID)
}

// SetCharacter sets the "character" edge to the Character entity.
func (ru *RecordUpdate) SetCharacter(c *Character) *RecordUpdate {
	return ru.SetCharacterID(c.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (ru *RecordUpdate) Mutation() *RecordMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *RecordUpdate) ClearUser() *RecordUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearMusic clears the "music" edge to the Music entity.
func (ru *RecordUpdate) ClearMusic() *RecordUpdate {
	ru.mutation.ClearMusic()
	return ru
}

// ClearStage clears the "stage" edge to the Stage entity.
func (ru *RecordUpdate) ClearStage() *RecordUpdate {
	ru.mutation.ClearStage()
	return ru
}

// ClearCharacter clears the "character" edge to the Character entity.
func (ru *RecordUpdate) ClearCharacter() *RecordUpdate {
	ru.mutation.ClearCharacter()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecordUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecordUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecordUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RecordUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := record.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RecordUpdate) check() error {
	if ru.mutation.UserCleared() && len(ru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Record.user"`)
	}
	if ru.mutation.MusicCleared() && len(ru.mutation.MusicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Record.music"`)
	}
	if ru.mutation.StageCleared() && len(ru.mutation.StageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Record.stage"`)
	}
	if ru.mutation.CharacterCleared() && len(ru.mutation.CharacterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Record.character"`)
	}
	return nil
}

func (ru *RecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(record.Table, record.Columns, sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(record.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Score(); ok {
		_spec.SetField(record.FieldScore, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedScore(); ok {
		_spec.AddField(record.FieldScore, field.TypeInt, value)
	}
	if value, ok := ru.mutation.PerfectCount(); ok {
		_spec.SetField(record.FieldPerfectCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedPerfectCount(); ok {
		_spec.AddField(record.FieldPerfectCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.GoodCount(); ok {
		_spec.SetField(record.FieldGoodCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedGoodCount(); ok {
		_spec.AddField(record.FieldGoodCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.BadCount(); ok {
		_spec.SetField(record.FieldBadCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedBadCount(); ok {
		_spec.AddField(record.FieldBadCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.MissCount(); ok {
		_spec.SetField(record.FieldMissCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedMissCount(); ok {
		_spec.AddField(record.FieldMissCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.PlayedAt(); ok {
		_spec.SetField(record.FieldPlayedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Accuracy(); ok {
		_spec.SetField(record.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedAccuracy(); ok {
		_spec.AddField(record.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AdditionalInfo(); ok {
		_spec.SetField(record.FieldAdditionalInfo, field.TypeString, value)
	}
	if ru.mutation.AdditionalInfoCleared() {
		_spec.ClearField(record.FieldAdditionalInfo, field.TypeString)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.UserTable,
			Columns: []string{record.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.UserTable,
			Columns: []string{record.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MusicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MusicTable,
			Columns: []string{record.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MusicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MusicTable,
			Columns: []string{record.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.StageTable,
			Columns: []string{record.StageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.StageTable,
			Columns: []string{record.StageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CharacterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.CharacterTable,
			Columns: []string{record.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.CharacterTable,
			Columns: []string{record.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{record.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RecordUpdateOne is the builder for updating a single Record entity.
type RecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecordMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RecordUpdateOne) SetUpdatedAt(t time.Time) *RecordUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetUserID sets the "user_id" field.
func (ruo *RecordUpdateOne) SetUserID(u uuid.UUID) *RecordUpdateOne {
	ruo.mutation.SetUserID(u)
	return ruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableUserID(u *uuid.UUID) *RecordUpdateOne {
	if u != nil {
		ruo.SetUserID(*u)
	}
	return ruo
}

// SetMusicID sets the "music_id" field.
func (ruo *RecordUpdateOne) SetMusicID(u uuid.UUID) *RecordUpdateOne {
	ruo.mutation.SetMusicID(u)
	return ruo
}

// SetNillableMusicID sets the "music_id" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableMusicID(u *uuid.UUID) *RecordUpdateOne {
	if u != nil {
		ruo.SetMusicID(*u)
	}
	return ruo
}

// SetStageID sets the "stage_id" field.
func (ruo *RecordUpdateOne) SetStageID(u uuid.UUID) *RecordUpdateOne {
	ruo.mutation.SetStageID(u)
	return ruo
}

// SetNillableStageID sets the "stage_id" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableStageID(u *uuid.UUID) *RecordUpdateOne {
	if u != nil {
		ruo.SetStageID(*u)
	}
	return ruo
}

// SetCharacterID sets the "character_id" field.
func (ruo *RecordUpdateOne) SetCharacterID(u uuid.UUID) *RecordUpdateOne {
	ruo.mutation.SetCharacterID(u)
	return ruo
}

// SetNillableCharacterID sets the "character_id" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableCharacterID(u *uuid.UUID) *RecordUpdateOne {
	if u != nil {
		ruo.SetCharacterID(*u)
	}
	return ruo
}

// SetScore sets the "score" field.
func (ruo *RecordUpdateOne) SetScore(i int) *RecordUpdateOne {
	ruo.mutation.ResetScore()
	ruo.mutation.SetScore(i)
	return ruo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableScore(i *int) *RecordUpdateOne {
	if i != nil {
		ruo.SetScore(*i)
	}
	return ruo
}

// AddScore adds i to the "score" field.
func (ruo *RecordUpdateOne) AddScore(i int) *RecordUpdateOne {
	ruo.mutation.AddScore(i)
	return ruo
}

// SetPerfectCount sets the "perfect_count" field.
func (ruo *RecordUpdateOne) SetPerfectCount(i int) *RecordUpdateOne {
	ruo.mutation.ResetPerfectCount()
	ruo.mutation.SetPerfectCount(i)
	return ruo
}

// SetNillablePerfectCount sets the "perfect_count" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillablePerfectCount(i *int) *RecordUpdateOne {
	if i != nil {
		ruo.SetPerfectCount(*i)
	}
	return ruo
}

// AddPerfectCount adds i to the "perfect_count" field.
func (ruo *RecordUpdateOne) AddPerfectCount(i int) *RecordUpdateOne {
	ruo.mutation.AddPerfectCount(i)
	return ruo
}

// SetGoodCount sets the "good_count" field.
func (ruo *RecordUpdateOne) SetGoodCount(i int) *RecordUpdateOne {
	ruo.mutation.ResetGoodCount()
	ruo.mutation.SetGoodCount(i)
	return ruo
}

// SetNillableGoodCount sets the "good_count" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableGoodCount(i *int) *RecordUpdateOne {
	if i != nil {
		ruo.SetGoodCount(*i)
	}
	return ruo
}

// AddGoodCount adds i to the "good_count" field.
func (ruo *RecordUpdateOne) AddGoodCount(i int) *RecordUpdateOne {
	ruo.mutation.AddGoodCount(i)
	return ruo
}

// SetBadCount sets the "bad_count" field.
func (ruo *RecordUpdateOne) SetBadCount(i int) *RecordUpdateOne {
	ruo.mutation.ResetBadCount()
	ruo.mutation.SetBadCount(i)
	return ruo
}

// SetNillableBadCount sets the "bad_count" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableBadCount(i *int) *RecordUpdateOne {
	if i != nil {
		ruo.SetBadCount(*i)
	}
	return ruo
}

// AddBadCount adds i to the "bad_count" field.
func (ruo *RecordUpdateOne) AddBadCount(i int) *RecordUpdateOne {
	ruo.mutation.AddBadCount(i)
	return ruo
}

// SetMissCount sets the "miss_count" field.
func (ruo *RecordUpdateOne) SetMissCount(i int) *RecordUpdateOne {
	ruo.mutation.ResetMissCount()
	ruo.mutation.SetMissCount(i)
	return ruo
}

// SetNillableMissCount sets the "miss_count" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableMissCount(i *int) *RecordUpdateOne {
	if i != nil {
		ruo.SetMissCount(*i)
	}
	return ruo
}

// AddMissCount adds i to the "miss_count" field.
func (ruo *RecordUpdateOne) AddMissCount(i int) *RecordUpdateOne {
	ruo.mutation.AddMissCount(i)
	return ruo
}

// SetPlayedAt sets the "played_at" field.
func (ruo *RecordUpdateOne) SetPlayedAt(t time.Time) *RecordUpdateOne {
	ruo.mutation.SetPlayedAt(t)
	return ruo
}

// SetNillablePlayedAt sets the "played_at" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillablePlayedAt(t *time.Time) *RecordUpdateOne {
	if t != nil {
		ruo.SetPlayedAt(*t)
	}
	return ruo
}

// SetAccuracy sets the "accuracy" field.
func (ruo *RecordUpdateOne) SetAccuracy(f float64) *RecordUpdateOne {
	ruo.mutation.ResetAccuracy()
	ruo.mutation.SetAccuracy(f)
	return ruo
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableAccuracy(f *float64) *RecordUpdateOne {
	if f != nil {
		ruo.SetAccuracy(*f)
	}
	return ruo
}

// AddAccuracy adds f to the "accuracy" field.
func (ruo *RecordUpdateOne) AddAccuracy(f float64) *RecordUpdateOne {
	ruo.mutation.AddAccuracy(f)
	return ruo
}

// SetAdditionalInfo sets the "additional_info" field.
func (ruo *RecordUpdateOne) SetAdditionalInfo(s string) *RecordUpdateOne {
	ruo.mutation.SetAdditionalInfo(s)
	return ruo
}

// SetNillableAdditionalInfo sets the "additional_info" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableAdditionalInfo(s *string) *RecordUpdateOne {
	if s != nil {
		ruo.SetAdditionalInfo(*s)
	}
	return ruo
}

// ClearAdditionalInfo clears the value of the "additional_info" field.
func (ruo *RecordUpdateOne) ClearAdditionalInfo() *RecordUpdateOne {
	ruo.mutation.ClearAdditionalInfo()
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *RecordUpdateOne) SetUser(u *User) *RecordUpdateOne {
	return ruo.SetUserID(u.ID)
}

// SetMusic sets the "music" edge to the Music entity.
func (ruo *RecordUpdateOne) SetMusic(m *Music) *RecordUpdateOne {
	return ruo.SetMusicID(m.ID)
}

// SetStage sets the "stage" edge to the Stage entity.
func (ruo *RecordUpdateOne) SetStage(s *Stage) *RecordUpdateOne {
	return ruo.SetStageID(s.ID)
}

// SetCharacter sets the "character" edge to the Character entity.
func (ruo *RecordUpdateOne) SetCharacter(c *Character) *RecordUpdateOne {
	return ruo.SetCharacterID(c.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (ruo *RecordUpdateOne) Mutation() *RecordMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *RecordUpdateOne) ClearUser() *RecordUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearMusic clears the "music" edge to the Music entity.
func (ruo *RecordUpdateOne) ClearMusic() *RecordUpdateOne {
	ruo.mutation.ClearMusic()
	return ruo
}

// ClearStage clears the "stage" edge to the Stage entity.
func (ruo *RecordUpdateOne) ClearStage() *RecordUpdateOne {
	ruo.mutation.ClearStage()
	return ruo
}

// ClearCharacter clears the "character" edge to the Character entity.
func (ruo *RecordUpdateOne) ClearCharacter() *RecordUpdateOne {
	ruo.mutation.ClearCharacter()
	return ruo
}

// Where appends a list predicates to the RecordUpdate builder.
func (ruo *RecordUpdateOne) Where(ps ...predicate.Record) *RecordUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecordUpdateOne) Select(field string, fields ...string) *RecordUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Record entity.
func (ruo *RecordUpdateOne) Save(ctx context.Context) (*Record, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecordUpdateOne) SaveX(ctx context.Context) *Record {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecordUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RecordUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := record.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RecordUpdateOne) check() error {
	if ruo.mutation.UserCleared() && len(ruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Record.user"`)
	}
	if ruo.mutation.MusicCleared() && len(ruo.mutation.MusicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Record.music"`)
	}
	if ruo.mutation.StageCleared() && len(ruo.mutation.StageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Record.stage"`)
	}
	if ruo.mutation.CharacterCleared() && len(ruo.mutation.CharacterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Record.character"`)
	}
	return nil
}

func (ruo *RecordUpdateOne) sqlSave(ctx context.Context) (_node *Record, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(record.Table, record.Columns, sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Record.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, record.FieldID)
		for _, f := range fields {
			if !record.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != record.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(record.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Score(); ok {
		_spec.SetField(record.FieldScore, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedScore(); ok {
		_spec.AddField(record.FieldScore, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.PerfectCount(); ok {
		_spec.SetField(record.FieldPerfectCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedPerfectCount(); ok {
		_spec.AddField(record.FieldPerfectCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.GoodCount(); ok {
		_spec.SetField(record.FieldGoodCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedGoodCount(); ok {
		_spec.AddField(record.FieldGoodCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.BadCount(); ok {
		_spec.SetField(record.FieldBadCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedBadCount(); ok {
		_spec.AddField(record.FieldBadCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.MissCount(); ok {
		_spec.SetField(record.FieldMissCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedMissCount(); ok {
		_spec.AddField(record.FieldMissCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.PlayedAt(); ok {
		_spec.SetField(record.FieldPlayedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Accuracy(); ok {
		_spec.SetField(record.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedAccuracy(); ok {
		_spec.AddField(record.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AdditionalInfo(); ok {
		_spec.SetField(record.FieldAdditionalInfo, field.TypeString, value)
	}
	if ruo.mutation.AdditionalInfoCleared() {
		_spec.ClearField(record.FieldAdditionalInfo, field.TypeString)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.UserTable,
			Columns: []string{record.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.UserTable,
			Columns: []string{record.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MusicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MusicTable,
			Columns: []string{record.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MusicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MusicTable,
			Columns: []string{record.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.StageTable,
			Columns: []string{record.StageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.StageTable,
			Columns: []string{record.StageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CharacterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.CharacterTable,
			Columns: []string{record.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.CharacterTable,
			Columns: []string{record.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Record{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{record.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
