// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/music"
	"github.com/witchs-lounge_backend/ent/record"
	"github.com/witchs-lounge_backend/ent/stage"
)

// MusicCreate is the builder for creating a Music entity.
type MusicCreate struct {
	config
	mutation *MusicMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mc *MusicCreate) SetCreatedAt(t time.Time) *MusicCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MusicCreate) SetNillableCreatedAt(t *time.Time) *MusicCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MusicCreate) SetUpdatedAt(t time.Time) *MusicCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MusicCreate) SetNillableUpdatedAt(t *time.Time) *MusicCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MusicCreate) SetName(s string) *MusicCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetArtist sets the "artist" field.
func (mc *MusicCreate) SetArtist(s string) *MusicCreate {
	mc.mutation.SetArtist(s)
	return mc
}

// SetComposer sets the "composer" field.
func (mc *MusicCreate) SetComposer(s string) *MusicCreate {
	mc.mutation.SetComposer(s)
	return mc
}

// SetNillableComposer sets the "composer" field if the given value is not nil.
func (mc *MusicCreate) SetNillableComposer(s *string) *MusicCreate {
	if s != nil {
		mc.SetComposer(*s)
	}
	return mc
}

// SetMusicSource sets the "music_source" field.
func (mc *MusicCreate) SetMusicSource(s string) *MusicCreate {
	mc.mutation.SetMusicSource(s)
	return mc
}

// SetJacketSource sets the "jacket_source" field.
func (mc *MusicCreate) SetJacketSource(s string) *MusicCreate {
	mc.mutation.SetJacketSource(s)
	return mc
}

// SetDuration sets the "duration" field.
func (mc *MusicCreate) SetDuration(f float64) *MusicCreate {
	mc.mutation.SetDuration(f)
	return mc
}

// SetBpm sets the "bpm" field.
func (mc *MusicCreate) SetBpm(f float64) *MusicCreate {
	mc.mutation.SetBpm(f)
	return mc
}

// SetGenre sets the "genre" field.
func (mc *MusicCreate) SetGenre(s string) *MusicCreate {
	mc.mutation.SetGenre(s)
	return mc
}

// SetNillableGenre sets the "genre" field if the given value is not nil.
func (mc *MusicCreate) SetNillableGenre(s *string) *MusicCreate {
	if s != nil {
		mc.SetGenre(*s)
	}
	return mc
}

// SetDescription sets the "description" field.
func (mc *MusicCreate) SetDescription(s string) *MusicCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *MusicCreate) SetNillableDescription(s *string) *MusicCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetIsFeatured sets the "is_featured" field.
func (mc *MusicCreate) SetIsFeatured(b bool) *MusicCreate {
	mc.mutation.SetIsFeatured(b)
	return mc
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (mc *MusicCreate) SetNillableIsFeatured(b *bool) *MusicCreate {
	if b != nil {
		mc.SetIsFeatured(*b)
	}
	return mc
}

// SetIsFree sets the "is_free" field.
func (mc *MusicCreate) SetIsFree(b bool) *MusicCreate {
	mc.mutation.SetIsFree(b)
	return mc
}

// SetNillableIsFree sets the "is_free" field if the given value is not nil.
func (mc *MusicCreate) SetNillableIsFree(b *bool) *MusicCreate {
	if b != nil {
		mc.SetIsFree(*b)
	}
	return mc
}

// SetUnlockLevel sets the "unlock_level" field.
func (mc *MusicCreate) SetUnlockLevel(i int) *MusicCreate {
	mc.mutation.SetUnlockLevel(i)
	return mc
}

// SetNillableUnlockLevel sets the "unlock_level" field if the given value is not nil.
func (mc *MusicCreate) SetNillableUnlockLevel(i *int) *MusicCreate {
	if i != nil {
		mc.SetUnlockLevel(*i)
	}
	return mc
}

// SetReleaseDate sets the "release_date" field.
func (mc *MusicCreate) SetReleaseDate(t time.Time) *MusicCreate {
	mc.mutation.SetReleaseDate(t)
	return mc
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (mc *MusicCreate) SetNillableReleaseDate(t *time.Time) *MusicCreate {
	if t != nil {
		mc.SetReleaseDate(*t)
	}
	return mc
}

// SetIsActive sets the "is_active" field.
func (mc *MusicCreate) SetIsActive(b bool) *MusicCreate {
	mc.mutation.SetIsActive(b)
	return mc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (mc *MusicCreate) SetNillableIsActive(b *bool) *MusicCreate {
	if b != nil {
		mc.SetIsActive(*b)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MusicCreate) SetID(u uuid.UUID) *MusicCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MusicCreate) SetNillableID(u *uuid.UUID) *MusicCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// AddStageIDs adds the "stages" edge to the Stage entity by IDs.
func (mc *MusicCreate) AddStageIDs(ids ...uuid.UUID) *MusicCreate {
	mc.mutation.AddStageIDs(ids...)
	return mc
}

// AddStages adds the "stages" edges to the Stage entity.
func (mc *MusicCreate) AddStages(s ...*Stage) *MusicCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mc.AddStageIDs(ids...)
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (mc *MusicCreate) AddRecordIDs(ids ...uuid.UUID) *MusicCreate {
	mc.mutation.AddRecordIDs(ids...)
	return mc
}

// AddRecords adds the "records" edges to the Record entity.
func (mc *MusicCreate) AddRecords(r ...*Record) *MusicCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mc.AddRecordIDs(ids...)
}

// Mutation returns the MusicMutation object of the builder.
func (mc *MusicCreate) Mutation() *MusicMutation {
	return mc.mutation
}

// Save creates the Music in the database.
func (mc *MusicCreate) Save(ctx context.Context) (*Music, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MusicCreate) SaveX(ctx context.Context) *Music {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MusicCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MusicCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MusicCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := music.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := music.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.IsFeatured(); !ok {
		v := music.DefaultIsFeatured
		mc.mutation.SetIsFeatured(v)
	}
	if _, ok := mc.mutation.IsFree(); !ok {
		v := music.DefaultIsFree
		mc.mutation.SetIsFree(v)
	}
	if _, ok := mc.mutation.UnlockLevel(); !ok {
		v := music.DefaultUnlockLevel
		mc.mutation.SetUnlockLevel(v)
	}
	if _, ok := mc.mutation.IsActive(); !ok {
		v := music.DefaultIsActive
		mc.mutation.SetIsActive(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := music.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MusicCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Music.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Music.updated_at"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Music.name"`)}
	}
	if _, ok := mc.mutation.Artist(); !ok {
		return &ValidationError{Name: "artist", err: errors.New(`ent: missing required field "Music.artist"`)}
	}
	if _, ok := mc.mutation.MusicSource(); !ok {
		return &ValidationError{Name: "music_source", err: errors.New(`ent: missing required field "Music.music_source"`)}
	}
	if _, ok := mc.mutation.JacketSource(); !ok {
		return &ValidationError{Name: "jacket_source", err: errors.New(`ent: missing required field "Music.jacket_source"`)}
	}
	if _, ok := mc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Music.duration"`)}
	}
	if _, ok := mc.mutation.Bpm(); !ok {
		return &ValidationError{Name: "bpm", err: errors.New(`ent: missing required field "Music.bpm"`)}
	}
	if _, ok := mc.mutation.IsFeatured(); !ok {
		return &ValidationError{Name: "is_featured", err: errors.New(`ent: missing required field "Music.is_featured"`)}
	}
	if _, ok := mc.mutation.IsFree(); !ok {
		return &ValidationError{Name: "is_free", err: errors.New(`ent: missing required field "Music.is_free"`)}
	}
	if _, ok := mc.mutation.UnlockLevel(); !ok {
		return &ValidationError{Name: "unlock_level", err: errors.New(`ent: missing required field "Music.unlock_level"`)}
	}
	if _, ok := mc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Music.is_active"`)}
	}
	return nil
}

func (mc *MusicCreate) sqlSave(ctx context.Context) (*Music, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MusicCreate) createSpec() (*Music, *sqlgraph.CreateSpec) {
	var (
		_node = &Music{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(music.Table, sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(music.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(music.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(music.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Artist(); ok {
		_spec.SetField(music.FieldArtist, field.TypeString, value)
		_node.Artist = value
	}
	if value, ok := mc.mutation.Composer(); ok {
		_spec.SetField(music.FieldComposer, field.TypeString, value)
		_node.Composer = value
	}
	if value, ok := mc.mutation.MusicSource(); ok {
		_spec.SetField(music.FieldMusicSource, field.TypeString, value)
		_node.MusicSource = value
	}
	if value, ok := mc.mutation.JacketSource(); ok {
		_spec.SetField(music.FieldJacketSource, field.TypeString, value)
		_node.JacketSource = value
	}
	if value, ok := mc.mutation.Duration(); ok {
		_spec.SetField(music.FieldDuration, field.TypeFloat64, value)
		_node.Duration = value
	}
	if value, ok := mc.mutation.Bpm(); ok {
		_spec.SetField(music.FieldBpm, field.TypeFloat64, value)
		_node.Bpm = value
	}
	if value, ok := mc.mutation.Genre(); ok {
		_spec.SetField(music.FieldGenre, field.TypeString, value)
		_node.Genre = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(music.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mc.mutation.IsFeatured(); ok {
		_spec.SetField(music.FieldIsFeatured, field.TypeBool, value)
		_node.IsFeatured = value
	}
	if value, ok := mc.mutation.IsFree(); ok {
		_spec.SetField(music.FieldIsFree, field.TypeBool, value)
		_node.IsFree = value
	}
	if value, ok := mc.mutation.UnlockLevel(); ok {
		_spec.SetField(music.FieldUnlockLevel, field.TypeInt, value)
		_node.UnlockLevel = value
	}
	if value, ok := mc.mutation.ReleaseDate(); ok {
		_spec.SetField(music.FieldReleaseDate, field.TypeTime, value)
		_node.ReleaseDate = &value
	}
	if value, ok := mc.mutation.IsActive(); ok {
		_spec.SetField(music.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := mc.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.StagesTable,
			Columns: []string{music.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.RecordsTable,
			Columns: []string{music.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MusicCreateBulk is the builder for creating many Music entities in bulk.
type MusicCreateBulk struct {
	config
	err      error
	builders []*MusicCreate
}

// Save creates the Music entities in the database.
func (mcb *MusicCreateBulk) Save(ctx context.Context) ([]*Music, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Music, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MusicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MusicCreateBulk) SaveX(ctx context.Context) []*Music {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MusicCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MusicCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
