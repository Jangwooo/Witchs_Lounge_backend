// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/achievement"
	"github.com/witchs-lounge_backend/ent/userachievement"
)

// AchievementCreate is the builder for creating a Achievement entity.
type AchievementCreate struct {
	config
	mutation *AchievementMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AchievementCreate) SetCreatedAt(t time.Time) *AchievementCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableCreatedAt(t *time.Time) *AchievementCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AchievementCreate) SetUpdatedAt(t time.Time) *AchievementCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableUpdatedAt(t *time.Time) *AchievementCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AchievementCreate) SetName(s string) *AchievementCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AchievementCreate) SetDescription(s string) *AchievementCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetIconURL sets the "icon_url" field.
func (ac *AchievementCreate) SetIconURL(s string) *AchievementCreate {
	ac.mutation.SetIconURL(s)
	return ac
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableIconURL(s *string) *AchievementCreate {
	if s != nil {
		ac.SetIconURL(*s)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AchievementCreate) SetType(a achievement.Type) *AchievementCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetConditions sets the "conditions" field.
func (ac *AchievementCreate) SetConditions(m map[string]interface{}) *AchievementCreate {
	ac.mutation.SetConditions(m)
	return ac
}

// SetRewards sets the "rewards" field.
func (ac *AchievementCreate) SetRewards(m map[string]interface{}) *AchievementCreate {
	ac.mutation.SetRewards(m)
	return ac
}

// SetPoints sets the "points" field.
func (ac *AchievementCreate) SetPoints(i int) *AchievementCreate {
	ac.mutation.SetPoints(i)
	return ac
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (ac *AchievementCreate) SetNillablePoints(i *int) *AchievementCreate {
	if i != nil {
		ac.SetPoints(*i)
	}
	return ac
}

// SetIsHidden sets the "is_hidden" field.
func (ac *AchievementCreate) SetIsHidden(b bool) *AchievementCreate {
	ac.mutation.SetIsHidden(b)
	return ac
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableIsHidden(b *bool) *AchievementCreate {
	if b != nil {
		ac.SetIsHidden(*b)
	}
	return ac
}

// SetIsActive sets the "is_active" field.
func (ac *AchievementCreate) SetIsActive(b bool) *AchievementCreate {
	ac.mutation.SetIsActive(b)
	return ac
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableIsActive(b *bool) *AchievementCreate {
	if b != nil {
		ac.SetIsActive(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AchievementCreate) SetID(u uuid.UUID) *AchievementCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableID(u *uuid.UUID) *AchievementCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// AddUserAchievementIDs adds the "user_achievements" edge to the UserAchievement entity by IDs.
func (ac *AchievementCreate) AddUserAchievementIDs(ids ...uuid.UUID) *AchievementCreate {
	ac.mutation.AddUserAchievementIDs(ids...)
	return ac
}

// AddUserAchievements adds the "user_achievements" edges to the UserAchievement entity.
func (ac *AchievementCreate) AddUserAchievements(u ...*UserAchievement) *AchievementCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ac.AddUserAchievementIDs(ids...)
}

// Mutation returns the AchievementMutation object of the builder.
func (ac *AchievementCreate) Mutation() *AchievementMutation {
	return ac.mutation
}

// Save creates the Achievement in the database.
func (ac *AchievementCreate) Save(ctx context.Context) (*Achievement, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AchievementCreate) SaveX(ctx context.Context) *Achievement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AchievementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AchievementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AchievementCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := achievement.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := achievement.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Points(); !ok {
		v := achievement.DefaultPoints
		ac.mutation.SetPoints(v)
	}
	if _, ok := ac.mutation.IsHidden(); !ok {
		v := achievement.DefaultIsHidden
		ac.mutation.SetIsHidden(v)
	}
	if _, ok := ac.mutation.IsActive(); !ok {
		v := achievement.DefaultIsActive
		ac.mutation.SetIsActive(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := achievement.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AchievementCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Achievement.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Achievement.updated_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Achievement.name"`)}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Achievement.description"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Achievement.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := achievement.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Achievement.type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Conditions(); !ok {
		return &ValidationError{Name: "conditions", err: errors.New(`ent: missing required field "Achievement.conditions"`)}
	}
	if _, ok := ac.mutation.Rewards(); !ok {
		return &ValidationError{Name: "rewards", err: errors.New(`ent: missing required field "Achievement.rewards"`)}
	}
	if _, ok := ac.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "Achievement.points"`)}
	}
	if _, ok := ac.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "Achievement.is_hidden"`)}
	}
	if _, ok := ac.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Achievement.is_active"`)}
	}
	return nil
}

func (ac *AchievementCreate) sqlSave(ctx context.Context) (*Achievement, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AchievementCreate) createSpec() (*Achievement, *sqlgraph.CreateSpec) {
	var (
		_node = &Achievement{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(achievement.Table, sqlgraph.NewFieldSpec(achievement.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(achievement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(achievement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(achievement.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(achievement.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.IconURL(); ok {
		_spec.SetField(achievement.FieldIconURL, field.TypeString, value)
		_node.IconURL = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(achievement.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Conditions(); ok {
		_spec.SetField(achievement.FieldConditions, field.TypeJSON, value)
		_node.Conditions = value
	}
	if value, ok := ac.mutation.Rewards(); ok {
		_spec.SetField(achievement.FieldRewards, field.TypeJSON, value)
		_node.Rewards = value
	}
	if value, ok := ac.mutation.Points(); ok {
		_spec.SetField(achievement.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if value, ok := ac.mutation.IsHidden(); ok {
		_spec.SetField(achievement.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := ac.mutation.IsActive(); ok {
		_spec.SetField(achievement.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := ac.mutation.UserAchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   achievement.UserAchievementsTable,
			Columns: []string{achievement.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AchievementCreateBulk is the builder for creating many Achievement entities in bulk.
type AchievementCreateBulk struct {
	config
	err      error
	builders []*AchievementCreate
}

// Save creates the Achievement entities in the database.
func (acb *AchievementCreateBulk) Save(ctx context.Context) ([]*Achievement, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Achievement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AchievementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AchievementCreateBulk) SaveX(ctx context.Context) []*Achievement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AchievementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AchievementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
