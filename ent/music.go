// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/music"
)

// Music is the model entity for the Music schema.
type Music struct {
	config `json:"-"`
	// ID of the ent.
	// Global custom UUID ID
	ID uuid.UUID `json:"id,omitempty"`
	// Created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Updated time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 곡 제목
	Name string `json:"name,omitempty"`
	// 아티스트
	Artist string `json:"artist,omitempty"`
	// 작곡가
	Composer string `json:"composer,omitempty"`
	// 음악 파일 경로
	MusicSource string `json:"music_source,omitempty"`
	// 재킷 이미지 경로
	JacketSource string `json:"jacket_source,omitempty"`
	// 곡 길이(초)
	Duration float64 `json:"duration,omitempty"`
	// BPM
	Bpm float64 `json:"bpm,omitempty"`
	// 장르
	Genre string `json:"genre,omitempty"`
	// 곡 설명
	Description string `json:"description,omitempty"`
	// 추천곡 여부
	IsFeatured bool `json:"is_featured,omitempty"`
	// 무료곡 여부
	IsFree bool `json:"is_free,omitempty"`
	// 해금 레벨
	UnlockLevel int `json:"unlock_level,omitempty"`
	// 출시일
	ReleaseDate *time.Time `json:"release_date,omitempty"`
	// 활성 여부
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MusicQuery when eager-loading is set.
	Edges        MusicEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MusicEdges holds the relations/edges for other nodes in the graph.
type MusicEdges struct {
	// Stages holds the value of the stages edge.
	Stages []*Stage `json:"stages,omitempty"`
	// Records holds the value of the records edge.
	Records []*Record `json:"records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StagesOrErr returns the Stages value or an error if the edge
// was not loaded in eager-loading.
func (e MusicEdges) StagesOrErr() ([]*Stage, error) {
	if e.loadedTypes[0] {
		return e.Stages, nil
	}
	return nil, &NotLoadedError{edge: "stages"}
}

// RecordsOrErr returns the Records value or an error if the edge
// was not loaded in eager-loading.
func (e MusicEdges) RecordsOrErr() ([]*Record, error) {
	if e.loadedTypes[1] {
		return e.Records, nil
	}
	return nil, &NotLoadedError{edge: "records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Music) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case music.FieldIsFeatured, music.FieldIsFree, music.FieldIsActive:
			values[i] = new(sql.NullBool)
		case music.FieldDuration, music.FieldBpm:
			values[i] = new(sql.NullFloat64)
		case music.FieldUnlockLevel:
			values[i] = new(sql.NullInt64)
		case music.FieldName, music.FieldArtist, music.FieldComposer, music.FieldMusicSource, music.FieldJacketSource, music.FieldGenre, music.FieldDescription:
			values[i] = new(sql.NullString)
		case music.FieldCreatedAt, music.FieldUpdatedAt, music.FieldReleaseDate:
			values[i] = new(sql.NullTime)
		case music.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Music fields.
func (m *Music) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case music.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case music.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case music.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case music.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case music.FieldArtist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artist", values[i])
			} else if value.Valid {
				m.Artist = value.String
			}
		case music.FieldComposer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field composer", values[i])
			} else if value.Valid {
				m.Composer = value.String
			}
		case music.FieldMusicSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field music_source", values[i])
			} else if value.Valid {
				m.MusicSource = value.String
			}
		case music.FieldJacketSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jacket_source", values[i])
			} else if value.Valid {
				m.JacketSource = value.String
			}
		case music.FieldDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				m.Duration = value.Float64
			}
		case music.FieldBpm:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bpm", values[i])
			} else if value.Valid {
				m.Bpm = value.Float64
			}
		case music.FieldGenre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genre", values[i])
			} else if value.Valid {
				m.Genre = value.String
			}
		case music.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case music.FieldIsFeatured:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_featured", values[i])
			} else if value.Valid {
				m.IsFeatured = value.Bool
			}
		case music.FieldIsFree:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_free", values[i])
			} else if value.Valid {
				m.IsFree = value.Bool
			}
		case music.FieldUnlockLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unlock_level", values[i])
			} else if value.Valid {
				m.UnlockLevel = int(value.Int64)
			}
		case music.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				m.ReleaseDate = new(time.Time)
				*m.ReleaseDate = value.Time
			}
		case music.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				m.IsActive = value.Bool
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Music.
// This includes values selected through modifiers, order, etc.
func (m *Music) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryStages queries the "stages" edge of the Music entity.
func (m *Music) QueryStages() *StageQuery {
	return NewMusicClient(m.config).QueryStages(m)
}

// QueryRecords queries the "records" edge of the Music entity.
func (m *Music) QueryRecords() *RecordQuery {
	return NewMusicClient(m.config).QueryRecords(m)
}

// Update returns a builder for updating this Music.
// Note that you need to call Music.Unwrap() before calling this method if this Music
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Music) Update() *MusicUpdateOne {
	return NewMusicClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Music entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Music) Unwrap() *Music {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Music is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Music) String() string {
	var builder strings.Builder
	builder.WriteString("Music(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("artist=")
	builder.WriteString(m.Artist)
	builder.WriteString(", ")
	builder.WriteString("composer=")
	builder.WriteString(m.Composer)
	builder.WriteString(", ")
	builder.WriteString("music_source=")
	builder.WriteString(m.MusicSource)
	builder.WriteString(", ")
	builder.WriteString("jacket_source=")
	builder.WriteString(m.JacketSource)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", m.Duration))
	builder.WriteString(", ")
	builder.WriteString("bpm=")
	builder.WriteString(fmt.Sprintf("%v", m.Bpm))
	builder.WriteString(", ")
	builder.WriteString("genre=")
	builder.WriteString(m.Genre)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteString(", ")
	builder.WriteString("is_featured=")
	builder.WriteString(fmt.Sprintf("%v", m.IsFeatured))
	builder.WriteString(", ")
	builder.WriteString("is_free=")
	builder.WriteString(fmt.Sprintf("%v", m.IsFree))
	builder.WriteString(", ")
	builder.WriteString("unlock_level=")
	builder.WriteString(fmt.Sprintf("%v", m.UnlockLevel))
	builder.WriteString(", ")
	if v := m.ReleaseDate; v != nil {
		builder.WriteString("release_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", m.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// Musics is a parsable slice of Music.
type Musics []*Music
