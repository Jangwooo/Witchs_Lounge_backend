// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/predicate"
	"github.com/witchs-lounge_backend/ent/product"
	"github.com/witchs-lounge_backend/ent/record"
	"github.com/witchs-lounge_backend/ent/user"
	"github.com/witchs-lounge_backend/ent/userachievement"
	"github.com/witchs-lounge_backend/ent/userpurchase"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetPlatformType sets the "platform_type" field.
func (uu *UserUpdate) SetPlatformType(ut user.PlatformType) *UserUpdate {
	uu.mutation.SetPlatformType(ut)
	return uu
}

// SetNillablePlatformType sets the "platform_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePlatformType(ut *user.PlatformType) *UserUpdate {
	if ut != nil {
		uu.SetPlatformType(*ut)
	}
	return uu
}

// SetPlatformUserID sets the "platform_user_id" field.
func (uu *UserUpdate) SetPlatformUserID(s string) *UserUpdate {
	uu.mutation.SetPlatformUserID(s)
	return uu
}

// SetNillablePlatformUserID sets the "platform_user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePlatformUserID(s *string) *UserUpdate {
	if s != nil {
		uu.SetPlatformUserID(*s)
	}
	return uu
}

// SetPlatformEmail sets the "platform_email" field.
func (uu *UserUpdate) SetPlatformEmail(s string) *UserUpdate {
	uu.mutation.SetPlatformEmail(s)
	return uu
}

// SetNillablePlatformEmail sets the "platform_email" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePlatformEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetPlatformEmail(*s)
	}
	return uu
}

// ClearPlatformEmail clears the value of the "platform_email" field.
func (uu *UserUpdate) ClearPlatformEmail() *UserUpdate {
	uu.mutation.ClearPlatformEmail()
	return uu
}

// SetPlatformAvatarURL sets the "platform_avatar_url" field.
func (uu *UserUpdate) SetPlatformAvatarURL(s string) *UserUpdate {
	uu.mutation.SetPlatformAvatarURL(s)
	return uu
}

// SetNillablePlatformAvatarURL sets the "platform_avatar_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePlatformAvatarURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetPlatformAvatarURL(*s)
	}
	return uu
}

// ClearPlatformAvatarURL clears the value of the "platform_avatar_url" field.
func (uu *UserUpdate) ClearPlatformAvatarURL() *UserUpdate {
	uu.mutation.ClearPlatformAvatarURL()
	return uu
}

// SetPlatformDisplayName sets the "platform_display_name" field.
func (uu *UserUpdate) SetPlatformDisplayName(s string) *UserUpdate {
	uu.mutation.SetPlatformDisplayName(s)
	return uu
}

// SetNillablePlatformDisplayName sets the "platform_display_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePlatformDisplayName(s *string) *UserUpdate {
	if s != nil {
		uu.SetPlatformDisplayName(*s)
	}
	return uu
}

// ClearPlatformDisplayName clears the value of the "platform_display_name" field.
func (uu *UserUpdate) ClearPlatformDisplayName() *UserUpdate {
	uu.mutation.ClearPlatformDisplayName()
	return uu
}

// SetLanguage sets the "language" field.
func (uu *UserUpdate) SetLanguage(s string) *UserUpdate {
	uu.mutation.SetLanguage(s)
	return uu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLanguage(s *string) *UserUpdate {
	if s != nil {
		uu.SetLanguage(*s)
	}
	return uu
}

// SetPlatformData sets the "platform_data" field.
func (uu *UserUpdate) SetPlatformData(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetPlatformData(m)
	return uu
}

// ClearPlatformData clears the value of the "platform_data" field.
func (uu *UserUpdate) ClearPlatformData() *UserUpdate {
	uu.mutation.ClearPlatformData()
	return uu
}

// SetIsVerified sets the "is_verified" field.
func (uu *UserUpdate) SetIsVerified(b bool) *UserUpdate {
	uu.mutation.SetIsVerified(b)
	return uu
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsVerified(*b)
	}
	return uu
}

// SetNickname sets the "nickname" field.
func (uu *UserUpdate) SetNickname(s string) *UserUpdate {
	uu.mutation.SetNickname(s)
	return uu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickname(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickname(*s)
	}
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisplayName(s *string) *UserUpdate {
	if s != nil {
		uu.SetDisplayName(*s)
	}
	return uu
}

// ClearDisplayName clears the value of the "display_name" field.
func (uu *UserUpdate) ClearDisplayName() *UserUpdate {
	uu.mutation.ClearDisplayName()
	return uu
}

// SetLastLoginAt sets the "last_login_at" field.
func (uu *UserUpdate) SetLastLoginAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginAt(t)
	return uu
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginAt(*t)
	}
	return uu
}

// SetLevel sets the "level" field.
func (uu *UserUpdate) SetLevel(i int) *UserUpdate {
	uu.mutation.ResetLevel()
	uu.mutation.SetLevel(i)
	return uu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLevel(i *int) *UserUpdate {
	if i != nil {
		uu.SetLevel(*i)
	}
	return uu
}

// AddLevel adds i to the "level" field.
func (uu *UserUpdate) AddLevel(i int) *UserUpdate {
	uu.mutation.AddLevel(i)
	return uu
}

// SetExp sets the "exp" field.
func (uu *UserUpdate) SetExp(i int) *UserUpdate {
	uu.mutation.ResetExp()
	uu.mutation.SetExp(i)
	return uu
}

// SetNillableExp sets the "exp" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExp(i *int) *UserUpdate {
	if i != nil {
		uu.SetExp(*i)
	}
	return uu
}

// AddExp adds i to the "exp" field.
func (uu *UserUpdate) AddExp(i int) *UserUpdate {
	uu.mutation.AddExp(i)
	return uu
}

// SetCoin sets the "coin" field.
func (uu *UserUpdate) SetCoin(i int) *UserUpdate {
	uu.mutation.ResetCoin()
	uu.mutation.SetCoin(i)
	return uu
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCoin(i *int) *UserUpdate {
	if i != nil {
		uu.SetCoin(*i)
	}
	return uu
}

// AddCoin adds i to the "coin" field.
func (uu *UserUpdate) AddCoin(i int) *UserUpdate {
	uu.mutation.AddCoin(i)
	return uu
}

// SetGem sets the "gem" field.
func (uu *UserUpdate) SetGem(i int) *UserUpdate {
	uu.mutation.ResetGem()
	uu.mutation.SetGem(i)
	return uu
}

// SetNillableGem sets the "gem" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGem(i *int) *UserUpdate {
	if i != nil {
		uu.SetGem(*i)
	}
	return uu
}

// AddGem adds i to the "gem" field.
func (uu *UserUpdate) AddGem(i int) *UserUpdate {
	uu.mutation.AddGem(i)
	return uu
}

// SetSettings sets the "settings" field.
func (uu *UserUpdate) SetSettings(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetSettings(m)
	return uu
}

// SetCustomizeData sets the "customize_data" field.
func (uu *UserUpdate) SetCustomizeData(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetCustomizeData(m)
	return uu
}

// SetSaveData sets the "save_data" field.
func (uu *UserUpdate) SetSaveData(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetSaveData(m)
	return uu
}

// SetIsBanned sets the "is_banned" field.
func (uu *UserUpdate) SetIsBanned(b bool) *UserUpdate {
	uu.mutation.SetIsBanned(b)
	return uu
}

// SetNillableIsBanned sets the "is_banned" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsBanned(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsBanned(*b)
	}
	return uu
}

// SetBannedUntil sets the "banned_until" field.
func (uu *UserUpdate) SetBannedUntil(t time.Time) *UserUpdate {
	uu.mutation.SetBannedUntil(t)
	return uu
}

// SetNillableBannedUntil sets the "banned_until" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBannedUntil(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBannedUntil(*t)
	}
	return uu
}

// ClearBannedUntil clears the value of the "banned_until" field.
func (uu *UserUpdate) ClearBannedUntil() *UserUpdate {
	uu.mutation.ClearBannedUntil()
	return uu
}

// SetBanReason sets the "ban_reason" field.
func (uu *UserUpdate) SetBanReason(s string) *UserUpdate {
	uu.mutation.SetBanReason(s)
	return uu
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanReason(s *string) *UserUpdate {
	if s != nil {
		uu.SetBanReason(*s)
	}
	return uu
}

// ClearBanReason clears the value of the "ban_reason" field.
func (uu *UserUpdate) ClearBanReason() *UserUpdate {
	uu.mutation.ClearBanReason()
	return uu
}

// AddPurchasedProductIDs adds the "purchased_products" edge to the Product entity by IDs.
func (uu *UserUpdate) AddPurchasedProductIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddPurchasedProductIDs(ids...)
	return uu
}

// AddPurchasedProducts adds the "purchased_products" edges to the Product entity.
func (uu *UserUpdate) AddPurchasedProducts(p ...*Product) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPurchasedProductIDs(ids...)
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (uu *UserUpdate) AddRecordIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddRecordIDs(ids...)
	return uu
}

// AddRecords adds the "records" edges to the Record entity.
func (uu *UserUpdate) AddRecords(r ...*Record) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRecordIDs(ids...)
}

// AddUserAchievementIDs adds the "user_achievements" edge to the UserAchievement entity by IDs.
func (uu *UserUpdate) AddUserAchievementIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddUserAchievementIDs(ids...)
	return uu
}

// AddUserAchievements adds the "user_achievements" edges to the UserAchievement entity.
func (uu *UserUpdate) AddUserAchievements(u ...*UserAchievement) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserAchievementIDs(ids...)
}

// AddUserPurchaseIDs adds the "user_purchases" edge to the UserPurchase entity by IDs.
func (uu *UserUpdate) AddUserPurchaseIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddUserPurchaseIDs(ids...)
	return uu
}

// AddUserPurchases adds the "user_purchases" edges to the UserPurchase entity.
func (uu *UserUpdate) AddUserPurchases(u ...*UserPurchase) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserPurchaseIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearPurchasedProducts clears all "purchased_products" edges to the Product entity.
func (uu *UserUpdate) ClearPurchasedProducts() *UserUpdate {
	uu.mutation.ClearPurchasedProducts()
	return uu
}

// RemovePurchasedProductIDs removes the "purchased_products" edge to Product entities by IDs.
func (uu *UserUpdate) RemovePurchasedProductIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemovePurchasedProductIDs(ids...)
	return uu
}

// RemovePurchasedProducts removes "purchased_products" edges to Product entities.
func (uu *UserUpdate) RemovePurchasedProducts(p ...*Product) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePurchasedProductIDs(ids...)
}

// ClearRecords clears all "records" edges to the Record entity.
func (uu *UserUpdate) ClearRecords() *UserUpdate {
	uu.mutation.ClearRecords()
	return uu
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (uu *UserUpdate) RemoveRecordIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveRecordIDs(ids...)
	return uu
}

// RemoveRecords removes "records" edges to Record entities.
func (uu *UserUpdate) RemoveRecords(r ...*Record) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRecordIDs(ids...)
}

// ClearUserAchievements clears all "user_achievements" edges to the UserAchievement entity.
func (uu *UserUpdate) ClearUserAchievements() *UserUpdate {
	uu.mutation.ClearUserAchievements()
	return uu
}

// RemoveUserAchievementIDs removes the "user_achievements" edge to UserAchievement entities by IDs.
func (uu *UserUpdate) RemoveUserAchievementIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveUserAchievementIDs(ids...)
	return uu
}

// RemoveUserAchievements removes "user_achievements" edges to UserAchievement entities.
func (uu *UserUpdate) RemoveUserAchievements(u ...*UserAchievement) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserAchievementIDs(ids...)
}

// ClearUserPurchases clears all "user_purchases" edges to the UserPurchase entity.
func (uu *UserUpdate) ClearUserPurchases() *UserUpdate {
	uu.mutation.ClearUserPurchases()
	return uu
}

// RemoveUserPurchaseIDs removes the "user_purchases" edge to UserPurchase entities by IDs.
func (uu *UserUpdate) RemoveUserPurchaseIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveUserPurchaseIDs(ids...)
	return uu
}

// RemoveUserPurchases removes "user_purchases" edges to UserPurchase entities.
func (uu *UserUpdate) RemoveUserPurchases(u ...*UserPurchase) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserPurchaseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.PlatformType(); ok {
		if err := user.PlatformTypeValidator(v); err != nil {
			return &ValidationError{Name: "platform_type", err: fmt.Errorf(`ent: validator failed for field "User.platform_type": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.PlatformType(); ok {
		_spec.SetField(user.FieldPlatformType, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.PlatformUserID(); ok {
		_spec.SetField(user.FieldPlatformUserID, field.TypeString, value)
	}
	if value, ok := uu.mutation.PlatformEmail(); ok {
		_spec.SetField(user.FieldPlatformEmail, field.TypeString, value)
	}
	if uu.mutation.PlatformEmailCleared() {
		_spec.ClearField(user.FieldPlatformEmail, field.TypeString)
	}
	if value, ok := uu.mutation.PlatformAvatarURL(); ok {
		_spec.SetField(user.FieldPlatformAvatarURL, field.TypeString, value)
	}
	if uu.mutation.PlatformAvatarURLCleared() {
		_spec.ClearField(user.FieldPlatformAvatarURL, field.TypeString)
	}
	if value, ok := uu.mutation.PlatformDisplayName(); ok {
		_spec.SetField(user.FieldPlatformDisplayName, field.TypeString, value)
	}
	if uu.mutation.PlatformDisplayNameCleared() {
		_spec.ClearField(user.FieldPlatformDisplayName, field.TypeString)
	}
	if value, ok := uu.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if value, ok := uu.mutation.PlatformData(); ok {
		_spec.SetField(user.FieldPlatformData, field.TypeJSON, value)
	}
	if uu.mutation.PlatformDataCleared() {
		_spec.ClearField(user.FieldPlatformData, field.TypeJSON)
	}
	if value, ok := uu.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if uu.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := uu.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Level(); ok {
		_spec.SetField(user.FieldLevel, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedLevel(); ok {
		_spec.AddField(user.FieldLevel, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Exp(); ok {
		_spec.SetField(user.FieldExp, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedExp(); ok {
		_spec.AddField(user.FieldExp, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Coin(); ok {
		_spec.SetField(user.FieldCoin, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedCoin(); ok {
		_spec.AddField(user.FieldCoin, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Gem(); ok {
		_spec.SetField(user.FieldGem, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedGem(); ok {
		_spec.AddField(user.FieldGem, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Settings(); ok {
		_spec.SetField(user.FieldSettings, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.CustomizeData(); ok {
		_spec.SetField(user.FieldCustomizeData, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.SaveData(); ok {
		_spec.SetField(user.FieldSaveData, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.IsBanned(); ok {
		_spec.SetField(user.FieldIsBanned, field.TypeBool, value)
	}
	if value, ok := uu.mutation.BannedUntil(); ok {
		_spec.SetField(user.FieldBannedUntil, field.TypeTime, value)
	}
	if uu.mutation.BannedUntilCleared() {
		_spec.ClearField(user.FieldBannedUntil, field.TypeTime)
	}
	if value, ok := uu.mutation.BanReason(); ok {
		_spec.SetField(user.FieldBanReason, field.TypeString, value)
	}
	if uu.mutation.BanReasonCleared() {
		_spec.ClearField(user.FieldBanReason, field.TypeString)
	}
	if uu.mutation.PurchasedProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PurchasedProductsTable,
			Columns: user.PurchasedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		createE := &UserPurchaseCreate{config: uu.config, mutation: newUserPurchaseMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPurchasedProductsIDs(); len(nodes) > 0 && !uu.mutation.PurchasedProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PurchasedProductsTable,
			Columns: user.PurchasedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPurchaseCreate{config: uu.config, mutation: newUserPurchaseMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PurchasedProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PurchasedProductsTable,
			Columns: user.PurchasedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPurchaseCreate{config: uu.config, mutation: newUserPurchaseMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecordsTable,
			Columns: []string{user.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !uu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecordsTable,
			Columns: []string{user.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecordsTable,
			Columns: []string{user.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserAchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAchievementsTable,
			Columns: []string{user.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserAchievementsIDs(); len(nodes) > 0 && !uu.mutation.UserAchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAchievementsTable,
			Columns: []string{user.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserAchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAchievementsTable,
			Columns: []string{user.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPurchasesTable,
			Columns: []string{user.UserPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpurchase.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserPurchasesIDs(); len(nodes) > 0 && !uu.mutation.UserPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPurchasesTable,
			Columns: []string{user.UserPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpurchase.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPurchasesTable,
			Columns: []string{user.UserPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpurchase.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetPlatformType sets the "platform_type" field.
func (uuo *UserUpdateOne) SetPlatformType(ut user.PlatformType) *UserUpdateOne {
	uuo.mutation.SetPlatformType(ut)
	return uuo
}

// SetNillablePlatformType sets the "platform_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePlatformType(ut *user.PlatformType) *UserUpdateOne {
	if ut != nil {
		uuo.SetPlatformType(*ut)
	}
	return uuo
}

// SetPlatformUserID sets the "platform_user_id" field.
func (uuo *UserUpdateOne) SetPlatformUserID(s string) *UserUpdateOne {
	uuo.mutation.SetPlatformUserID(s)
	return uuo
}

// SetNillablePlatformUserID sets the "platform_user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePlatformUserID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPlatformUserID(*s)
	}
	return uuo
}

// SetPlatformEmail sets the "platform_email" field.
func (uuo *UserUpdateOne) SetPlatformEmail(s string) *UserUpdateOne {
	uuo.mutation.SetPlatformEmail(s)
	return uuo
}

// SetNillablePlatformEmail sets the "platform_email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePlatformEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPlatformEmail(*s)
	}
	return uuo
}

// ClearPlatformEmail clears the value of the "platform_email" field.
func (uuo *UserUpdateOne) ClearPlatformEmail() *UserUpdateOne {
	uuo.mutation.ClearPlatformEmail()
	return uuo
}

// SetPlatformAvatarURL sets the "platform_avatar_url" field.
func (uuo *UserUpdateOne) SetPlatformAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetPlatformAvatarURL(s)
	return uuo
}

// SetNillablePlatformAvatarURL sets the "platform_avatar_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePlatformAvatarURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPlatformAvatarURL(*s)
	}
	return uuo
}

// ClearPlatformAvatarURL clears the value of the "platform_avatar_url" field.
func (uuo *UserUpdateOne) ClearPlatformAvatarURL() *UserUpdateOne {
	uuo.mutation.ClearPlatformAvatarURL()
	return uuo
}

// SetPlatformDisplayName sets the "platform_display_name" field.
func (uuo *UserUpdateOne) SetPlatformDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetPlatformDisplayName(s)
	return uuo
}

// SetNillablePlatformDisplayName sets the "platform_display_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePlatformDisplayName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPlatformDisplayName(*s)
	}
	return uuo
}

// ClearPlatformDisplayName clears the value of the "platform_display_name" field.
func (uuo *UserUpdateOne) ClearPlatformDisplayName() *UserUpdateOne {
	uuo.mutation.ClearPlatformDisplayName()
	return uuo
}

// SetLanguage sets the "language" field.
func (uuo *UserUpdateOne) SetLanguage(s string) *UserUpdateOne {
	uuo.mutation.SetLanguage(s)
	return uuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLanguage(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLanguage(*s)
	}
	return uuo
}

// SetPlatformData sets the "platform_data" field.
func (uuo *UserUpdateOne) SetPlatformData(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetPlatformData(m)
	return uuo
}

// ClearPlatformData clears the value of the "platform_data" field.
func (uuo *UserUpdateOne) ClearPlatformData() *UserUpdateOne {
	uuo.mutation.ClearPlatformData()
	return uuo
}

// SetIsVerified sets the "is_verified" field.
func (uuo *UserUpdateOne) SetIsVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetIsVerified(b)
	return uuo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsVerified(*b)
	}
	return uuo
}

// SetNickname sets the "nickname" field.
func (uuo *UserUpdateOne) SetNickname(s string) *UserUpdateOne {
	uuo.mutation.SetNickname(s)
	return uuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickname(*s)
	}
	return uuo
}

// SetDisplayName sets the "display_name" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisplayName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDisplayName(*s)
	}
	return uuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (uuo *UserUpdateOne) ClearDisplayName() *UserUpdateOne {
	uuo.mutation.ClearDisplayName()
	return uuo
}

// SetLastLoginAt sets the "last_login_at" field.
func (uuo *UserUpdateOne) SetLastLoginAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginAt(t)
	return uuo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginAt(*t)
	}
	return uuo
}

// SetLevel sets the "level" field.
func (uuo *UserUpdateOne) SetLevel(i int) *UserUpdateOne {
	uuo.mutation.ResetLevel()
	uuo.mutation.SetLevel(i)
	return uuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLevel(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetLevel(*i)
	}
	return uuo
}

// AddLevel adds i to the "level" field.
func (uuo *UserUpdateOne) AddLevel(i int) *UserUpdateOne {
	uuo.mutation.AddLevel(i)
	return uuo
}

// SetExp sets the "exp" field.
func (uuo *UserUpdateOne) SetExp(i int) *UserUpdateOne {
	uuo.mutation.ResetExp()
	uuo.mutation.SetExp(i)
	return uuo
}

// SetNillableExp sets the "exp" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExp(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetExp(*i)
	}
	return uuo
}

// AddExp adds i to the "exp" field.
func (uuo *UserUpdateOne) AddExp(i int) *UserUpdateOne {
	uuo.mutation.AddExp(i)
	return uuo
}

// SetCoin sets the "coin" field.
func (uuo *UserUpdateOne) SetCoin(i int) *UserUpdateOne {
	uuo.mutation.ResetCoin()
	uuo.mutation.SetCoin(i)
	return uuo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCoin(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetCoin(*i)
	}
	return uuo
}

// AddCoin adds i to the "coin" field.
func (uuo *UserUpdateOne) AddCoin(i int) *UserUpdateOne {
	uuo.mutation.AddCoin(i)
	return uuo
}

// SetGem sets the "gem" field.
func (uuo *UserUpdateOne) SetGem(i int) *UserUpdateOne {
	uuo.mutation.ResetGem()
	uuo.mutation.SetGem(i)
	return uuo
}

// SetNillableGem sets the "gem" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGem(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetGem(*i)
	}
	return uuo
}

// AddGem adds i to the "gem" field.
func (uuo *UserUpdateOne) AddGem(i int) *UserUpdateOne {
	uuo.mutation.AddGem(i)
	return uuo
}

// SetSettings sets the "settings" field.
func (uuo *UserUpdateOne) SetSettings(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetSettings(m)
	return uuo
}

// SetCustomizeData sets the "customize_data" field.
func (uuo *UserUpdateOne) SetCustomizeData(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetCustomizeData(m)
	return uuo
}

// SetSaveData sets the "save_data" field.
func (uuo *UserUpdateOne) SetSaveData(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetSaveData(m)
	return uuo
}

// SetIsBanned sets the "is_banned" field.
func (uuo *UserUpdateOne) SetIsBanned(b bool) *UserUpdateOne {
	uuo.mutation.SetIsBanned(b)
	return uuo
}

// SetNillableIsBanned sets the "is_banned" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsBanned(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsBanned(*b)
	}
	return uuo
}

// SetBannedUntil sets the "banned_until" field.
func (uuo *UserUpdateOne) SetBannedUntil(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBannedUntil(t)
	return uuo
}

// SetNillableBannedUntil sets the "banned_until" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBannedUntil(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBannedUntil(*t)
	}
	return uuo
}

// ClearBannedUntil clears the value of the "banned_until" field.
func (uuo *UserUpdateOne) ClearBannedUntil() *UserUpdateOne {
	uuo.mutation.ClearBannedUntil()
	return uuo
}

// SetBanReason sets the "ban_reason" field.
func (uuo *UserUpdateOne) SetBanReason(s string) *UserUpdateOne {
	uuo.mutation.SetBanReason(s)
	return uuo
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanReason(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBanReason(*s)
	}
	return uuo
}

// ClearBanReason clears the value of the "ban_reason" field.
func (uuo *UserUpdateOne) ClearBanReason() *UserUpdateOne {
	uuo.mutation.ClearBanReason()
	return uuo
}

// AddPurchasedProductIDs adds the "purchased_products" edge to the Product entity by IDs.
func (uuo *UserUpdateOne) AddPurchasedProductIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddPurchasedProductIDs(ids...)
	return uuo
}

// AddPurchasedProducts adds the "purchased_products" edges to the Product entity.
func (uuo *UserUpdateOne) AddPurchasedProducts(p ...*Product) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPurchasedProductIDs(ids...)
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (uuo *UserUpdateOne) AddRecordIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddRecordIDs(ids...)
	return uuo
}

// AddRecords adds the "records" edges to the Record entity.
func (uuo *UserUpdateOne) AddRecords(r ...*Record) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRecordIDs(ids...)
}

// AddUserAchievementIDs adds the "user_achievements" edge to the UserAchievement entity by IDs.
func (uuo *UserUpdateOne) AddUserAchievementIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddUserAchievementIDs(ids...)
	return uuo
}

// AddUserAchievements adds the "user_achievements" edges to the UserAchievement entity.
func (uuo *UserUpdateOne) AddUserAchievements(u ...*UserAchievement) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserAchievementIDs(ids...)
}

// AddUserPurchaseIDs adds the "user_purchases" edge to the UserPurchase entity by IDs.
func (uuo *UserUpdateOne) AddUserPurchaseIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddUserPurchaseIDs(ids...)
	return uuo
}

// AddUserPurchases adds the "user_purchases" edges to the UserPurchase entity.
func (uuo *UserUpdateOne) AddUserPurchases(u ...*UserPurchase) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserPurchaseIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearPurchasedProducts clears all "purchased_products" edges to the Product entity.
func (uuo *UserUpdateOne) ClearPurchasedProducts() *UserUpdateOne {
	uuo.mutation.ClearPurchasedProducts()
	return uuo
}

// RemovePurchasedProductIDs removes the "purchased_products" edge to Product entities by IDs.
func (uuo *UserUpdateOne) RemovePurchasedProductIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemovePurchasedProductIDs(ids...)
	return uuo
}

// RemovePurchasedProducts removes "purchased_products" edges to Product entities.
func (uuo *UserUpdateOne) RemovePurchasedProducts(p ...*Product) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePurchasedProductIDs(ids...)
}

// ClearRecords clears all "records" edges to the Record entity.
func (uuo *UserUpdateOne) ClearRecords() *UserUpdateOne {
	uuo.mutation.ClearRecords()
	return uuo
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (uuo *UserUpdateOne) RemoveRecordIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveRecordIDs(ids...)
	return uuo
}

// RemoveRecords removes "records" edges to Record entities.
func (uuo *UserUpdateOne) RemoveRecords(r ...*Record) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRecordIDs(ids...)
}

// ClearUserAchievements clears all "user_achievements" edges to the UserAchievement entity.
func (uuo *UserUpdateOne) ClearUserAchievements() *UserUpdateOne {
	uuo.mutation.ClearUserAchievements()
	return uuo
}

// RemoveUserAchievementIDs removes the "user_achievements" edge to UserAchievement entities by IDs.
func (uuo *UserUpdateOne) RemoveUserAchievementIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveUserAchievementIDs(ids...)
	return uuo
}

// RemoveUserAchievements removes "user_achievements" edges to UserAchievement entities.
func (uuo *UserUpdateOne) RemoveUserAchievements(u ...*UserAchievement) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserAchievementIDs(ids...)
}

// ClearUserPurchases clears all "user_purchases" edges to the UserPurchase entity.
func (uuo *UserUpdateOne) ClearUserPurchases() *UserUpdateOne {
	uuo.mutation.ClearUserPurchases()
	return uuo
}

// RemoveUserPurchaseIDs removes the "user_purchases" edge to UserPurchase entities by IDs.
func (uuo *UserUpdateOne) RemoveUserPurchaseIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveUserPurchaseIDs(ids...)
	return uuo
}

// RemoveUserPurchases removes "user_purchases" edges to UserPurchase entities.
func (uuo *UserUpdateOne) RemoveUserPurchases(u ...*UserPurchase) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserPurchaseIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.PlatformType(); ok {
		if err := user.PlatformTypeValidator(v); err != nil {
			return &ValidationError{Name: "platform_type", err: fmt.Errorf(`ent: validator failed for field "User.platform_type": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.PlatformType(); ok {
		_spec.SetField(user.FieldPlatformType, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.PlatformUserID(); ok {
		_spec.SetField(user.FieldPlatformUserID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PlatformEmail(); ok {
		_spec.SetField(user.FieldPlatformEmail, field.TypeString, value)
	}
	if uuo.mutation.PlatformEmailCleared() {
		_spec.ClearField(user.FieldPlatformEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.PlatformAvatarURL(); ok {
		_spec.SetField(user.FieldPlatformAvatarURL, field.TypeString, value)
	}
	if uuo.mutation.PlatformAvatarURLCleared() {
		_spec.ClearField(user.FieldPlatformAvatarURL, field.TypeString)
	}
	if value, ok := uuo.mutation.PlatformDisplayName(); ok {
		_spec.SetField(user.FieldPlatformDisplayName, field.TypeString, value)
	}
	if uuo.mutation.PlatformDisplayNameCleared() {
		_spec.ClearField(user.FieldPlatformDisplayName, field.TypeString)
	}
	if value, ok := uuo.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PlatformData(); ok {
		_spec.SetField(user.FieldPlatformData, field.TypeJSON, value)
	}
	if uuo.mutation.PlatformDataCleared() {
		_spec.ClearField(user.FieldPlatformData, field.TypeJSON)
	}
	if value, ok := uuo.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if uuo.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := uuo.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Level(); ok {
		_spec.SetField(user.FieldLevel, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedLevel(); ok {
		_spec.AddField(user.FieldLevel, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Exp(); ok {
		_spec.SetField(user.FieldExp, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedExp(); ok {
		_spec.AddField(user.FieldExp, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Coin(); ok {
		_spec.SetField(user.FieldCoin, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedCoin(); ok {
		_spec.AddField(user.FieldCoin, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Gem(); ok {
		_spec.SetField(user.FieldGem, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedGem(); ok {
		_spec.AddField(user.FieldGem, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Settings(); ok {
		_spec.SetField(user.FieldSettings, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.CustomizeData(); ok {
		_spec.SetField(user.FieldCustomizeData, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.SaveData(); ok {
		_spec.SetField(user.FieldSaveData, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.IsBanned(); ok {
		_spec.SetField(user.FieldIsBanned, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.BannedUntil(); ok {
		_spec.SetField(user.FieldBannedUntil, field.TypeTime, value)
	}
	if uuo.mutation.BannedUntilCleared() {
		_spec.ClearField(user.FieldBannedUntil, field.TypeTime)
	}
	if value, ok := uuo.mutation.BanReason(); ok {
		_spec.SetField(user.FieldBanReason, field.TypeString, value)
	}
	if uuo.mutation.BanReasonCleared() {
		_spec.ClearField(user.FieldBanReason, field.TypeString)
	}
	if uuo.mutation.PurchasedProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PurchasedProductsTable,
			Columns: user.PurchasedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		createE := &UserPurchaseCreate{config: uuo.config, mutation: newUserPurchaseMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPurchasedProductsIDs(); len(nodes) > 0 && !uuo.mutation.PurchasedProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PurchasedProductsTable,
			Columns: user.PurchasedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPurchaseCreate{config: uuo.config, mutation: newUserPurchaseMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PurchasedProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PurchasedProductsTable,
			Columns: user.PurchasedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPurchaseCreate{config: uuo.config, mutation: newUserPurchaseMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecordsTable,
			Columns: []string{user.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !uuo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecordsTable,
			Columns: []string{user.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecordsTable,
			Columns: []string{user.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserAchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAchievementsTable,
			Columns: []string{user.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserAchievementsIDs(); len(nodes) > 0 && !uuo.mutation.UserAchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAchievementsTable,
			Columns: []string{user.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserAchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAchievementsTable,
			Columns: []string{user.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPurchasesTable,
			Columns: []string{user.UserPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpurchase.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserPurchasesIDs(); len(nodes) > 0 && !uuo.mutation.UserPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPurchasesTable,
			Columns: []string{user.UserPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpurchase.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPurchasesTable,
			Columns: []string{user.UserPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpurchase.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
