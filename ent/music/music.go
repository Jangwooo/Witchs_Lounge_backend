// Code generated by ent, DO NOT EDIT.

package music

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the music type in the database.
	Label = "music"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldArtist holds the string denoting the artist field in the database.
	FieldArtist = "artist"
	// FieldComposer holds the string denoting the composer field in the database.
	FieldComposer = "composer"
	// FieldMusicSource holds the string denoting the music_source field in the database.
	FieldMusicSource = "music_source"
	// FieldJacketSource holds the string denoting the jacket_source field in the database.
	FieldJacketSource = "jacket_source"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldBpm holds the string denoting the bpm field in the database.
	FieldBpm = "bpm"
	// FieldGenre holds the string denoting the genre field in the database.
	FieldGenre = "genre"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsFeatured holds the string denoting the is_featured field in the database.
	FieldIsFeatured = "is_featured"
	// FieldIsFree holds the string denoting the is_free field in the database.
	FieldIsFree = "is_free"
	// FieldUnlockLevel holds the string denoting the unlock_level field in the database.
	FieldUnlockLevel = "unlock_level"
	// FieldReleaseDate holds the string denoting the release_date field in the database.
	FieldReleaseDate = "release_date"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeStages holds the string denoting the stages edge name in mutations.
	EdgeStages = "stages"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the music in the database.
	Table = "musics"
	// StagesTable is the table that holds the stages relation/edge.
	StagesTable = "stages"
	// StagesInverseTable is the table name for the Stage entity.
	// It exists in this package in order to avoid circular dependency with the "stage" package.
	StagesInverseTable = "stages"
	// StagesColumn is the table column denoting the stages relation/edge.
	StagesColumn = "music_id"
	// RecordsTable is the table that holds the records relation/edge.
	RecordsTable = "records"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
	// RecordsColumn is the table column denoting the records relation/edge.
	RecordsColumn = "music_id"
)

// Columns holds all SQL columns for music fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldArtist,
	FieldComposer,
	FieldMusicSource,
	FieldJacketSource,
	FieldDuration,
	FieldBpm,
	FieldGenre,
	FieldDescription,
	FieldIsFeatured,
	FieldIsFree,
	FieldUnlockLevel,
	FieldReleaseDate,
	FieldIsActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsFeatured holds the default value on creation for the "is_featured" field.
	DefaultIsFeatured bool
	// DefaultIsFree holds the default value on creation for the "is_free" field.
	DefaultIsFree bool
	// DefaultUnlockLevel holds the default value on creation for the "unlock_level" field.
	DefaultUnlockLevel int
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Music queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByArtist orders the results by the artist field.
func ByArtist(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtist, opts...).ToFunc()
}

// ByComposer orders the results by the composer field.
func ByComposer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComposer, opts...).ToFunc()
}

// ByMusicSource orders the results by the music_source field.
func ByMusicSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMusicSource, opts...).ToFunc()
}

// ByJacketSource orders the results by the jacket_source field.
func ByJacketSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJacketSource, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByBpm orders the results by the bpm field.
func ByBpm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBpm, opts...).ToFunc()
}

// ByGenre orders the results by the genre field.
func ByGenre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenre, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsFeatured orders the results by the is_featured field.
func ByIsFeatured(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFeatured, opts...).ToFunc()
}

// ByIsFree orders the results by the is_free field.
func ByIsFree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFree, opts...).ToFunc()
}

// ByUnlockLevel orders the results by the unlock_level field.
func ByUnlockLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnlockLevel, opts...).ToFunc()
}

// ByReleaseDate orders the results by the release_date field.
func ByReleaseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseDate, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByStagesCount orders the results by stages count.
func ByStagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStagesStep(), opts...)
	}
}

// ByStages orders the results by stages terms.
func ByStages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StagesTable, StagesColumn),
	)
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
	)
}
