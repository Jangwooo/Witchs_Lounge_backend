// Code generated by ent, DO NOT EDIT.

package music

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Music {
	return predicate.Music(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldName, v))
}

// MusicSource applies equality check predicate on the "music_source" field. It's identical to MusicSourceEQ.
func MusicSource(v string) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldMusicSource, v))
}

// JacketSource applies equality check predicate on the "jacket_source" field. It's identical to JacketSourceEQ.
func JacketSource(v string) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldJacketSource, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v float64) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldDuration, v))
}

// Author applies equality check predicate on the "Author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldAuthor, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Music {
	return predicate.Music(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Music {
	return predicate.Music(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Music {
	return predicate.Music(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Music {
	return predicate.Music(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Music {
	return predicate.Music(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Music {
	return predicate.Music(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Music {
	return predicate.Music(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Music {
	return predicate.Music(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Music {
	return predicate.Music(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Music {
	return predicate.Music(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Music {
	return predicate.Music(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Music {
	return predicate.Music(sql.FieldContainsFold(FieldName, v))
}

// MusicSourceEQ applies the EQ predicate on the "music_source" field.
func MusicSourceEQ(v string) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldMusicSource, v))
}

// MusicSourceNEQ applies the NEQ predicate on the "music_source" field.
func MusicSourceNEQ(v string) predicate.Music {
	return predicate.Music(sql.FieldNEQ(FieldMusicSource, v))
}

// MusicSourceIn applies the In predicate on the "music_source" field.
func MusicSourceIn(vs ...string) predicate.Music {
	return predicate.Music(sql.FieldIn(FieldMusicSource, vs...))
}

// MusicSourceNotIn applies the NotIn predicate on the "music_source" field.
func MusicSourceNotIn(vs ...string) predicate.Music {
	return predicate.Music(sql.FieldNotIn(FieldMusicSource, vs...))
}

// MusicSourceGT applies the GT predicate on the "music_source" field.
func MusicSourceGT(v string) predicate.Music {
	return predicate.Music(sql.FieldGT(FieldMusicSource, v))
}

// MusicSourceGTE applies the GTE predicate on the "music_source" field.
func MusicSourceGTE(v string) predicate.Music {
	return predicate.Music(sql.FieldGTE(FieldMusicSource, v))
}

// MusicSourceLT applies the LT predicate on the "music_source" field.
func MusicSourceLT(v string) predicate.Music {
	return predicate.Music(sql.FieldLT(FieldMusicSource, v))
}

// MusicSourceLTE applies the LTE predicate on the "music_source" field.
func MusicSourceLTE(v string) predicate.Music {
	return predicate.Music(sql.FieldLTE(FieldMusicSource, v))
}

// MusicSourceContains applies the Contains predicate on the "music_source" field.
func MusicSourceContains(v string) predicate.Music {
	return predicate.Music(sql.FieldContains(FieldMusicSource, v))
}

// MusicSourceHasPrefix applies the HasPrefix predicate on the "music_source" field.
func MusicSourceHasPrefix(v string) predicate.Music {
	return predicate.Music(sql.FieldHasPrefix(FieldMusicSource, v))
}

// MusicSourceHasSuffix applies the HasSuffix predicate on the "music_source" field.
func MusicSourceHasSuffix(v string) predicate.Music {
	return predicate.Music(sql.FieldHasSuffix(FieldMusicSource, v))
}

// MusicSourceEqualFold applies the EqualFold predicate on the "music_source" field.
func MusicSourceEqualFold(v string) predicate.Music {
	return predicate.Music(sql.FieldEqualFold(FieldMusicSource, v))
}

// MusicSourceContainsFold applies the ContainsFold predicate on the "music_source" field.
func MusicSourceContainsFold(v string) predicate.Music {
	return predicate.Music(sql.FieldContainsFold(FieldMusicSource, v))
}

// JacketSourceEQ applies the EQ predicate on the "jacket_source" field.
func JacketSourceEQ(v string) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldJacketSource, v))
}

// JacketSourceNEQ applies the NEQ predicate on the "jacket_source" field.
func JacketSourceNEQ(v string) predicate.Music {
	return predicate.Music(sql.FieldNEQ(FieldJacketSource, v))
}

// JacketSourceIn applies the In predicate on the "jacket_source" field.
func JacketSourceIn(vs ...string) predicate.Music {
	return predicate.Music(sql.FieldIn(FieldJacketSource, vs...))
}

// JacketSourceNotIn applies the NotIn predicate on the "jacket_source" field.
func JacketSourceNotIn(vs ...string) predicate.Music {
	return predicate.Music(sql.FieldNotIn(FieldJacketSource, vs...))
}

// JacketSourceGT applies the GT predicate on the "jacket_source" field.
func JacketSourceGT(v string) predicate.Music {
	return predicate.Music(sql.FieldGT(FieldJacketSource, v))
}

// JacketSourceGTE applies the GTE predicate on the "jacket_source" field.
func JacketSourceGTE(v string) predicate.Music {
	return predicate.Music(sql.FieldGTE(FieldJacketSource, v))
}

// JacketSourceLT applies the LT predicate on the "jacket_source" field.
func JacketSourceLT(v string) predicate.Music {
	return predicate.Music(sql.FieldLT(FieldJacketSource, v))
}

// JacketSourceLTE applies the LTE predicate on the "jacket_source" field.
func JacketSourceLTE(v string) predicate.Music {
	return predicate.Music(sql.FieldLTE(FieldJacketSource, v))
}

// JacketSourceContains applies the Contains predicate on the "jacket_source" field.
func JacketSourceContains(v string) predicate.Music {
	return predicate.Music(sql.FieldContains(FieldJacketSource, v))
}

// JacketSourceHasPrefix applies the HasPrefix predicate on the "jacket_source" field.
func JacketSourceHasPrefix(v string) predicate.Music {
	return predicate.Music(sql.FieldHasPrefix(FieldJacketSource, v))
}

// JacketSourceHasSuffix applies the HasSuffix predicate on the "jacket_source" field.
func JacketSourceHasSuffix(v string) predicate.Music {
	return predicate.Music(sql.FieldHasSuffix(FieldJacketSource, v))
}

// JacketSourceEqualFold applies the EqualFold predicate on the "jacket_source" field.
func JacketSourceEqualFold(v string) predicate.Music {
	return predicate.Music(sql.FieldEqualFold(FieldJacketSource, v))
}

// JacketSourceContainsFold applies the ContainsFold predicate on the "jacket_source" field.
func JacketSourceContainsFold(v string) predicate.Music {
	return predicate.Music(sql.FieldContainsFold(FieldJacketSource, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v float64) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v float64) predicate.Music {
	return predicate.Music(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...float64) predicate.Music {
	return predicate.Music(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...float64) predicate.Music {
	return predicate.Music(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v float64) predicate.Music {
	return predicate.Music(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v float64) predicate.Music {
	return predicate.Music(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v float64) predicate.Music {
	return predicate.Music(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v float64) predicate.Music {
	return predicate.Music(sql.FieldLTE(FieldDuration, v))
}

// AuthorEQ applies the EQ predicate on the "Author" field.
func AuthorEQ(v string) predicate.Music {
	return predicate.Music(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "Author" field.
func AuthorNEQ(v string) predicate.Music {
	return predicate.Music(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "Author" field.
func AuthorIn(vs ...string) predicate.Music {
	return predicate.Music(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "Author" field.
func AuthorNotIn(vs ...string) predicate.Music {
	return predicate.Music(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "Author" field.
func AuthorGT(v string) predicate.Music {
	return predicate.Music(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "Author" field.
func AuthorGTE(v string) predicate.Music {
	return predicate.Music(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "Author" field.
func AuthorLT(v string) predicate.Music {
	return predicate.Music(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "Author" field.
func AuthorLTE(v string) predicate.Music {
	return predicate.Music(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "Author" field.
func AuthorContains(v string) predicate.Music {
	return predicate.Music(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "Author" field.
func AuthorHasPrefix(v string) predicate.Music {
	return predicate.Music(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "Author" field.
func AuthorHasSuffix(v string) predicate.Music {
	return predicate.Music(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "Author" field.
func AuthorEqualFold(v string) predicate.Music {
	return predicate.Music(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "Author" field.
func AuthorContainsFold(v string) predicate.Music {
	return predicate.Music(sql.FieldContainsFold(FieldAuthor, v))
}

// HasStages applies the HasEdge predicate on the "stages" edge.
func HasStages() predicate.Music {
	return predicate.Music(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StagesTable, StagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStagesWith applies the HasEdge predicate on the "stages" edge with a given conditions (other predicates).
func HasStagesWith(preds ...predicate.Stage) predicate.Music {
	return predicate.Music(func(s *sql.Selector) {
		step := newStagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecords applies the HasEdge predicate on the "records" edge.
func HasRecords() predicate.Music {
	return predicate.Music(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordsWith applies the HasEdge predicate on the "records" edge with a given conditions (other predicates).
func HasRecordsWith(preds ...predicate.Record) predicate.Music {
	return predicate.Music(func(s *sql.Selector) {
		step := newRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Music) predicate.Music {
	return predicate.Music(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Music) predicate.Music {
	return predicate.Music(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Music) predicate.Music {
	return predicate.Music(sql.NotPredicates(p))
}
