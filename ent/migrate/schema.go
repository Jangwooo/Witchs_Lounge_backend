// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AchievementsColumns holds the columns for the "achievements" table.
	AchievementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "icon_url", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"score", "combo", "accuracy", "play_count", "special"}},
		{Name: "conditions", Type: field.TypeJSON},
		{Name: "rewards", Type: field.TypeJSON},
		{Name: "points", Type: field.TypeInt, Default: 0},
		{Name: "is_hidden", Type: field.TypeBool, Default: false},
		{Name: "is_active", Type: field.TypeBool, Default: true},
	}
	// AchievementsTable holds the schema information for the "achievements" table.
	AchievementsTable = &schema.Table{
		Name:       "achievements",
		Columns:    AchievementsColumns,
		PrimaryKey: []*schema.Column{AchievementsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "achievement_type",
				Unique:  false,
				Columns: []*schema.Column{AchievementsColumns[6]},
			},
			{
				Name:    "achievement_is_active",
				Unique:  false,
				Columns: []*schema.Column{AchievementsColumns[11]},
			},
			{
				Name:    "achievement_is_hidden",
				Unique:  false,
				Columns: []*schema.Column{AchievementsColumns[10]},
			},
		},
	}
	// CharactersColumns holds the columns for the "characters" table.
	CharactersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "source", Type: field.TypeString, Size: 2147483647},
	}
	// CharactersTable holds the schema information for the "characters" table.
	CharactersTable = &schema.Table{
		Name:       "characters",
		Columns:    CharactersColumns,
		PrimaryKey: []*schema.Column{CharactersColumns[0]},
	}
	// ItemsColumns holds the columns for the "items" table.
	ItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "effect_id", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"hat", "cane", "clothes"}},
		{Name: "source", Type: field.TypeString, Size: 2147483647},
	}
	// ItemsTable holds the schema information for the "items" table.
	ItemsTable = &schema.Table{
		Name:       "items",
		Columns:    ItemsColumns,
		PrimaryKey: []*schema.Column{ItemsColumns[0]},
	}
	// MusicsColumns holds the columns for the "musics" table.
	MusicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "artist", Type: field.TypeString, Size: 2147483647},
		{Name: "composer", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "music_source", Type: field.TypeString, Size: 2147483647},
		{Name: "jacket_source", Type: field.TypeString, Size: 2147483647},
		{Name: "duration", Type: field.TypeFloat64},
		{Name: "bpm", Type: field.TypeFloat64},
		{Name: "genre", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "is_featured", Type: field.TypeBool, Default: false},
		{Name: "is_free", Type: field.TypeBool, Default: true},
		{Name: "unlock_level", Type: field.TypeInt, Default: 1},
		{Name: "release_date", Type: field.TypeTime, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
	}
	// MusicsTable holds the schema information for the "musics" table.
	MusicsTable = &schema.Table{
		Name:       "musics",
		Columns:    MusicsColumns,
		PrimaryKey: []*schema.Column{MusicsColumns[0]},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"hat", "cane", "clothes", "character"}},
		{Name: "item_id", Type: field.TypeUUID, Nullable: true},
		{Name: "character_id", Type: field.TypeUUID, Nullable: true},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_items_item",
				Columns:    []*schema.Column{ProductsColumns[7]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "products_characters_character",
				Columns:    []*schema.Column{ProductsColumns[8]},
				RefColumns: []*schema.Column{CharactersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RecordsColumns holds the columns for the "records" table.
	RecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "score", Type: field.TypeInt},
		{Name: "perfect_count", Type: field.TypeInt, Default: 0},
		{Name: "good_count", Type: field.TypeInt, Default: 0},
		{Name: "bad_count", Type: field.TypeInt, Default: 0},
		{Name: "miss_count", Type: field.TypeInt, Default: 0},
		{Name: "max_combo", Type: field.TypeInt, Default: 0},
		{Name: "accuracy", Type: field.TypeFloat64, Default: 0},
		{Name: "rank", Type: field.TypeEnum, Nullable: true, Enums: []string{"F", "D", "C", "B", "A", "S", "SS", "SSS"}},
		{Name: "is_full_combo", Type: field.TypeBool, Default: false},
		{Name: "is_perfect_play", Type: field.TypeBool, Default: false},
		{Name: "played_at", Type: field.TypeTime},
		{Name: "play_duration", Type: field.TypeInt, Nullable: true},
		{Name: "additional_info", Type: field.TypeJSON, Nullable: true},
		{Name: "is_valid", Type: field.TypeBool, Default: true},
		{Name: "character_id", Type: field.TypeUUID},
		{Name: "music_id", Type: field.TypeUUID},
		{Name: "stage_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// RecordsTable holds the schema information for the "records" table.
	RecordsTable = &schema.Table{
		Name:       "records",
		Columns:    RecordsColumns,
		PrimaryKey: []*schema.Column{RecordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "records_characters_records",
				Columns:    []*schema.Column{RecordsColumns[17]},
				RefColumns: []*schema.Column{CharactersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "records_musics_records",
				Columns:    []*schema.Column{RecordsColumns[18]},
				RefColumns: []*schema.Column{MusicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "records_stages_records",
				Columns:    []*schema.Column{RecordsColumns[19]},
				RefColumns: []*schema.Column{StagesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "records_users_records",
				Columns:    []*schema.Column{RecordsColumns[20]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "record_user_id_music_id_stage_id",
				Unique:  false,
				Columns: []*schema.Column{RecordsColumns[20], RecordsColumns[18], RecordsColumns[19]},
			},
			{
				Name:    "record_user_id",
				Unique:  false,
				Columns: []*schema.Column{RecordsColumns[20]},
			},
			{
				Name:    "record_music_id",
				Unique:  false,
				Columns: []*schema.Column{RecordsColumns[18]},
			},
			{
				Name:    "record_stage_id",
				Unique:  false,
				Columns: []*schema.Column{RecordsColumns[19]},
			},
			{
				Name:    "record_played_at",
				Unique:  false,
				Columns: []*schema.Column{RecordsColumns[13]},
			},
		},
	}
	// StagesColumns holds the columns for the "stages" table.
	StagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "level_name", Type: field.TypeString, Size: 2147483647},
		{Name: "difficulty", Type: field.TypeInt},
		{Name: "level_address", Type: field.TypeString, Size: 2147483647},
		{Name: "jacket_address", Type: field.TypeString, Size: 2147483647},
		{Name: "total_notes", Type: field.TypeInt},
		{Name: "max_combo", Type: field.TypeInt},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "music_id", Type: field.TypeUUID},
	}
	// StagesTable holds the schema information for the "stages" table.
	StagesTable = &schema.Table{
		Name:       "stages",
		Columns:    StagesColumns,
		PrimaryKey: []*schema.Column{StagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "stages_musics_stages",
				Columns:    []*schema.Column{StagesColumns[10]},
				RefColumns: []*schema.Column{MusicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "platform_type", Type: field.TypeEnum, Enums: []string{"steam"}},
		{Name: "platform_user_id", Type: field.TypeString, Size: 2147483647},
		{Name: "platform_email", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "platform_avatar_url", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "platform_display_name", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "language", Type: field.TypeString, Size: 2147483647, Default: "ko"},
		{Name: "platform_data", Type: field.TypeJSON, Nullable: true},
		{Name: "is_verified", Type: field.TypeBool, Default: false},
		{Name: "nickname", Type: field.TypeString, Size: 2147483647},
		{Name: "display_name", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "last_login_at", Type: field.TypeTime},
		{Name: "level", Type: field.TypeInt, Default: 1},
		{Name: "exp", Type: field.TypeInt, Default: 0},
		{Name: "coin", Type: field.TypeInt, Default: 0},
		{Name: "gem", Type: field.TypeInt, Default: 0},
		{Name: "settings", Type: field.TypeJSON},
		{Name: "customize_data", Type: field.TypeJSON},
		{Name: "save_data", Type: field.TypeJSON},
		{Name: "is_banned", Type: field.TypeBool, Default: false},
		{Name: "banned_until", Type: field.TypeTime, Nullable: true},
		{Name: "ban_reason", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_platform_type_platform_user_id",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[3], UsersColumns[4]},
			},
			{
				Name:    "user_nickname",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[11]},
			},
			{
				Name:    "user_level",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[14]},
			},
			{
				Name:    "user_last_login_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[13]},
			},
		},
	}
	// UserAchievementsColumns holds the columns for the "user_achievements" table.
	UserAchievementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "unlocked_at", Type: field.TypeTime},
		{Name: "progress_data", Type: field.TypeJSON, Nullable: true},
		{Name: "achievement_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// UserAchievementsTable holds the schema information for the "user_achievements" table.
	UserAchievementsTable = &schema.Table{
		Name:       "user_achievements",
		Columns:    UserAchievementsColumns,
		PrimaryKey: []*schema.Column{UserAchievementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_achievements_achievements_user_achievements",
				Columns:    []*schema.Column{UserAchievementsColumns[5]},
				RefColumns: []*schema.Column{AchievementsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_achievements_users_user_achievements",
				Columns:    []*schema.Column{UserAchievementsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userachievement_user_id_achievement_id",
				Unique:  true,
				Columns: []*schema.Column{UserAchievementsColumns[6], UserAchievementsColumns[5]},
			},
			{
				Name:    "userachievement_unlocked_at",
				Unique:  false,
				Columns: []*schema.Column{UserAchievementsColumns[3]},
			},
		},
	}
	// UserPurchasesColumns holds the columns for the "user_purchases" table.
	UserPurchasesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "purchase_date", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "product_id", Type: field.TypeUUID},
	}
	// UserPurchasesTable holds the schema information for the "user_purchases" table.
	UserPurchasesTable = &schema.Table{
		Name:       "user_purchases",
		Columns:    UserPurchasesColumns,
		PrimaryKey: []*schema.Column{UserPurchasesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_purchases_users_user",
				Columns:    []*schema.Column{UserPurchasesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_purchases_products_product",
				Columns:    []*schema.Column{UserPurchasesColumns[5]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userpurchase_user_id_product_id",
				Unique:  true,
				Columns: []*schema.Column{UserPurchasesColumns[4], UserPurchasesColumns[5]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AchievementsTable,
		CharactersTable,
		ItemsTable,
		MusicsTable,
		ProductsTable,
		RecordsTable,
		StagesTable,
		UsersTable,
		UserAchievementsTable,
		UserPurchasesTable,
	}
)

func init() {
	ProductsTable.ForeignKeys[0].RefTable = ItemsTable
	ProductsTable.ForeignKeys[1].RefTable = CharactersTable
	RecordsTable.ForeignKeys[0].RefTable = CharactersTable
	RecordsTable.ForeignKeys[1].RefTable = MusicsTable
	RecordsTable.ForeignKeys[2].RefTable = StagesTable
	RecordsTable.ForeignKeys[3].RefTable = UsersTable
	StagesTable.ForeignKeys[0].RefTable = MusicsTable
	UserAchievementsTable.ForeignKeys[0].RefTable = AchievementsTable
	UserAchievementsTable.ForeignKeys[1].RefTable = UsersTable
	UserPurchasesTable.ForeignKeys[0].RefTable = UsersTable
	UserPurchasesTable.ForeignKeys[1].RefTable = ProductsTable
}
