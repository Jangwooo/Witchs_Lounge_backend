// Code generated by ent, DO NOT EDIT.

package product

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeItem holds the string denoting the item edge name in mutations.
	EdgeItem = "item"
	// EdgeCharacter holds the string denoting the character edge name in mutations.
	EdgeCharacter = "character"
	// EdgePurchasers holds the string denoting the purchasers edge name in mutations.
	EdgePurchasers = "purchasers"
	// EdgeUserPurchases holds the string denoting the user_purchases edge name in mutations.
	EdgeUserPurchases = "user_purchases"
	// Table holds the table name of the product in the database.
	Table = "products"
	// ItemTable is the table that holds the item relation/edge.
	ItemTable = "products"
	// ItemInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemInverseTable = "items"
	// ItemColumn is the table column denoting the item relation/edge.
	ItemColumn = "item_id"
	// CharacterTable is the table that holds the character relation/edge.
	CharacterTable = "products"
	// CharacterInverseTable is the table name for the Character entity.
	// It exists in this package in order to avoid circular dependency with the "character" package.
	CharacterInverseTable = "characters"
	// CharacterColumn is the table column denoting the character relation/edge.
	CharacterColumn = "character_id"
	// PurchasersTable is the table that holds the purchasers relation/edge. The primary key declared below.
	PurchasersTable = "user_purchases"
	// PurchasersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PurchasersInverseTable = "users"
	// UserPurchasesTable is the table that holds the user_purchases relation/edge.
	UserPurchasesTable = "user_purchases"
	// UserPurchasesInverseTable is the table name for the UserPurchase entity.
	// It exists in this package in order to avoid circular dependency with the "userpurchase" package.
	UserPurchasesInverseTable = "user_purchases"
	// UserPurchasesColumn is the table column denoting the user_purchases relation/edge.
	UserPurchasesColumn = "product_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPrice,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"item_id",
	"character_id",
}

var (
	// PurchasersPrimaryKey and PurchasersColumn2 are the table columns denoting the
	// primary key for the purchasers relation (M2M).
	PurchasersPrimaryKey = []string{"user_id", "product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(float64) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeHat       Type = "hat"
	TypeCane      Type = "cane"
	TypeClothes   Type = "clothes"
	TypeCharacter Type = "character"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeHat, TypeCane, TypeClothes, TypeCharacter:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByItemField orders the results by item field.
func ByItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemStep(), sql.OrderByField(field, opts...))
	}
}

// ByCharacterField orders the results by character field.
func ByCharacterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterStep(), sql.OrderByField(field, opts...))
	}
}

// ByPurchasersCount orders the results by purchasers count.
func ByPurchasersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPurchasersStep(), opts...)
	}
}

// ByPurchasers orders the results by purchasers terms.
func ByPurchasers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPurchasersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserPurchasesCount orders the results by user_purchases count.
func ByUserPurchasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserPurchasesStep(), opts...)
	}
}

// ByUserPurchases orders the results by user_purchases terms.
func ByUserPurchases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserPurchasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ItemTable, ItemColumn),
	)
}
func newCharacterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharacterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CharacterTable, CharacterColumn),
	)
}
func newPurchasersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PurchasersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PurchasersTable, PurchasersPrimaryKey...),
	)
}
func newUserPurchasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserPurchasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserPurchasesTable, UserPurchasesColumn),
	)
}
