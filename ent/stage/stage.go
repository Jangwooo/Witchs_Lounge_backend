// Code generated by ent, DO NOT EDIT.

package stage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the stage type in the database.
	Label = "stage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMusicID holds the string denoting the music_id field in the database.
	FieldMusicID = "music_id"
	// FieldLevelName holds the string denoting the level_name field in the database.
	FieldLevelName = "level_name"
	// FieldLevelAddress holds the string denoting the level_address field in the database.
	FieldLevelAddress = "level_address"
	// FieldJacketAddress holds the string denoting the jacket_address field in the database.
	FieldJacketAddress = "jacket_address"
	// EdgeMusic holds the string denoting the music edge name in mutations.
	EdgeMusic = "music"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the stage in the database.
	Table = "stages"
	// MusicTable is the table that holds the music relation/edge.
	MusicTable = "stages"
	// MusicInverseTable is the table name for the Music entity.
	// It exists in this package in order to avoid circular dependency with the "music" package.
	MusicInverseTable = "musics"
	// MusicColumn is the table column denoting the music relation/edge.
	MusicColumn = "music_id"
	// RecordsTable is the table that holds the records relation/edge.
	RecordsTable = "records"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
	// RecordsColumn is the table column denoting the records relation/edge.
	RecordsColumn = "stage_id"
)

// Columns holds all SQL columns for stage fields.
var Columns = []string{
	FieldID,
	FieldMusicID,
	FieldLevelName,
	FieldLevelAddress,
	FieldJacketAddress,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LevelNameValidator is a validator for the "level_name" field. It is called by the builders before save.
	LevelNameValidator func(string) error
	// LevelAddressValidator is a validator for the "level_address" field. It is called by the builders before save.
	LevelAddressValidator func(string) error
	// JacketAddressValidator is a validator for the "jacket_address" field. It is called by the builders before save.
	JacketAddressValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Stage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMusicID orders the results by the music_id field.
func ByMusicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMusicID, opts...).ToFunc()
}

// ByLevelName orders the results by the level_name field.
func ByLevelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelName, opts...).ToFunc()
}

// ByLevelAddress orders the results by the level_address field.
func ByLevelAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelAddress, opts...).ToFunc()
}

// ByJacketAddress orders the results by the jacket_address field.
func ByJacketAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJacketAddress, opts...).ToFunc()
}

// ByMusicField orders the results by music field.
func ByMusicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMusicStep(), sql.OrderByField(field, opts...))
	}
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMusicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MusicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MusicTable, MusicColumn),
	)
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
	)
}
