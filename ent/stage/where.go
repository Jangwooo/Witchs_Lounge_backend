// Code generated by ent, DO NOT EDIT.

package stage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldUpdatedAt, v))
}

// MusicID applies equality check predicate on the "music_id" field. It's identical to MusicIDEQ.
func MusicID(v uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldMusicID, v))
}

// LevelName applies equality check predicate on the "level_name" field. It's identical to LevelNameEQ.
func LevelName(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldLevelName, v))
}

// Difficulty applies equality check predicate on the "difficulty" field. It's identical to DifficultyEQ.
func Difficulty(v int) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldDifficulty, v))
}

// LevelAddress applies equality check predicate on the "level_address" field. It's identical to LevelAddressEQ.
func LevelAddress(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldLevelAddress, v))
}

// JacketAddress applies equality check predicate on the "jacket_address" field. It's identical to JacketAddressEQ.
func JacketAddress(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldJacketAddress, v))
}

// TotalNotes applies equality check predicate on the "total_notes" field. It's identical to TotalNotesEQ.
func TotalNotes(v int) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldTotalNotes, v))
}

// MaxCombo applies equality check predicate on the "max_combo" field. It's identical to MaxComboEQ.
func MaxCombo(v int) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldMaxCombo, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldIsActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldUpdatedAt, v))
}

// MusicIDEQ applies the EQ predicate on the "music_id" field.
func MusicIDEQ(v uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldMusicID, v))
}

// MusicIDNEQ applies the NEQ predicate on the "music_id" field.
func MusicIDNEQ(v uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldMusicID, v))
}

// MusicIDIn applies the In predicate on the "music_id" field.
func MusicIDIn(vs ...uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldMusicID, vs...))
}

// MusicIDNotIn applies the NotIn predicate on the "music_id" field.
func MusicIDNotIn(vs ...uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldMusicID, vs...))
}

// LevelNameEQ applies the EQ predicate on the "level_name" field.
func LevelNameEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldLevelName, v))
}

// LevelNameNEQ applies the NEQ predicate on the "level_name" field.
func LevelNameNEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldLevelName, v))
}

// LevelNameIn applies the In predicate on the "level_name" field.
func LevelNameIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldLevelName, vs...))
}

// LevelNameNotIn applies the NotIn predicate on the "level_name" field.
func LevelNameNotIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldLevelName, vs...))
}

// LevelNameGT applies the GT predicate on the "level_name" field.
func LevelNameGT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldLevelName, v))
}

// LevelNameGTE applies the GTE predicate on the "level_name" field.
func LevelNameGTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldLevelName, v))
}

// LevelNameLT applies the LT predicate on the "level_name" field.
func LevelNameLT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldLevelName, v))
}

// LevelNameLTE applies the LTE predicate on the "level_name" field.
func LevelNameLTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldLevelName, v))
}

// LevelNameContains applies the Contains predicate on the "level_name" field.
func LevelNameContains(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContains(FieldLevelName, v))
}

// LevelNameHasPrefix applies the HasPrefix predicate on the "level_name" field.
func LevelNameHasPrefix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasPrefix(FieldLevelName, v))
}

// LevelNameHasSuffix applies the HasSuffix predicate on the "level_name" field.
func LevelNameHasSuffix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasSuffix(FieldLevelName, v))
}

// LevelNameEqualFold applies the EqualFold predicate on the "level_name" field.
func LevelNameEqualFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEqualFold(FieldLevelName, v))
}

// LevelNameContainsFold applies the ContainsFold predicate on the "level_name" field.
func LevelNameContainsFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContainsFold(FieldLevelName, v))
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v int) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldDifficulty, v))
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v int) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldDifficulty, v))
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...int) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldDifficulty, vs...))
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...int) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldDifficulty, vs...))
}

// DifficultyGT applies the GT predicate on the "difficulty" field.
func DifficultyGT(v int) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldDifficulty, v))
}

// DifficultyGTE applies the GTE predicate on the "difficulty" field.
func DifficultyGTE(v int) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldDifficulty, v))
}

// DifficultyLT applies the LT predicate on the "difficulty" field.
func DifficultyLT(v int) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldDifficulty, v))
}

// DifficultyLTE applies the LTE predicate on the "difficulty" field.
func DifficultyLTE(v int) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldDifficulty, v))
}

// LevelAddressEQ applies the EQ predicate on the "level_address" field.
func LevelAddressEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldLevelAddress, v))
}

// LevelAddressNEQ applies the NEQ predicate on the "level_address" field.
func LevelAddressNEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldLevelAddress, v))
}

// LevelAddressIn applies the In predicate on the "level_address" field.
func LevelAddressIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldLevelAddress, vs...))
}

// LevelAddressNotIn applies the NotIn predicate on the "level_address" field.
func LevelAddressNotIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldLevelAddress, vs...))
}

// LevelAddressGT applies the GT predicate on the "level_address" field.
func LevelAddressGT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldLevelAddress, v))
}

// LevelAddressGTE applies the GTE predicate on the "level_address" field.
func LevelAddressGTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldLevelAddress, v))
}

// LevelAddressLT applies the LT predicate on the "level_address" field.
func LevelAddressLT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldLevelAddress, v))
}

// LevelAddressLTE applies the LTE predicate on the "level_address" field.
func LevelAddressLTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldLevelAddress, v))
}

// LevelAddressContains applies the Contains predicate on the "level_address" field.
func LevelAddressContains(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContains(FieldLevelAddress, v))
}

// LevelAddressHasPrefix applies the HasPrefix predicate on the "level_address" field.
func LevelAddressHasPrefix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasPrefix(FieldLevelAddress, v))
}

// LevelAddressHasSuffix applies the HasSuffix predicate on the "level_address" field.
func LevelAddressHasSuffix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasSuffix(FieldLevelAddress, v))
}

// LevelAddressEqualFold applies the EqualFold predicate on the "level_address" field.
func LevelAddressEqualFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEqualFold(FieldLevelAddress, v))
}

// LevelAddressContainsFold applies the ContainsFold predicate on the "level_address" field.
func LevelAddressContainsFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContainsFold(FieldLevelAddress, v))
}

// JacketAddressEQ applies the EQ predicate on the "jacket_address" field.
func JacketAddressEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldJacketAddress, v))
}

// JacketAddressNEQ applies the NEQ predicate on the "jacket_address" field.
func JacketAddressNEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldJacketAddress, v))
}

// JacketAddressIn applies the In predicate on the "jacket_address" field.
func JacketAddressIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldJacketAddress, vs...))
}

// JacketAddressNotIn applies the NotIn predicate on the "jacket_address" field.
func JacketAddressNotIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldJacketAddress, vs...))
}

// JacketAddressGT applies the GT predicate on the "jacket_address" field.
func JacketAddressGT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldJacketAddress, v))
}

// JacketAddressGTE applies the GTE predicate on the "jacket_address" field.
func JacketAddressGTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldJacketAddress, v))
}

// JacketAddressLT applies the LT predicate on the "jacket_address" field.
func JacketAddressLT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldJacketAddress, v))
}

// JacketAddressLTE applies the LTE predicate on the "jacket_address" field.
func JacketAddressLTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldJacketAddress, v))
}

// JacketAddressContains applies the Contains predicate on the "jacket_address" field.
func JacketAddressContains(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContains(FieldJacketAddress, v))
}

// JacketAddressHasPrefix applies the HasPrefix predicate on the "jacket_address" field.
func JacketAddressHasPrefix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasPrefix(FieldJacketAddress, v))
}

// JacketAddressHasSuffix applies the HasSuffix predicate on the "jacket_address" field.
func JacketAddressHasSuffix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasSuffix(FieldJacketAddress, v))
}

// JacketAddressEqualFold applies the EqualFold predicate on the "jacket_address" field.
func JacketAddressEqualFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEqualFold(FieldJacketAddress, v))
}

// JacketAddressContainsFold applies the ContainsFold predicate on the "jacket_address" field.
func JacketAddressContainsFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContainsFold(FieldJacketAddress, v))
}

// TotalNotesEQ applies the EQ predicate on the "total_notes" field.
func TotalNotesEQ(v int) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldTotalNotes, v))
}

// TotalNotesNEQ applies the NEQ predicate on the "total_notes" field.
func TotalNotesNEQ(v int) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldTotalNotes, v))
}

// TotalNotesIn applies the In predicate on the "total_notes" field.
func TotalNotesIn(vs ...int) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldTotalNotes, vs...))
}

// TotalNotesNotIn applies the NotIn predicate on the "total_notes" field.
func TotalNotesNotIn(vs ...int) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldTotalNotes, vs...))
}

// TotalNotesGT applies the GT predicate on the "total_notes" field.
func TotalNotesGT(v int) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldTotalNotes, v))
}

// TotalNotesGTE applies the GTE predicate on the "total_notes" field.
func TotalNotesGTE(v int) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldTotalNotes, v))
}

// TotalNotesLT applies the LT predicate on the "total_notes" field.
func TotalNotesLT(v int) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldTotalNotes, v))
}

// TotalNotesLTE applies the LTE predicate on the "total_notes" field.
func TotalNotesLTE(v int) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldTotalNotes, v))
}

// MaxComboEQ applies the EQ predicate on the "max_combo" field.
func MaxComboEQ(v int) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldMaxCombo, v))
}

// MaxComboNEQ applies the NEQ predicate on the "max_combo" field.
func MaxComboNEQ(v int) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldMaxCombo, v))
}

// MaxComboIn applies the In predicate on the "max_combo" field.
func MaxComboIn(vs ...int) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldMaxCombo, vs...))
}

// MaxComboNotIn applies the NotIn predicate on the "max_combo" field.
func MaxComboNotIn(vs ...int) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldMaxCombo, vs...))
}

// MaxComboGT applies the GT predicate on the "max_combo" field.
func MaxComboGT(v int) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldMaxCombo, v))
}

// MaxComboGTE applies the GTE predicate on the "max_combo" field.
func MaxComboGTE(v int) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldMaxCombo, v))
}

// MaxComboLT applies the LT predicate on the "max_combo" field.
func MaxComboLT(v int) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldMaxCombo, v))
}

// MaxComboLTE applies the LTE predicate on the "max_combo" field.
func MaxComboLTE(v int) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldMaxCombo, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldIsActive, v))
}

// HasMusic applies the HasEdge predicate on the "music" edge.
func HasMusic() predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MusicTable, MusicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMusicWith applies the HasEdge predicate on the "music" edge with a given conditions (other predicates).
func HasMusicWith(preds ...predicate.Music) predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := newMusicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecords applies the HasEdge predicate on the "records" edge.
func HasRecords() predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordsWith applies the HasEdge predicate on the "records" edge with a given conditions (other predicates).
func HasRecordsWith(preds ...predicate.Record) predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := newRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stage) predicate.Stage {
	return predicate.Stage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stage) predicate.Stage {
	return predicate.Stage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stage) predicate.Stage {
	return predicate.Stage(sql.NotPredicates(p))
}
