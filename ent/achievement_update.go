// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/achievement"
	"github.com/witchs-lounge_backend/ent/predicate"
	"github.com/witchs-lounge_backend/ent/userachievement"
)

// AchievementUpdate is the builder for updating Achievement entities.
type AchievementUpdate struct {
	config
	hooks    []Hook
	mutation *AchievementMutation
}

// Where appends a list predicates to the AchievementUpdate builder.
func (au *AchievementUpdate) Where(ps ...predicate.Achievement) *AchievementUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AchievementUpdate) SetUpdatedAt(t time.Time) *AchievementUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetName sets the "name" field.
func (au *AchievementUpdate) SetName(s string) *AchievementUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableName(s *string) *AchievementUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AchievementUpdate) SetDescription(s string) *AchievementUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableDescription(s *string) *AchievementUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// SetIconURL sets the "icon_url" field.
func (au *AchievementUpdate) SetIconURL(s string) *AchievementUpdate {
	au.mutation.SetIconURL(s)
	return au
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableIconURL(s *string) *AchievementUpdate {
	if s != nil {
		au.SetIconURL(*s)
	}
	return au
}

// ClearIconURL clears the value of the "icon_url" field.
func (au *AchievementUpdate) ClearIconURL() *AchievementUpdate {
	au.mutation.ClearIconURL()
	return au
}

// SetType sets the "type" field.
func (au *AchievementUpdate) SetType(a achievement.Type) *AchievementUpdate {
	au.mutation.SetType(a)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableType(a *achievement.Type) *AchievementUpdate {
	if a != nil {
		au.SetType(*a)
	}
	return au
}

// SetConditions sets the "conditions" field.
func (au *AchievementUpdate) SetConditions(m map[string]interface{}) *AchievementUpdate {
	au.mutation.SetConditions(m)
	return au
}

// SetRewards sets the "rewards" field.
func (au *AchievementUpdate) SetRewards(m map[string]interface{}) *AchievementUpdate {
	au.mutation.SetRewards(m)
	return au
}

// SetPoints sets the "points" field.
func (au *AchievementUpdate) SetPoints(i int) *AchievementUpdate {
	au.mutation.ResetPoints()
	au.mutation.SetPoints(i)
	return au
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (au *AchievementUpdate) SetNillablePoints(i *int) *AchievementUpdate {
	if i != nil {
		au.SetPoints(*i)
	}
	return au
}

// AddPoints adds i to the "points" field.
func (au *AchievementUpdate) AddPoints(i int) *AchievementUpdate {
	au.mutation.AddPoints(i)
	return au
}

// SetIsHidden sets the "is_hidden" field.
func (au *AchievementUpdate) SetIsHidden(b bool) *AchievementUpdate {
	au.mutation.SetIsHidden(b)
	return au
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableIsHidden(b *bool) *AchievementUpdate {
	if b != nil {
		au.SetIsHidden(*b)
	}
	return au
}

// SetIsActive sets the "is_active" field.
func (au *AchievementUpdate) SetIsActive(b bool) *AchievementUpdate {
	au.mutation.SetIsActive(b)
	return au
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableIsActive(b *bool) *AchievementUpdate {
	if b != nil {
		au.SetIsActive(*b)
	}
	return au
}

// AddUserAchievementIDs adds the "user_achievements" edge to the UserAchievement entity by IDs.
func (au *AchievementUpdate) AddUserAchievementIDs(ids ...uuid.UUID) *AchievementUpdate {
	au.mutation.AddUserAchievementIDs(ids...)
	return au
}

// AddUserAchievements adds the "user_achievements" edges to the UserAchievement entity.
func (au *AchievementUpdate) AddUserAchievements(u ...*UserAchievement) *AchievementUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddUserAchievementIDs(ids...)
}

// Mutation returns the AchievementMutation object of the builder.
func (au *AchievementUpdate) Mutation() *AchievementMutation {
	return au.mutation
}

// ClearUserAchievements clears all "user_achievements" edges to the UserAchievement entity.
func (au *AchievementUpdate) ClearUserAchievements() *AchievementUpdate {
	au.mutation.ClearUserAchievements()
	return au
}

// RemoveUserAchievementIDs removes the "user_achievements" edge to UserAchievement entities by IDs.
func (au *AchievementUpdate) RemoveUserAchievementIDs(ids ...uuid.UUID) *AchievementUpdate {
	au.mutation.RemoveUserAchievementIDs(ids...)
	return au
}

// RemoveUserAchievements removes "user_achievements" edges to UserAchievement entities.
func (au *AchievementUpdate) RemoveUserAchievements(u ...*UserAchievement) *AchievementUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveUserAchievementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AchievementUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AchievementUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AchievementUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AchievementUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AchievementUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := achievement.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AchievementUpdate) check() error {
	if v, ok := au.mutation.GetType(); ok {
		if err := achievement.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Achievement.type": %w`, err)}
		}
	}
	return nil
}

func (au *AchievementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(achievement.Table, achievement.Columns, sqlgraph.NewFieldSpec(achievement.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(achievement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(achievement.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(achievement.FieldDescription, field.TypeString, value)
	}
	if value, ok := au.mutation.IconURL(); ok {
		_spec.SetField(achievement.FieldIconURL, field.TypeString, value)
	}
	if au.mutation.IconURLCleared() {
		_spec.ClearField(achievement.FieldIconURL, field.TypeString)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(achievement.FieldType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Conditions(); ok {
		_spec.SetField(achievement.FieldConditions, field.TypeJSON, value)
	}
	if value, ok := au.mutation.Rewards(); ok {
		_spec.SetField(achievement.FieldRewards, field.TypeJSON, value)
	}
	if value, ok := au.mutation.Points(); ok {
		_spec.SetField(achievement.FieldPoints, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedPoints(); ok {
		_spec.AddField(achievement.FieldPoints, field.TypeInt, value)
	}
	if value, ok := au.mutation.IsHidden(); ok {
		_spec.SetField(achievement.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := au.mutation.IsActive(); ok {
		_spec.SetField(achievement.FieldIsActive, field.TypeBool, value)
	}
	if au.mutation.UserAchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   achievement.UserAchievementsTable,
			Columns: []string{achievement.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedUserAchievementsIDs(); len(nodes) > 0 && !au.mutation.UserAchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   achievement.UserAchievementsTable,
			Columns: []string{achievement.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserAchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   achievement.UserAchievementsTable,
			Columns: []string{achievement.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{achievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AchievementUpdateOne is the builder for updating a single Achievement entity.
type AchievementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AchievementMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AchievementUpdateOne) SetUpdatedAt(t time.Time) *AchievementUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetName sets the "name" field.
func (auo *AchievementUpdateOne) SetName(s string) *AchievementUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableName(s *string) *AchievementUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AchievementUpdateOne) SetDescription(s string) *AchievementUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableDescription(s *string) *AchievementUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// SetIconURL sets the "icon_url" field.
func (auo *AchievementUpdateOne) SetIconURL(s string) *AchievementUpdateOne {
	auo.mutation.SetIconURL(s)
	return auo
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableIconURL(s *string) *AchievementUpdateOne {
	if s != nil {
		auo.SetIconURL(*s)
	}
	return auo
}

// ClearIconURL clears the value of the "icon_url" field.
func (auo *AchievementUpdateOne) ClearIconURL() *AchievementUpdateOne {
	auo.mutation.ClearIconURL()
	return auo
}

// SetType sets the "type" field.
func (auo *AchievementUpdateOne) SetType(a achievement.Type) *AchievementUpdateOne {
	auo.mutation.SetType(a)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableType(a *achievement.Type) *AchievementUpdateOne {
	if a != nil {
		auo.SetType(*a)
	}
	return auo
}

// SetConditions sets the "conditions" field.
func (auo *AchievementUpdateOne) SetConditions(m map[string]interface{}) *AchievementUpdateOne {
	auo.mutation.SetConditions(m)
	return auo
}

// SetRewards sets the "rewards" field.
func (auo *AchievementUpdateOne) SetRewards(m map[string]interface{}) *AchievementUpdateOne {
	auo.mutation.SetRewards(m)
	return auo
}

// SetPoints sets the "points" field.
func (auo *AchievementUpdateOne) SetPoints(i int) *AchievementUpdateOne {
	auo.mutation.ResetPoints()
	auo.mutation.SetPoints(i)
	return auo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillablePoints(i *int) *AchievementUpdateOne {
	if i != nil {
		auo.SetPoints(*i)
	}
	return auo
}

// AddPoints adds i to the "points" field.
func (auo *AchievementUpdateOne) AddPoints(i int) *AchievementUpdateOne {
	auo.mutation.AddPoints(i)
	return auo
}

// SetIsHidden sets the "is_hidden" field.
func (auo *AchievementUpdateOne) SetIsHidden(b bool) *AchievementUpdateOne {
	auo.mutation.SetIsHidden(b)
	return auo
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableIsHidden(b *bool) *AchievementUpdateOne {
	if b != nil {
		auo.SetIsHidden(*b)
	}
	return auo
}

// SetIsActive sets the "is_active" field.
func (auo *AchievementUpdateOne) SetIsActive(b bool) *AchievementUpdateOne {
	auo.mutation.SetIsActive(b)
	return auo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableIsActive(b *bool) *AchievementUpdateOne {
	if b != nil {
		auo.SetIsActive(*b)
	}
	return auo
}

// AddUserAchievementIDs adds the "user_achievements" edge to the UserAchievement entity by IDs.
func (auo *AchievementUpdateOne) AddUserAchievementIDs(ids ...uuid.UUID) *AchievementUpdateOne {
	auo.mutation.AddUserAchievementIDs(ids...)
	return auo
}

// AddUserAchievements adds the "user_achievements" edges to the UserAchievement entity.
func (auo *AchievementUpdateOne) AddUserAchievements(u ...*UserAchievement) *AchievementUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddUserAchievementIDs(ids...)
}

// Mutation returns the AchievementMutation object of the builder.
func (auo *AchievementUpdateOne) Mutation() *AchievementMutation {
	return auo.mutation
}

// ClearUserAchievements clears all "user_achievements" edges to the UserAchievement entity.
func (auo *AchievementUpdateOne) ClearUserAchievements() *AchievementUpdateOne {
	auo.mutation.ClearUserAchievements()
	return auo
}

// RemoveUserAchievementIDs removes the "user_achievements" edge to UserAchievement entities by IDs.
func (auo *AchievementUpdateOne) RemoveUserAchievementIDs(ids ...uuid.UUID) *AchievementUpdateOne {
	auo.mutation.RemoveUserAchievementIDs(ids...)
	return auo
}

// RemoveUserAchievements removes "user_achievements" edges to UserAchievement entities.
func (auo *AchievementUpdateOne) RemoveUserAchievements(u ...*UserAchievement) *AchievementUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveUserAchievementIDs(ids...)
}

// Where appends a list predicates to the AchievementUpdate builder.
func (auo *AchievementUpdateOne) Where(ps ...predicate.Achievement) *AchievementUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AchievementUpdateOne) Select(field string, fields ...string) *AchievementUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Achievement entity.
func (auo *AchievementUpdateOne) Save(ctx context.Context) (*Achievement, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AchievementUpdateOne) SaveX(ctx context.Context) *Achievement {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AchievementUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AchievementUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AchievementUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := achievement.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AchievementUpdateOne) check() error {
	if v, ok := auo.mutation.GetType(); ok {
		if err := achievement.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Achievement.type": %w`, err)}
		}
	}
	return nil
}

func (auo *AchievementUpdateOne) sqlSave(ctx context.Context) (_node *Achievement, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(achievement.Table, achievement.Columns, sqlgraph.NewFieldSpec(achievement.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Achievement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, achievement.FieldID)
		for _, f := range fields {
			if !achievement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != achievement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(achievement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(achievement.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(achievement.FieldDescription, field.TypeString, value)
	}
	if value, ok := auo.mutation.IconURL(); ok {
		_spec.SetField(achievement.FieldIconURL, field.TypeString, value)
	}
	if auo.mutation.IconURLCleared() {
		_spec.ClearField(achievement.FieldIconURL, field.TypeString)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(achievement.FieldType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Conditions(); ok {
		_spec.SetField(achievement.FieldConditions, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.Rewards(); ok {
		_spec.SetField(achievement.FieldRewards, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.Points(); ok {
		_spec.SetField(achievement.FieldPoints, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedPoints(); ok {
		_spec.AddField(achievement.FieldPoints, field.TypeInt, value)
	}
	if value, ok := auo.mutation.IsHidden(); ok {
		_spec.SetField(achievement.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := auo.mutation.IsActive(); ok {
		_spec.SetField(achievement.FieldIsActive, field.TypeBool, value)
	}
	if auo.mutation.UserAchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   achievement.UserAchievementsTable,
			Columns: []string{achievement.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedUserAchievementsIDs(); len(nodes) > 0 && !auo.mutation.UserAchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   achievement.UserAchievementsTable,
			Columns: []string{achievement.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserAchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   achievement.UserAchievementsTable,
			Columns: []string{achievement.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Achievement{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{achievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
