// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	// Global custom UUID ID
	ID uuid.UUID `json:"id,omitempty"`
	// Created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Updated time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// SteamID holds the value of the "steam_id" field.
	SteamID string `json:"steam_id,omitempty"`
	// SteamAvatarURL holds the value of the "steam_avatar_url" field.
	SteamAvatarURL string `json:"steam_avatar_url,omitempty"`
	// SteamDefaultLanguage holds the value of the "steam_default_language" field.
	SteamDefaultLanguage string `json:"steam_default_language,omitempty"`
	// LastLoginAt holds the value of the "last_login_at" field.
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// CustomizeData holds the value of the "customize_data" field.
	CustomizeData *string `json:"customize_data,omitempty"`
	// SaveData holds the value of the "save_data" field.
	SaveData *string `json:"save_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// PurchasedProducts holds the value of the purchased_products edge.
	PurchasedProducts []*Product `json:"purchased_products,omitempty"`
	// Records holds the value of the records edge.
	Records []*Record `json:"records,omitempty"`
	// UserPurchases holds the value of the user_purchases edge.
	UserPurchases []*UserPurchase `json:"user_purchases,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PurchasedProductsOrErr returns the PurchasedProducts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PurchasedProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.PurchasedProducts, nil
	}
	return nil, &NotLoadedError{edge: "purchased_products"}
}

// RecordsOrErr returns the Records value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RecordsOrErr() ([]*Record, error) {
	if e.loadedTypes[1] {
		return e.Records, nil
	}
	return nil, &NotLoadedError{edge: "records"}
}

// UserPurchasesOrErr returns the UserPurchases value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserPurchasesOrErr() ([]*UserPurchase, error) {
	if e.loadedTypes[2] {
		return e.UserPurchases, nil
	}
	return nil, &NotLoadedError{edge: "user_purchases"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldNickname, user.FieldSteamID, user.FieldSteamAvatarURL, user.FieldSteamDefaultLanguage, user.FieldCustomizeData, user.FieldSaveData:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldLastLoginAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				u.Nickname = value.String
			}
		case user.FieldSteamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field steam_id", values[i])
			} else if value.Valid {
				u.SteamID = value.String
			}
		case user.FieldSteamAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field steam_avatar_url", values[i])
			} else if value.Valid {
				u.SteamAvatarURL = value.String
			}
		case user.FieldSteamDefaultLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field steam_default_language", values[i])
			} else if value.Valid {
				u.SteamDefaultLanguage = value.String
			}
		case user.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				u.LastLoginAt = value.Time
			}
		case user.FieldCustomizeData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customize_data", values[i])
			} else if value.Valid {
				u.CustomizeData = new(string)
				*u.CustomizeData = value.String
			}
		case user.FieldSaveData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field save_data", values[i])
			} else if value.Valid {
				u.SaveData = new(string)
				*u.SaveData = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryPurchasedProducts queries the "purchased_products" edge of the User entity.
func (u *User) QueryPurchasedProducts() *ProductQuery {
	return NewUserClient(u.config).QueryPurchasedProducts(u)
}

// QueryRecords queries the "records" edge of the User entity.
func (u *User) QueryRecords() *RecordQuery {
	return NewUserClient(u.config).QueryRecords(u)
}

// QueryUserPurchases queries the "user_purchases" edge of the User entity.
func (u *User) QueryUserPurchases() *UserPurchaseQuery {
	return NewUserClient(u.config).QueryUserPurchases(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(u.Nickname)
	builder.WriteString(", ")
	builder.WriteString("steam_id=")
	builder.WriteString(u.SteamID)
	builder.WriteString(", ")
	builder.WriteString("steam_avatar_url=")
	builder.WriteString(u.SteamAvatarURL)
	builder.WriteString(", ")
	builder.WriteString("steam_default_language=")
	builder.WriteString(u.SteamDefaultLanguage)
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(u.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.CustomizeData; v != nil {
		builder.WriteString("customize_data=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.SaveData; v != nil {
		builder.WriteString("save_data=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
