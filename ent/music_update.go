// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/witchs-lounge_backend/ent/music"
	"github.com/witchs-lounge_backend/ent/predicate"
	"github.com/witchs-lounge_backend/ent/record"
	"github.com/witchs-lounge_backend/ent/stage"
)

// MusicUpdate is the builder for updating Music entities.
type MusicUpdate struct {
	config
	hooks    []Hook
	mutation *MusicMutation
}

// Where appends a list predicates to the MusicUpdate builder.
func (mu *MusicUpdate) Where(ps ...predicate.Music) *MusicUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MusicUpdate) SetUpdatedAt(t time.Time) *MusicUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetName sets the "name" field.
func (mu *MusicUpdate) SetName(s string) *MusicUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableName(s *string) *MusicUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetMusicSource sets the "music_source" field.
func (mu *MusicUpdate) SetMusicSource(s string) *MusicUpdate {
	mu.mutation.SetMusicSource(s)
	return mu
}

// SetNillableMusicSource sets the "music_source" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableMusicSource(s *string) *MusicUpdate {
	if s != nil {
		mu.SetMusicSource(*s)
	}
	return mu
}

// SetJacketSource sets the "jacket_source" field.
func (mu *MusicUpdate) SetJacketSource(s string) *MusicUpdate {
	mu.mutation.SetJacketSource(s)
	return mu
}

// SetNillableJacketSource sets the "jacket_source" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableJacketSource(s *string) *MusicUpdate {
	if s != nil {
		mu.SetJacketSource(*s)
	}
	return mu
}

// SetDuration sets the "duration" field.
func (mu *MusicUpdate) SetDuration(f float64) *MusicUpdate {
	mu.mutation.ResetDuration()
	mu.mutation.SetDuration(f)
	return mu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableDuration(f *float64) *MusicUpdate {
	if f != nil {
		mu.SetDuration(*f)
	}
	return mu
}

// AddDuration adds f to the "duration" field.
func (mu *MusicUpdate) AddDuration(f float64) *MusicUpdate {
	mu.mutation.AddDuration(f)
	return mu
}

// SetAuthor sets the "Author" field.
func (mu *MusicUpdate) SetAuthor(s string) *MusicUpdate {
	mu.mutation.SetAuthor(s)
	return mu
}

// SetNillableAuthor sets the "Author" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableAuthor(s *string) *MusicUpdate {
	if s != nil {
		mu.SetAuthor(*s)
	}
	return mu
}

// AddStageIDs adds the "stages" edge to the Stage entity by IDs.
func (mu *MusicUpdate) AddStageIDs(ids ...uuid.UUID) *MusicUpdate {
	mu.mutation.AddStageIDs(ids...)
	return mu
}

// AddStages adds the "stages" edges to the Stage entity.
func (mu *MusicUpdate) AddStages(s ...*Stage) *MusicUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.AddStageIDs(ids...)
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (mu *MusicUpdate) AddRecordIDs(ids ...uuid.UUID) *MusicUpdate {
	mu.mutation.AddRecordIDs(ids...)
	return mu
}

// AddRecords adds the "records" edges to the Record entity.
func (mu *MusicUpdate) AddRecords(r ...*Record) *MusicUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddRecordIDs(ids...)
}

// Mutation returns the MusicMutation object of the builder.
func (mu *MusicUpdate) Mutation() *MusicMutation {
	return mu.mutation
}

// ClearStages clears all "stages" edges to the Stage entity.
func (mu *MusicUpdate) ClearStages() *MusicUpdate {
	mu.mutation.ClearStages()
	return mu
}

// RemoveStageIDs removes the "stages" edge to Stage entities by IDs.
func (mu *MusicUpdate) RemoveStageIDs(ids ...uuid.UUID) *MusicUpdate {
	mu.mutation.RemoveStageIDs(ids...)
	return mu
}

// RemoveStages removes "stages" edges to Stage entities.
func (mu *MusicUpdate) RemoveStages(s ...*Stage) *MusicUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.RemoveStageIDs(ids...)
}

// ClearRecords clears all "records" edges to the Record entity.
func (mu *MusicUpdate) ClearRecords() *MusicUpdate {
	mu.mutation.ClearRecords()
	return mu
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (mu *MusicUpdate) RemoveRecordIDs(ids ...uuid.UUID) *MusicUpdate {
	mu.mutation.RemoveRecordIDs(ids...)
	return mu
}

// RemoveRecords removes "records" edges to Record entities.
func (mu *MusicUpdate) RemoveRecords(r ...*Record) *MusicUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MusicUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MusicUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MusicUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MusicUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MusicUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := music.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MusicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(music.Table, music.Columns, sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(music.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(music.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.MusicSource(); ok {
		_spec.SetField(music.FieldMusicSource, field.TypeString, value)
	}
	if value, ok := mu.mutation.JacketSource(); ok {
		_spec.SetField(music.FieldJacketSource, field.TypeString, value)
	}
	if value, ok := mu.mutation.Duration(); ok {
		_spec.SetField(music.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedDuration(); ok {
		_spec.AddField(music.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.Author(); ok {
		_spec.SetField(music.FieldAuthor, field.TypeString, value)
	}
	if mu.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.StagesTable,
			Columns: []string{music.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedStagesIDs(); len(nodes) > 0 && !mu.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.StagesTable,
			Columns: []string{music.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.StagesTable,
			Columns: []string{music.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.RecordsTable,
			Columns: []string{music.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !mu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.RecordsTable,
			Columns: []string{music.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.RecordsTable,
			Columns: []string{music.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{music.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MusicUpdateOne is the builder for updating a single Music entity.
type MusicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MusicMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MusicUpdateOne) SetUpdatedAt(t time.Time) *MusicUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetName sets the "name" field.
func (muo *MusicUpdateOne) SetName(s string) *MusicUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableName(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetMusicSource sets the "music_source" field.
func (muo *MusicUpdateOne) SetMusicSource(s string) *MusicUpdateOne {
	muo.mutation.SetMusicSource(s)
	return muo
}

// SetNillableMusicSource sets the "music_source" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableMusicSource(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetMusicSource(*s)
	}
	return muo
}

// SetJacketSource sets the "jacket_source" field.
func (muo *MusicUpdateOne) SetJacketSource(s string) *MusicUpdateOne {
	muo.mutation.SetJacketSource(s)
	return muo
}

// SetNillableJacketSource sets the "jacket_source" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableJacketSource(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetJacketSource(*s)
	}
	return muo
}

// SetDuration sets the "duration" field.
func (muo *MusicUpdateOne) SetDuration(f float64) *MusicUpdateOne {
	muo.mutation.ResetDuration()
	muo.mutation.SetDuration(f)
	return muo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableDuration(f *float64) *MusicUpdateOne {
	if f != nil {
		muo.SetDuration(*f)
	}
	return muo
}

// AddDuration adds f to the "duration" field.
func (muo *MusicUpdateOne) AddDuration(f float64) *MusicUpdateOne {
	muo.mutation.AddDuration(f)
	return muo
}

// SetAuthor sets the "Author" field.
func (muo *MusicUpdateOne) SetAuthor(s string) *MusicUpdateOne {
	muo.mutation.SetAuthor(s)
	return muo
}

// SetNillableAuthor sets the "Author" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableAuthor(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetAuthor(*s)
	}
	return muo
}

// AddStageIDs adds the "stages" edge to the Stage entity by IDs.
func (muo *MusicUpdateOne) AddStageIDs(ids ...uuid.UUID) *MusicUpdateOne {
	muo.mutation.AddStageIDs(ids...)
	return muo
}

// AddStages adds the "stages" edges to the Stage entity.
func (muo *MusicUpdateOne) AddStages(s ...*Stage) *MusicUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.AddStageIDs(ids...)
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (muo *MusicUpdateOne) AddRecordIDs(ids ...uuid.UUID) *MusicUpdateOne {
	muo.mutation.AddRecordIDs(ids...)
	return muo
}

// AddRecords adds the "records" edges to the Record entity.
func (muo *MusicUpdateOne) AddRecords(r ...*Record) *MusicUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddRecordIDs(ids...)
}

// Mutation returns the MusicMutation object of the builder.
func (muo *MusicUpdateOne) Mutation() *MusicMutation {
	return muo.mutation
}

// ClearStages clears all "stages" edges to the Stage entity.
func (muo *MusicUpdateOne) ClearStages() *MusicUpdateOne {
	muo.mutation.ClearStages()
	return muo
}

// RemoveStageIDs removes the "stages" edge to Stage entities by IDs.
func (muo *MusicUpdateOne) RemoveStageIDs(ids ...uuid.UUID) *MusicUpdateOne {
	muo.mutation.RemoveStageIDs(ids...)
	return muo
}

// RemoveStages removes "stages" edges to Stage entities.
func (muo *MusicUpdateOne) RemoveStages(s ...*Stage) *MusicUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.RemoveStageIDs(ids...)
}

// ClearRecords clears all "records" edges to the Record entity.
func (muo *MusicUpdateOne) ClearRecords() *MusicUpdateOne {
	muo.mutation.ClearRecords()
	return muo
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (muo *MusicUpdateOne) RemoveRecordIDs(ids ...uuid.UUID) *MusicUpdateOne {
	muo.mutation.RemoveRecordIDs(ids...)
	return muo
}

// RemoveRecords removes "records" edges to Record entities.
func (muo *MusicUpdateOne) RemoveRecords(r ...*Record) *MusicUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveRecordIDs(ids...)
}

// Where appends a list predicates to the MusicUpdate builder.
func (muo *MusicUpdateOne) Where(ps ...predicate.Music) *MusicUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MusicUpdateOne) Select(field string, fields ...string) *MusicUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Music entity.
func (muo *MusicUpdateOne) Save(ctx context.Context) (*Music, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MusicUpdateOne) SaveX(ctx context.Context) *Music {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MusicUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MusicUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MusicUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := music.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MusicUpdateOne) sqlSave(ctx context.Context) (_node *Music, err error) {
	_spec := sqlgraph.NewUpdateSpec(music.Table, music.Columns, sqlgraph.NewFieldSpec(music.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Music.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, music.FieldID)
		for _, f := range fields {
			if !music.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != music.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(music.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(music.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.MusicSource(); ok {
		_spec.SetField(music.FieldMusicSource, field.TypeString, value)
	}
	if value, ok := muo.mutation.JacketSource(); ok {
		_spec.SetField(music.FieldJacketSource, field.TypeString, value)
	}
	if value, ok := muo.mutation.Duration(); ok {
		_spec.SetField(music.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedDuration(); ok {
		_spec.AddField(music.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.Author(); ok {
		_spec.SetField(music.FieldAuthor, field.TypeString, value)
	}
	if muo.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.StagesTable,
			Columns: []string{music.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedStagesIDs(); len(nodes) > 0 && !muo.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.StagesTable,
			Columns: []string{music.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.StagesTable,
			Columns: []string{music.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.RecordsTable,
			Columns: []string{music.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !muo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.RecordsTable,
			Columns: []string{music.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   music.RecordsTable,
			Columns: []string{music.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Music{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{music.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
